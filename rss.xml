<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[sunrisehouse rss feed]]></title><description><![CDATA[sunrisehouse rss feed]]></description><link>https://sunrisehouse.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 29 Jul 2023 10:01:42 GMT</lastBuildDate><item><title><![CDATA[Toss Slash23 (4) - Kafka 이중화로 다양한 장애 상황 완벽 대처하기]]></title><description><![CDATA[Kafka 이중화로 다양한 장애 상황 완벽 대처하기! 보러가기 Kafka 이중화 ?? Kafka…]]></description><link>https://sunrisehouse.github.io/posts/36</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/36</guid><pubDate>Fri, 14 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;kafka-이중화로-다양한-장애-상황-완벽-대처하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#kafka-%EC%9D%B4%EC%A4%91%ED%99%94%EB%A1%9C-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%9E%A5%EC%95%A0-%EC%83%81%ED%99%A9-%EC%99%84%EB%B2%BD-%EB%8C%80%EC%B2%98%ED%95%98%EA%B8%B0&quot; aria-label=&quot;kafka 이중화로 다양한 장애 상황 완벽 대처하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Kafka 이중화로 다양한 장애 상황 완벽 대처하기!&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/Pzkioe7Dvo4&quot;&gt;보러가기&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Kafka 이중화 ??&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kafka 클러스터 안에 노드는 다중화 구성을 통해 안정적으로 운영이 가능하다고 알고 있었다. 클러스터 자체를 이중화 구성해야 한다는 생각 자체를 안해본 것 같다. Kafka 클러스터 이중화를 한거면 Kubernetes 클러스터도 이중화 되어 있나?? 하는 생각도 들고 단점이 더 크지 않을까 하는 생각도 들긴하는데 일단 구성에 성공했다는게 멋진 것 같다. 이중화를 위해서 Kafka Connect 사용했는데 이것도 이중화해야하는거 아니야?? 이중화란 것에 대해서 좀 생각을 해봐야 할 것 같다. 물론 되어 있으면 좋지만 그에 대한 오버헤드 또한 고려해야할 것 같다. Kafka 또한 메시지를 보관하는 중요한 Data 저장소라고 생각하면 괜찮은 것 같기도 하다. 아니면 Kafka 에 대한 신뢰가 부족해서 그런 것 같기도 하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;active - active 이게 되네??&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DB 도 그렇고 active - active 구성에 대해 이게 진짜 돼?? 라는 생각을 갖고 있었다. Kafka 를 active - active 로 이중화 구성을 했다는 것에 놀랐다. active - standby, active - active 에 대한 토스의 생각 또한 재밌었다. 데이터 sync 를 맞추기 위해서 kafka connect 를 쓴다는데 현재 신용 카드 프로젝트에서 Kafka Connect 에 대해 조사 중 신뢰성이 부족하다는 얘기가 있는데 토스는 어떻게 판단했나 궁금하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-kafka-장애-상황&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-kafka-%EC%9E%A5%EC%95%A0-%EC%83%81%ED%99%A9&quot; aria-label=&quot;1 kafka 장애 상황 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Kafka 장애 상황&lt;/h2&gt;
&lt;h4 id=&quot;11-kafka-cluster-내의-일부-노드-장애&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#11-kafka-cluster-%EB%82%B4%EC%9D%98-%EC%9D%BC%EB%B6%80-%EB%85%B8%EB%93%9C-%EC%9E%A5%EC%95%A0&quot; aria-label=&quot;11 kafka cluster 내의 일부 노드 장애 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.1 Kafka Cluster 내의 일부 노드 장애&lt;/h4&gt;
&lt;p&gt;kafka 가 분산 시스템이라 클러스터 내 일부 노드 장애가 발생해도 가용성을 헤치지 않고 서비스를 유지할 수 있도록 디자인이 돼어 있다.
오랜 운영 경험으로 장애 징후 감지 모니터링이나 장애 대응 프로세스 정립으로 극복 가능&lt;/p&gt;
&lt;h4 id=&quot;12-idc-전면-장애&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#12-idc-%EC%A0%84%EB%A9%B4-%EC%9E%A5%EC%95%A0&quot; aria-label=&quot;12 idc 전면 장애 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.2 IDC 전면 장애&lt;/h4&gt;
&lt;p&gt;IDC 이중화가 안돼있다면 치명적인 장애 상황으로 이어짐
지속적인 서비스 제공 목표 달성을 위해 이중화 필요하다.&lt;/p&gt;
&lt;h2 id=&quot;2-kafka-2중화-구성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-kafka-2%EC%A4%91%ED%99%94-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;2 kafka 2중화 구성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. kafka 2중화 구성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;active - active, active - standby 선택에 대한 기준&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Active-Standby 는 장애 상황이 잦지 않기 때문에 평시에 잘 관리하고 있던 것이 아니라면 막상 장애 상황이 발생해도 Stand by 가 제대로 동작하지 않는경우가 많기 때문에 active-active 로 구성했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;고려할 점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kafka 는 stateful 한 시스템이라 active active 이중화 구성이 어렵다&lt;/li&gt;
&lt;li&gt;어떻게 state 일관성을 유지할지 고민해보고 구성해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;이중화 구성은 state 의 일관성을 맞춰줘야 하는군. 어떤 state 들이 있고 어떻게 맞춰줄지를 설계해야겠구만&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;/images/33-21.jpg&quot; style=&quot;width:100%;&quot; /&gt;
&lt;h3 id=&quot;21-구성-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#21-%EA%B5%AC%EC%84%B1-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;21 구성 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.1 구성 방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;각 IDC 에 절반씩 들어온 메시지는 전체 메시지를 가질 수 있도록 kafka connect 를 이용해 상대 쪽 IDC 로 실시간 메시지를 미러링 중&lt;/li&gt;
&lt;li&gt;Offset Sync 라는 데몬은 consumer group offset 을 실시간으로 양쪽 IDC 간 Sync 를 맞춰주고 있다.&lt;/li&gt;
&lt;li&gt;Consumer 가 한쪽 IDC 에만 붙어있다.
&lt;ul&gt;
&lt;li&gt;두군데 다 붙으면 메시지를 두 배 중복해서 소비하는 상황이 발생. 메시지 중복 소비 막기 위해 한쪽 IDC 에서만 소비하도록 구성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/images/33-22.jpg&quot; style=&quot;width:100%;&quot; /&gt;
&lt;h4 id=&quot;211-kafka-connect-를-활용한-메시지-미러링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#211-kafka-connect-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%AF%B8%EB%9F%AC%EB%A7%81&quot; aria-label=&quot;211 kafka connect 를 활용한 메시지 미러링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.1.1 Kafka Connect 를 활용한 메시지 미러링&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;kafka connect 를 이용해 서로의 메시지를 미러링한다.&lt;/li&gt;
&lt;li&gt;양방향 미러링 해주어야 하는 잡이 라이브 중인 토픽 개수만큼 필요하기 때문에 수백개가 되는데, 이런 부분이 이중화 구성 후 운영 부담으로 찾아온다.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/images/33-23.jpg&quot; style=&quot;width:100%;&quot; /&gt;
&lt;h4 id=&quot;212-offset-sync-를-활용한-offset-미러링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#212-offset-sync-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-offset-%EB%AF%B8%EB%9F%AC%EB%A7%81&quot; aria-label=&quot;212 offset sync 를 활용한 offset 미러링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.1.2 Offset Sync 를 활용한 offset 미러링&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소비하던 IDC 에서 다른 IDC 로 이사가야하는 경우 이전에 소비하던 부분부터 유실 없이 소비를 재개하기 위해서 다른 IDC 에도 offset 이 저장되고 있어야 한다.&lt;/li&gt;
&lt;li&gt;offset 은 클러스터마다 번호 체계가 다르므로 중간에 상대 쪽 IDC 에 맞는 번호로 변경해서 저장해야한다. 이 부분이 메시지 미러링과 다른 부분이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/images/33-24.jpg&quot; style=&quot;width:100%;&quot; /&gt;
&lt;h2 id=&quot;3-단점과-해결-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%8B%A8%EC%A0%90%EA%B3%BC-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;3 단점과 해결 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 단점과 해결 방법&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;관리 클러스터 2배 증가&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메시지 미러링과 offset sync 를 하면서 운영 부담이 추가로 발생&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;해결 방법: 운영에 대한 부담을 자동화로 해결하려고 노력했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;카프카 관리 앱(자동화 도구)을 개발해서 수백개의 토픽 이중화 상태를 관리, 새로 생기는 이중화 토픽들을 자동 생성하도록 운영&lt;/li&gt;
&lt;li&gt;모니터링 자동화
&lt;ul&gt;
&lt;li&gt;모든 메트릭 정보를 prometheus 로 숮집, thanos ruler 로 정의한 조건이 충적되면 알림&lt;/li&gt;
&lt;li&gt;클러스터의 모든 로그는 elastic search 로 , elast alert 로 알림&lt;/li&gt;
&lt;li&gt;장애 징후 감지를 위한 시계열 데이터의 이상 징후 탐지하는 머신러닝 모델 개발&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Toss Slash23 (3) - 분산 추적 체계 & 로그 중심으로 Observability 확보하기]]></title><description><![CDATA[분산 추적 체계 & 로그 중심으로 Observability 확보하기 보러가기 시스템의 Observability 의 중요성을 알게됐다. 신용 카드 프로젝트를 하면서 개발자들이 APM…]]></description><link>https://sunrisehouse.github.io/posts/35</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/35</guid><pubDate>Thu, 13 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;분산-추적-체계--로그-중심으로-observability-확보하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B6%84%EC%82%B0-%EC%B6%94%EC%A0%81-%EC%B2%B4%EA%B3%84--%EB%A1%9C%EA%B7%B8-%EC%A4%91%EC%8B%AC%EC%9C%BC%EB%A1%9C-observability-%ED%99%95%EB%B3%B4%ED%95%98%EA%B8%B0&quot; aria-label=&quot;분산 추적 체계  로그 중심으로 observability 확보하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;분산 추적 체계 &amp;#x26; 로그 중심으로 Observability 확보하기&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/Ifz0LsfAG94&quot;&gt;보러가기&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;시스템의 Observability 의 중요성을 알게됐다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;신용 카드 프로젝트를 하면서 개발자들이 APM 솔루션에 많은 관심을 갖고 여러 항목들을 고려했다. 그때 당시에는 역시 운영을 해야하니까 이런게 중요한가보다 정도의 생각만 했었다. 이 영상을 보고나서는 좀 더 그 마음에 공감이 됐던 것 같고 로깅 시스템이 목표가 무엇인지 알 수 있었다. 프로젝트의 개발자들이 제시한 고려사항들은 운영 시 자신들이 받았던 질문들에 이 APM 이 답할 수 있는가 였었다. 로그나 지표들을 통해서 해결해야만하는 질문들에 답할 수 있는 시스템을 구축하는 것이 운영에 얼마나 중요한지 알게됐다. 토스에서 적용했던 방법들을 이번 프로젝트에서도 잘 가다듬어 적용해보고 싶다. 하지만 제대로된 운영을 해본적이 없어서 어떤 질문들이 있는지 노하우가 없어서 잘 할 수 있을지 모르겠다. 설계 단계에서 로그 시스템을 어디까지 설계해야할까도 궁금하다. 운영을 하진 않아서 로그 시스템을 그렇게 중요하게 생각하지 않을수도 있겠다는 생각이 들었다. 로그 시스템에 대한 설계가 궁금하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;재밌었다&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;한 api 에 대한 분산 추적 뿐만 아니라 Global Trace ID 를 추가해 비즈니스 관점에서 연관 있는 api 들에 대해서 추적할 수 있게 한 것도 재밌었다. 클라이언트에서부터 서버까지의 동작들을 추적할 수 있는 시스템을 구축한 것도 재미있다. 이전 스타트업들에서 사용자의 행동을 추적하기 위해서 버튼마다 추적 id 를 심었던 (아주 귀찮았던) 것이 생각난다. 정말 유의미한 데이터를 뽑아낼 수 있을 것 같다는 생각이들고 그 많은 로그들을 어떻게 관리하나 궁금했는데 다음 영상에 또 있다. 좋다!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;로그-시스템이-중요한-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A1%9C%EA%B7%B8-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%B4-%EC%A4%91%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;로그 시스템이 중요한 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;로그 시스템이 중요한 이유&lt;/h2&gt;
&lt;p&gt;기술의 기반 환경이 점점 가상화, 추상화 되고 있다. 이는 문제 발생 시 추적하는 것을 어려워지게 만들었다. 수시로 업데이트 되는 MSA 상의 서비스와 의존 관계, 동적으로 변경되는 인프라, 단일 요청을 처리함에도 여러 개의 예측할 수 없는 네트워크 홉을 지나야 하는 구조, 높은 cardinality 를 가진 지표는 기존의 일반적인 모니터링 기반의 문제 탐색을 어렵게 한다.&lt;/p&gt;
&lt;h2 id=&quot;obsevarbility&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#obsevarbility&quot; aria-label=&quot;obsevarbility permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;obsevarbility&lt;/h2&gt;
&lt;p&gt;전기 공학자 루돌프 칼만 say&lt;/p&gt;
&lt;p&gt;&quot;시스템의 출력으로부터 시스템의 상태를 이해할 수 있는 능력&quot;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;겪어보지 못한 새로운 현상에 대한 가시성(obsaverbility) 을 제공하고 원인에 대한 질문에 답할 수 있는 시스템을 만들어야 한다.&lt;/li&gt;
&lt;li&gt;개발자: 로그나 실시간으로 수집되고 잇는 모니터링 지표와 같은 출력을 통해 시스템의 상태를 이해할 수 있는 능력&lt;/li&gt;
&lt;li&gt;로그를 통해 당시 시스템 상황을 이해하는데 도움이 되어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;분산-추적-확장&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B6%84%EC%82%B0-%EC%B6%94%EC%A0%81-%ED%99%95%EC%9E%A5&quot; aria-label=&quot;분산 추적 확장 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;분산 추적 확장&lt;/h2&gt;
&lt;p&gt;분산 추적 시스템의 표준화&lt;/p&gt;
&lt;p&gt;분산 추적 시스템은 World Widw Web Consortium 이 정의한 Trace Context 규격으로 통일되는 중이다. 토스 페이먼츠는 분산 추적 시스템에 대한 표준에서 좀 더 확장해서 사용한다.&lt;/p&gt;
&lt;h4 id=&quot;1-global-trace-id&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-global-trace-id&quot; aria-label=&quot;1 global trace id permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Global Trace Id&lt;/h4&gt;
&lt;p&gt;비즈니스 관점에서 하나의 요청이 아닌 하나의 사용자 시나리오 전체를 이해해야 하는 상황에서 활용 가능. 하나의 시나리오에 Global Trace Id 부여한다.&lt;/p&gt;
&lt;img src=&quot;/images/33-27.jpg&quot; style=&quot;width:100%&quot; /&gt;
&lt;blockquote&gt;
&lt;p&gt;나중가서는 여러 시나리오 간에 연관성도 추적할 수 있을 것 같은데 그 때 되면 Global Trace ID 말고 또 Trace Id 를 심을 것인가.
확장성 있게 설계하려면 어떻게 해야할까?
각 동작 요소마다의 ID 를 주고 그 ID 를 그룹으로 묶어서 관리한다는 어떨까??&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;2-추적-문맥-전파-항목-추가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%B6%94%EC%A0%81-%EB%AC%B8%EB%A7%A5-%EC%A0%84%ED%8C%8C-%ED%95%AD%EB%AA%A9-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;2 추적 문맥 전파 항목 추가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 추적 문맥 전파 항목 추가&lt;/h4&gt;
&lt;p&gt;API 호출한 client 버전, 호출한 Service 명, 관련 고객사 등 항목을 추가했다.&lt;/p&gt;
&lt;h5 id=&quot;3-추적-범위-확장&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%B6%94%EC%A0%81-%EB%B2%94%EC%9C%84-%ED%99%95%EC%9E%A5&quot; aria-label=&quot;3 추적 범위 확장 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 추적 범위 확장&lt;/h5&gt;
&lt;p&gt;CDN, 방화벽, Load balancer, Istio gateway, istio sidecar, 각 서비스 서버, DB trace id 를 이요해 전 구간의 로그를 확인할 수 있도록 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발 방법
&lt;ul&gt;
&lt;li&gt;DB 의 경우 쿼리의 주석 부분에 추적 문맥 포함&lt;/li&gt;
&lt;li&gt;TCP 서버: 요청 본문을 변경하지 않고 추가 정보를 보낼 수 있는 방법이 없어 어렵다.&lt;/li&gt;
&lt;li&gt;L4 load balancer 에서는 tcp 요청 본문을 변경하지 않고 클라이언트 정보를 보존하여 전달하는 방법있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;4-추적-id-는-client-로부터-발행&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%B6%94%EC%A0%81-id-%EB%8A%94-client-%EB%A1%9C%EB%B6%80%ED%84%B0-%EB%B0%9C%ED%96%89&quot; aria-label=&quot;4 추적 id 는 client 로부터 발행 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 추적 id 는 client 로부터 발행&lt;/h4&gt;
&lt;p&gt;프론트엔드 로직은 서버와 통신을 시작하기 전부터 로직이 실행될 수 있다. 경우에 따라 서버와의 통신 이전에  사용자와의 인터렉션이 발생할 수 있기 때문에 문제가 발생할 당시의 문맥을 이해하기 위해서는 문맥을 이어줄 trace id 가 미리 발급되어 있어야 한다.&lt;/p&gt;
&lt;h2 id=&quot;질문에-답할-수-있는-시스템을-만들어야-한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A7%88%EB%AC%B8%EC%97%90-%EB%8B%B5%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%95%BC-%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;질문에 답할 수 있는 시스템을 만들어야 한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&quot;질문에 답할 수 있는 시스템을 만들어야 한다&quot;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ex 1) 의도하지 않은 동일한 요청이 세번 들어왔다. 사용자가 세번 호출한 건지, 인프라 내부 retry 로직이 세번 호출한 것인지?&lt;/li&gt;
&lt;li&gt;ex 2) api 수정 시 어떤 서비스의 api 들이 영향을 받는지?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;다른-활용법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EB%A5%B8-%ED%99%9C%EC%9A%A9%EB%B2%95&quot; aria-label=&quot;다른 활용법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다른 활용법&lt;/h2&gt;
&lt;p&gt;istio 를 활용해 문맥 전파 중에 특정 문맥을 가진 요청은 특정 서비스로 갈 수 있게 활용할 수 있었다.&lt;/p&gt;
&lt;img src=&quot;/images/33-30.jpg&quot; style=&quot;width:100%&quot; /&gt;</content:encoded></item><item><title><![CDATA[Toss Slash23 (2) - 코어 뱅킹 MSA 전환]]></title><description><![CDATA[1. 코어 뱅킹 MSA 전환 (feat. 지금 이자받기) 보러가기 Toss Slash 에서 가장 눈에 먼저 보인 영상이다. 이번에 카드 시스템을 MSA 로 개발하는데 toss…]]></description><link>https://sunrisehouse.github.io/posts/34</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/34</guid><pubDate>Wed, 12 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;1-코어-뱅킹-msa-전환-feat-지금-이자받기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%BD%94%EC%96%B4-%EB%B1%85%ED%82%B9-msa-%EC%A0%84%ED%99%98-feat-%EC%A7%80%EA%B8%88-%EC%9D%B4%EC%9E%90%EB%B0%9B%EA%B8%B0&quot; aria-label=&quot;1 코어 뱅킹 msa 전환 feat 지금 이자받기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 코어 뱅킹 MSA 전환 (feat. 지금 이자받기)&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/amTJyIE1wO0&quot;&gt;보러가기&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Toss Slash 에서 가장 눈에 먼저 보인 영상이다. 이번에 카드 시스템을 MSA 로 개발하는데 toss 는 어떻게 했나 궁금했다. 같은 금융 시스템이다 보니 비슷한 아키텍처도 많았고 다른 점도 있는 것 같다. 비동기 처리나 동시성 제어 관련해서 고민이 많은데 좀 더 자세한 설명을 듣고싶지만 그럴 수 없어 아쉽다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;11-msa-전환-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#11-msa-%EC%A0%84%ED%99%98-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;11 msa 전환 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.1 MSA 전환 이유&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;모바일 위주로 대량의 트래픽을 안정적으로 서비스해야하는 구조에는 monolithic architecture 는 한계가 있다.&lt;/li&gt;
&lt;li&gt;현재의 차세대 코어뱅킹 아키텍처를 모바일과 대량 트래픽에 특화된 마이크로 서비스 아키텍처로 바꿔봐야겠다.&lt;/li&gt;
&lt;li&gt;트래픽이 높은 서비스가 피크타임에도 유연하게 스케일 아웃할 수 있게하기 위해서.&lt;/li&gt;
&lt;li&gt;이자 받기의 장애가 전체 서비스의 장애로 이어지는 것을 막을 수 있는 독립적인 마이크로서비스로 전환&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;12-개발-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#12-%EA%B0%9C%EB%B0%9C-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;12 개발 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.2 개발 방법&lt;/h2&gt;
&lt;h3 id=&quot;121-기술-스택&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#121-%EA%B8%B0%EC%88%A0-%EC%8A%A4%ED%83%9D&quot; aria-label=&quot;121 기술 스택 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.2.1 기술 스택&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;토스뱅크 채널 서버에서 사용하고 있는 기술들&lt;/li&gt;
&lt;li&gt;kubernetes&lt;/li&gt;
&lt;li&gt;Spring boot, Kotlin, JPA&lt;/li&gt;
&lt;li&gt;비동기 메시지 처리와 캐싱: Kafka, Redis&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;122-동시성-제어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#122-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%A0%9C%EC%96%B4&quot; aria-label=&quot;122 동시성 제어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.2.2 동시성 제어&lt;/h3&gt;
&lt;p&gt;Redis Global Lock 뿐만 아니라 JPA 의 @Lock 어노테이션을 통해 해결했다.&lt;/p&gt;
&lt;img src=&quot;/images/33-4.jpg&quot; style=&quot;width:100%&quot; /&gt;
&lt;h3 id=&quot;123-성능-개선을-위한-비동기-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#123-%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0%EC%9D%84-%EC%9C%84%ED%95%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;123 성능 개선을 위한 비동기 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.2.3 성능 개선을 위한 비동기 처리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;비동기 처리 = 트랜잭션 분리&lt;/li&gt;
&lt;li&gt;트랜잭션 분리 기준
&lt;ul&gt;
&lt;li&gt;통장 데이터가 실시간으로 문제가 발생하는가?&lt;/li&gt;
&lt;li&gt;반드시 트랜잭션이 보장되어야 하는 데이터 모델과 즉시성을 요하지 않는 데이터 모델의 DML 은 트랜잭션을 분리했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kafka 구성
&lt;ul&gt;
&lt;li&gt;kafka 메시지가 정상적으로 처리되지 않는 경우를 대비해 dead letter queue 를 이용해서 consume 하는 트랜잭션을 안정적으로 보장할 수 있도록 했다.&lt;/li&gt;
&lt;li&gt;재처리 시 중복으로 세금이 업데이트 안되도록 API 의 멱등성도 확보했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;성과
&lt;ul&gt;
&lt;li&gt;ASIS 트랜잭션: 80 회의 DML&lt;/li&gt;
&lt;li&gt;TOBE 트랜잭션: 50 회의 DML + 다른 30 회의 DML&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/images/33-2.jpg&quot; style=&quot;width:100%&quot; /&gt;
&lt;img src=&quot;/images/33-3.jpg&quot; style=&quot;width:100%&quot; /&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이번에 진행하는 프로젝트에서는 성능 개선만이 목표가 아니라 서비스의 안정성을 위해서, 다른 서비스와의 의존성을 줄이기 위해서 사용하는게 더 크다고 느껴졌다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비동기 처리도 좋지만 그에 대한 보상 처리, 트랜잭션 롤백 처리 방안을 어떻게 구성했나 또한 궁금하다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;124-redis-를-활용한-캐싱&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#124-redis-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%BA%90%EC%8B%B1&quot; aria-label=&quot;124 redis 를 활용한 캐싱 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.2.4 redis 를 활용한 캐싱&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;하루에 한 번 갱신되는 데이터&lt;/li&gt;
&lt;li&gt;매일 자정 이후 처음 접근 할 때 한번 가져와 redis 에 저장, 이후에는 redis 에서 가져다 쓴다.&lt;/li&gt;
&lt;li&gt;캐시에도 만료 기간을 설정해 놓는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/images/33-11.jpg&quot; style=&quot;width:100%&quot; /&gt;
&lt;h2 id=&quot;13-성과&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#13-%EC%84%B1%EA%B3%BC&quot; aria-label=&quot;13 성과 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.3 성과&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MCI 를 통하지 않고 자체적으로 요청을 받고 응답을 주기 떄문에 코어 뱅킹 서버와 서로 영향을 주지 않는 독립적인 서버 -&gt; 서비스 간의 영향도 최소화&lt;/li&gt;
&lt;li&gt;다른 서비스 호출을 통해 더 유연하고, 더 확장성 있는 상품 개발이 가능해짐&lt;/li&gt;
&lt;li&gt;새로운 코어 뱅킹 거래를 이식하는 데에 있어 확장성이 좋아짐
&lt;ul&gt;
&lt;li&gt;일반적인 조회 거래, 출금/입금을 조합한 송금 모듈을 이용해서 이체 및 각종 원장 거래들을 붙이기가 용이해졌다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;레거시 코드 청산&lt;/li&gt;
&lt;li&gt;성능 개선
&lt;ul&gt;
&lt;li&gt;레거시 코드의 비효율적으로 여러 번 발생하던 DB/IO 줄임&lt;/li&gt;
&lt;li&gt;공통적으로 처리되던 코어 뱅킹 시스템의 선후처리를 거둠&lt;/li&gt;
&lt;li&gt;mci 평균 소요시간 250ms -&gt; 마이크로서버 api 평균 소요 시간7ms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;오픈 소스 기반 개발 시스템 변화로 신기술 적용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;14-배포&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#14-%EB%B0%B0%ED%8F%AC&quot; aria-label=&quot;14 배포 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.4 배포&lt;/h2&gt;
&lt;p&gt;어떻게 안정적으로 배포했나&lt;/p&gt;
&lt;h3 id=&quot;141-정합성-검증-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#141-%EC%A0%95%ED%95%A9%EC%84%B1-%EA%B2%80%EC%A6%9D-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;141 정합성 검증 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.4.1 정합성 검증 방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;온라인 거래 시 기존 코어 뱅킹과 마이크로 서버 둘 다로 이자 조회 api 를 호출하도록 했고 값을 비교해서 불일치 할 시 모니터링 채널에 알림이 가도록했다.&lt;/li&gt;
&lt;li&gt;배치도 마찬가지&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/images/33-12.jpg&quot; style=&quot;width:100%&quot; /&gt;
&lt;h3 id=&quot;142-순차-배포&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#142-%EC%88%9C%EC%B0%A8-%EB%B0%B0%ED%8F%AC&quot; aria-label=&quot;142 순차 배포 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.4.2 순차 배포&lt;/h3&gt;
&lt;p&gt;팀내 -&gt; 토스내 -&gt; 일부 고객 대상 -&gt; 전체 고객 대상&lt;/p&gt;
&lt;img src=&quot;/images/33-15.jpg&quot; style=&quot;width:100%&quot; /&gt;
&lt;h3 id=&quot;143-테스트-시나리오-작성-및-e2e-통합-테스트-수행&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#143-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4-%EC%9E%91%EC%84%B1-%EB%B0%8F-e2e-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%88%98%ED%96%89&quot; aria-label=&quot;143 테스트 시나리오 작성 및 e2e 통합 테스트 수행 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.4.3 테스트 시나리오 작성 및 E2E 통합 테스트 수행&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;잔액 구간 분리, 고객 상태, 계좌 상태, 출금/입금 정지 상태 의 4가지 케이스를 중심으로 테스트 케이스를 수립&lt;/li&gt;
&lt;li&gt;각각 테스트 데이터를 만들어서 통합 테스트를 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/images/33-16.jpg&quot; style=&quot;width:100%&quot; /&gt;
&lt;blockquote&gt;
&lt;p&gt;테스트 케이스를 나눈 기준이 궁금하다.&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Toss Slash23 (1)]]></title><description><![CDATA[Toss Slash23 현재 신용 카드 프로젝트를 진행중이다.
그런면서에서 아주 재미있는 토픽들이 많았다.
내가 보았던 토픽들에 대해서 정리해보는 시간을 가져보았다. (1) 코어 뱅킹 MSA 전환 (…]]></description><link>https://sunrisehouse.github.io/posts/33</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/33</guid><pubDate>Tue, 11 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;toss-slash23&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#toss-slash23&quot; aria-label=&quot;toss slash23 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Toss Slash23&lt;/h1&gt;
&lt;p&gt;현재 신용 카드 프로젝트를 진행중이다.
그런면서에서 아주 재미있는 토픽들이 많았다.
내가 보았던 토픽들에 대해서 정리해보는 시간을 가져보았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) &lt;a href=&quot;/posts/34&quot;&gt;코어 뱅킹 MSA 전환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(2) &lt;a href=&quot;/posts/35&quot;&gt;분산 추적 체계 &amp;#x26; 로그 중심으로 Observability 확보하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(3) &lt;a href=&quot;/posts/36&quot;&gt;Kafka 이중화로 다양한 장애 상황 완벽 대처하기!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[resilience4j-circuitbreaker]]></title><description><![CDATA[resilience4j-circuitbreaker 글은 탑다운 형식으로 어떻게 사용하는지 부터해서 logical 하게 어떻게 구성되어 있는지, 실제로는 어떻게 구현되어 있는지 작성하려고 했는데 쉽지 않은 것 같다. Resilience4j 는 Java…]]></description><link>https://sunrisehouse.github.io/posts/32</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/32</guid><pubDate>Mon, 10 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;resilience4j-circuitbreaker&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#resilience4j-circuitbreaker&quot; aria-label=&quot;resilience4j circuitbreaker permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;resilience4j-circuitbreaker&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;글은 탑다운 형식으로 어떻게 사용하는지 부터해서 logical 하게 어떻게 구성되어 있는지, 실제로는 어떻게 구현되어 있는지 작성하려고 했는데 쉽지 않은 것 같다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Resilience4j 는 Java 기반의 failure tolerance library 이다.
version2 는 Java 17 기반으로 작성됐다.
resilience4j-circuitbreaker 는 resilience4j 의 circuit breaker 모듈이다.
circuit breeaker 패턴을 구현해 놓았다.&lt;/p&gt;
&lt;h2 id=&quot;1-구성요소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C&quot; aria-label=&quot;1 구성요소 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 구성요소&lt;/h2&gt;
&lt;p&gt;크게 CircuitBreakerConfig, CircuitBreaker, CircuitBreakerRegistry 로 구성되어 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CircuitBreakerConfig
&lt;ul&gt;
&lt;li&gt;CircuitBreaker 에 대한 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CircuitBreaker
&lt;ul&gt;
&lt;li&gt;CircuitBreaker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CircuitBreakerRegistry
&lt;ul&gt;
&lt;li&gt;CircuitBreaker 인스턴스들을 저장한다.&lt;/li&gt;
&lt;li&gt;ConccurentMap 을 통해 thread safety, atomicity guarantees 를 보장한다.&lt;/li&gt;
&lt;li&gt;ConcurrentMap&amp;#x3C;String, CircuitBreaker&gt; -&gt; CircutBreaker 이름을 키값으로 인스턴스들을 저장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-사용-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;2 사용 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 사용 방법&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Create a custom configuration for a CircuitBreaker&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;CircuitBreakerConfig&lt;/span&gt; circuitBreakerConfig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CircuitBreakerConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;failureRateThreshold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slowCallRateThreshold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitDurationInOpenState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ofMillis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slowCallDurationThreshold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ofSeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;permittedNumberOfCallsInHalfOpenState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;minimumNumberOfCalls&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slidingWindowType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SlidingWindowType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TIME_BASED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slidingWindowSize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;recordException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;INTERNAL_SERVER_ERROR&lt;/span&gt;
                 &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;recordExceptions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TimeoutException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ignoreExceptions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BusinessException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OtherBusinessException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Create a CircuitBreakerRegistry with a custom global configuration&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;CircuitBreakerRegistry&lt;/span&gt; circuitBreakerRegistry &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;token class-name&quot;&gt;CircuitBreakerRegistry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;circuitBreakerConfig&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Get or create a CircuitBreaker from the CircuitBreakerRegistry &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// with the global default configuration&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;CircuitBreaker&lt;/span&gt; circuitBreakerWithDefaultConfig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  circuitBreakerRegistry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;circuitBreaker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Given&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;CircuitBreaker&lt;/span&gt; circuitBreaker &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CircuitBreaker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ofDefaults&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;testName&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// When I decorate my function&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;CheckedFunction0&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; decoratedSupplier &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CircuitBreaker&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;decorateCheckedSupplier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;circuitBreaker&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;This can be any method which returns: &apos;Hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;3-동작&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%8F%99%EC%9E%91&quot; aria-label=&quot;3 동작 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 동작&lt;/h2&gt;
&lt;h3 id=&quot;31-closed-state&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#31-closed-state&quot; aria-label=&quot;31 closed state permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.1 closed state&lt;/h3&gt;
&lt;h4 id=&quot;311-요청에-대한-결과-저장&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#311-%EC%9A%94%EC%B2%AD%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B2%B0%EA%B3%BC-%EC%A0%80%EC%9E%A5&quot; aria-label=&quot;311 요청에 대한 결과 저장 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.1.1 요청에 대한 결과 저장&lt;/h4&gt;
&lt;p&gt;size N 인 circular array 에 요청을 저장한다.&lt;/p&gt;
&lt;p&gt;요청에 대한 결과를 저장하는 방식에는 count based sliding window 방식과 time based sliding window 방식이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;count based sliding window
&lt;ul&gt;
&lt;li&gt;최근 N 개의 요청 결과를 저장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;time based sliding window
&lt;ul&gt;
&lt;li&gt;최근 N 초 동안의 요청 결과를 저장한다.&lt;/li&gt;
&lt;li&gt;1초 동안 발생한 요청에 대한 결과를 하나의 bucket (circular array 의 한 요소) 에 점진적으로 증가시키며 저장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;312-결과를-토대로-threshold-와-비교&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#312-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%ED%86%A0%EB%8C%80%EB%A1%9C-threshold-%EC%99%80-%EB%B9%84%EA%B5%90&quot; aria-label=&quot;312 결과를 토대로 threshold 와 비교 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.1.2 결과를 토대로 Threshold 와 비교&lt;/h4&gt;
&lt;p&gt;저장한 요청이 최소 개수 이상이 되면 failure rate 와 slow call rate 가 계산된다.
계산된 rate 가 threshold 이상이 되면 Open 상태로 바뀐다.&lt;/p&gt;
&lt;h5 id=&quot;3121-failure-rate&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3121-failure-rate&quot; aria-label=&quot;3121 failure rate permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.1.2.1 failure rate&lt;/h5&gt;
&lt;p&gt;요청의 X 퍼센트가 실패했는지 threshold 로 지정한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 exception 들은 failure 횟수에 포함된다.&lt;/li&gt;
&lt;li&gt;failure 로 포함시킬 exception 들을 list 로 지정할 수 있다. (나머지는 success)&lt;/li&gt;
&lt;li&gt;success 나 failure 로 포함시키지 않도록 할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3122-success-call-rate&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3122-success-call-rate&quot; aria-label=&quot;3122 success call rate permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.1.2.2 success call rate&lt;/h4&gt;
&lt;p&gt;요청의 X 퍼센트가 S 초 이상 경과 후 응답을 받았는지 threshold 로 지정한다.&lt;/p&gt;
&lt;h3 id=&quot;32-open-state&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#32-open-state&quot; aria-label=&quot;32 open state permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.2 open state&lt;/h3&gt;
&lt;p&gt;요청을 받으면 CallNotPermittedException 을 던지며 요청을 reject 한다.
S 초 뒤에 half open 상태로 전환한다.&lt;/p&gt;
&lt;h3 id=&quot;33-half-open-state&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#33-half-open-state&quot; aria-label=&quot;33 half open state permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.3 half open state&lt;/h3&gt;
&lt;p&gt;X 개의 요청을 허용한다.
모든 요청이 성공하면 closed 상태로 바뀐다.
failure rate 나 slow call rate 가 threshold 이상이면 다시 open state 로 바뀐다. (혹은 max 타임이 지나며면&lt;/p&gt;
&lt;h3 id=&quot;34-disabled-state-forced-open-state&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#34-disabled-state-forced-open-state&quot; aria-label=&quot;34 disabled state forced open state permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.4 disabled state, forced open state&lt;/h3&gt;
&lt;p&gt;CircuitBreaker 는 두가지 state 를 더 지원한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;disabled state: always allow access&lt;/li&gt;
&lt;li&gt;forced open: always deny access&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 상태들은 상태 변화를 직접 트리거 하던가 CircuitBreaker 를 리셋해야지 다른 상태로 전환된다.&lt;/p&gt;
&lt;h2 id=&quot;4-thred-safe&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-thred-safe&quot; aria-label=&quot;4 thred safe permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Thred Safe&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;state 가 atomic reference 로 저장된다.&lt;/li&gt;
&lt;li&gt;상태 전환에 atomic operation 이 사용된다.&lt;/li&gt;
&lt;li&gt;call 들을 sliding window 에 기록하는 것과 sliding window 의 snapshopt 을 읽어들이는 것이 동기화 되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-source&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-source&quot; aria-label=&quot;5 source permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Source&lt;/h2&gt;
&lt;p&gt;resilience4j 의 release v2.1.0 을 기준으로 파악해보았다.&lt;/p&gt;
&lt;h3 id=&quot;51-uml&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#51-uml&quot; aria-label=&quot;51 uml permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.1 UML&lt;/h3&gt;
&lt;h4 id=&quot;511-circuitbreaker&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#511-circuitbreaker&quot; aria-label=&quot;511 circuitbreaker permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.1.1 CircuitBreaker&lt;/h4&gt;
&lt;img src=&quot;/images/32-1.png&quot; style=&quot;width: 100%&quot; /&gt;
&lt;h4 id=&quot;512-circuitbreakerconfig&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#512-circuitbreakerconfig&quot; aria-label=&quot;512 circuitbreakerconfig permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.1.2 CircuitBreakerConfig&lt;/h4&gt;
&lt;img src=&quot;/images/32-1.png&quot; style=&quot;width: 100%&quot; /&gt;
&lt;h4 id=&quot;513-circuitbreakerregistry&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#513-circuitbreakerregistry&quot; aria-label=&quot;513 circuitbreakerregistry permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.1.3 CircuitBreakerRegistry&lt;/h4&gt;
&lt;img src=&quot;/images/32-1.png&quot; style=&quot;width: 100%&quot; /&gt;</content:encoded></item><item><title><![CDATA[Circuit Breaker Pattern]]></title><description><![CDATA[Circuit Breaker Pattern 클라우드 디자인 패턴 중 하나인 Circuit Breaker 패턴에 대해서 알아보자 Circuit Breaker…]]></description><link>https://sunrisehouse.github.io/posts/31</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/31</guid><pubDate>Sun, 09 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;circuit-breaker-pattern&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#circuit-breaker-pattern&quot; aria-label=&quot;circuit breaker pattern permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Circuit Breaker Pattern&lt;/h1&gt;
&lt;p&gt;클라우드 디자인 패턴 중 하나인 Circuit Breaker 패턴에 대해서 알아보자&lt;/p&gt;
&lt;h2 id=&quot;circuit-breaker&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#circuit-breaker&quot; aria-label=&quot;circuit breaker permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Circuit Breaker&lt;/h2&gt;
&lt;p&gt;회로 차단기는 전기 회로에서 과부하가 걸리거나 단락으로 인한 피해를 막기 위해 자동으로 회로를 정지시키는 장치이다. 과부하 차단기(배선 차단기)와 누전 차단기로 나뉜다. 퓨즈와 다른 점은, 차단기는 어느 정도 시간이 지난 뒤에는, 원래의 기능이 동작하도록 복귀된다.
(Wikipedia)&lt;/p&gt;
&lt;h2 id=&quot;context-and-problem&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#context-and-problem&quot; aria-label=&quot;context and problem permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Context and Problem&lt;/h2&gt;
&lt;p&gt;시스템의 작은 부분에서의 문제는 전체 시스템의 문제로 이어질 수 있다.&lt;/p&gt;
&lt;p&gt;분산 환경에서 네트워크 상태에 따라 일시적인 장애가 발생해 리소스나 서비스에 대한 호출이 실패할 수 있다.
일시적으로 짧은 시간이 지나면 자동으로 해결되는 문제는 Retry 패턴과 같은 전략을 사용해 해결할 수 있다.
하지만 해결하는 데 오래 걸리는 문제는 전체 시스템의 문제로 이루어질 수 있다.
실패할 가능성이 높은 작업을 재시도 하는 것은 무의미 할 수 있고, 대신 작업이 실패했음을 신속하게 받아들이고 그에 따라 이 실패를 처리해야 한다.&lt;/p&gt;
&lt;h2 id=&quot;solution&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#solution&quot; aria-label=&quot;solution permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Solution&lt;/h2&gt;
&lt;p&gt;회로 차단기는 실패할 수 있는 작업의 프록시 역할을 한다.
프록시는 최근 발생한 실패 횟수를 모니터링하고 이 정보를 사용하여 작업을 계속 진행하도록 허용할지 아니면 단순히 예외를 즉시 반환할지 결정한다.
프록시는 전기 회로 차단기의 기능을 모방한 Closed, Open, Half-Open 같은 상태로 이루어진 state machine 으로 구현한다.&lt;/p&gt;
&lt;h3 id=&quot;state&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#state&quot; aria-label=&quot;state permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;State&lt;/h3&gt;
&lt;h4 id=&quot;1-closed&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-closed&quot; aria-label=&quot;1 closed permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Closed&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;정상 작동하는 상태이다.&lt;/li&gt;
&lt;li&gt;logic
&lt;ul&gt;
&lt;li&gt;요청에 대한최근 실패 횟수를 측정하고 있는다.&lt;/li&gt;
&lt;li&gt;실패 횟수가 threshold 를 초과하면 Open 상태로 전환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-open&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-open&quot; aria-label=&quot;2 open permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Open&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;어플리케이션의 요청이 즉시 실패하고 예외가 반환된다.&lt;/li&gt;
&lt;li&gt;logic
&lt;ul&gt;
&lt;li&gt;타이머를 시작하고 끝나면 Half-Open 상태로 전환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-half-open&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-half-open&quot; aria-label=&quot;3 half open permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Half-Open&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;제한된 수의 요청이 들어온다.&lt;/li&gt;
&lt;li&gt;logic
&lt;ul&gt;
&lt;li&gt;요청에 대한 성공 횟수를 측정한다.&lt;/li&gt;
&lt;li&gt;성공 횟수가 threshold 를 초과하면 Closed 상태로 전환한다.&lt;/li&gt;
&lt;li&gt;성공 횟수가 threshold 이하이면 Open 상태로 전환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;설계-point&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%A4%EA%B3%84-point&quot; aria-label=&quot;설계 point permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;설계 point&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Circuit Breaker 위치 및 범위&lt;/li&gt;
&lt;li&gt;closed 상태에서 실패에 대한 threshold&lt;/li&gt;
&lt;li&gt;open 상태에서 들어온 요청을 어떻게 처리할 것인지 (fallback)&lt;/li&gt;
&lt;li&gt;open 상태에서 half-open 상태로 변하는 조건 (복구 시작 조건)&lt;/li&gt;
&lt;li&gt;half-open 상태에서 closed 나 open 상태로 전환되는 조건&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;issues-and-considerations&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#issues-and-considerations&quot; aria-label=&quot;issues and considerations permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Issues and Considerations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Exception Handling. An application invoking an operation through a circuit breaker must be prepared to handle the exceptions raised if the operation is unavailable. The way exceptions are handled will be application specific. For example, an application could temporarily degrade its functionality, invoke an alternative operation to try to perform the same task or obtain the same data, or report the exception to the user and ask them to try again later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Types of Exceptions. A request might fail for many reasons, some of which might indicate a more severe type of failure than others. For example, a request might fail because a remote service has crashed and will take several minutes to recover, or because of a timeout due to the service being temporarily overloaded. A circuit breaker might be able to examine the types of exceptions that occur and adjust its strategy depending on the nature of these exceptions. For example, it might require a larger number of timeout exceptions to trip the circuit breaker to the Open state compared to the number of failures due to the service being completely unavailable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logging. A circuit breaker should log all failed requests (and possibly successful requests) to enable an administrator to monitor the health of the operation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recoverability. You should configure the circuit breaker to match the likely recovery pattern of the operation it&apos;s protecting. For example, if the circuit breaker remains in the Open state for a long period, it could raise exceptions even if the reason for the failure has been resolved. Similarly, a circuit breaker could fluctuate and reduce the response times of applications if it switches from the Open state to the Half-Open state too quickly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Testing Failed Operations. In the Open state, rather than using a timer to determine when to switch to the Half-Open state, a circuit breaker can instead periodically ping the remote service or resource to determine whether it&apos;s become available again. This ping could take the form of an attempt to invoke an operation that had previously failed, or it could use a special operation provided by the remote service specifically for testing the health of the service, as described by the Health Endpoint Monitoring pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Manual Override. In a system where the recovery time for a failing operation is extremely variable, it&apos;s beneficial to provide a manual reset option that enables an administrator to close a circuit breaker (and reset the failure counter). Similarly, an administrator could force a circuit breaker into the Open state (and restart the timeout timer) if the operation protected by the circuit breaker is temporarily unavailable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concurrency. The same circuit breaker could be accessed by a large number of concurrent instances of an application. The implementation shouldn&apos;t block concurrent requests or add excessive overhead to each call to an operation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resource Differentiation. Be careful when using a single circuit breaker for one type of resource if there might be multiple underlying independent providers. For example, in a data store that contains multiple shards, one shard might be fully accessible while another is experiencing a temporary issue. If the error responses in these scenarios are merged, an application might try to access some shards even when failure is highly likely, while access to other shards might be blocked even though it&apos;s likely to succeed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accelerated Circuit Breaking. Sometimes a failure response can contain enough information for the circuit breaker to trip immediately and stay tripped for a minimum amount of time. For example, the error response from a shared resource that&apos;s overloaded could indicate that an immediate retry isn&apos;t recommended and that the application should instead try again in a few minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note) A service can return HTTP 429 (Too Many Requests) if it is throttling the client, or HTTP 503 (Service Unavailable) if the service is not currently available. The response can include additional information, such as the anticipated duration of the delay.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replaying Failed Requests. In the Open state, rather than simply failing quickly, a circuit breaker could also record the details of each request to a journal and arrange for these requests to be replayed when the remote resource or service becomes available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inappropriate Timeouts on External Services. A circuit breaker might not be able to fully protect applications from operations that fail in external services that are configured with a lengthy timeout period. If the timeout is too long, a thread running a circuit breaker might be blocked for an extended period before the circuit breaker indicates that the operation has failed. In this time, many other application instances might also try to invoke the service through the circuit breaker and tie up a significant number of threads before they all fail.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[한참 지나서야 하는 2022년 복기]]></title><description><![CDATA[2022년 복기 하반기 다섯 회사에서의 최종 면접 탈락의 여파로 2022년을 복기할 엄두가 안났다. 하지만 이 정도 지났으면 뭐 괜찮다. 202…]]></description><link>https://sunrisehouse.github.io/posts/30</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/30</guid><pubDate>Thu, 26 Jan 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;2022년-복기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2022%EB%85%84-%EB%B3%B5%EA%B8%B0&quot; aria-label=&quot;2022년 복기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2022년 복기&lt;/h1&gt;
&lt;p&gt;하반기 다섯 회사에서의 최종 면접 탈락의 여파로 2022년을 복기할 엄두가 안났다. 하지만 이 정도 지났으면 뭐 괜찮다. 2022년도도 사실은 매우 행복한 한 해 였다고 생각한다. 어떤 일이 있었나 아직 자세하게 떠올려보진 않았지만 순간 지나가는 기억들만으로도 마음이 따뜻해진다. 우선 전체적으로 어떤 일들이 있었나 날짜 별로 돌아봐야 할 것 같다. 지난 사진과 동영상들을 돌아보는 것은 나이가 들어서 그런가 가슴 아리다. 곧 들어올 후회들이 금방 날라갔으면 좋겠다.&lt;/p&gt;
&lt;h2 id=&quot;안녕&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%88%EB%85%95&quot; aria-label=&quot;안녕 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;안녕?&lt;/h2&gt;
&lt;h3 id=&quot;취준&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B7%A8%EC%A4%80&quot; aria-label=&quot;취준 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;취준&lt;/h3&gt;
&lt;p&gt;우선 상반기에 해외 인턴을 준비했지만 실패했고 스타트업과 대기업 인턴 사이에서 고민을 했던 것 같다. 연봉은 2000 정도 차이가 났다. 하지만 대기업에서 스타트업 가기는 쉽지만 그 반대는 어렵다는 의견에 동의하고 나는 남의 시선도 신경 쓰기에 대기업을 선택했다. 그렇게 대기업 인턴을 하게 됐고 그 경험은 얻은 건 없지만 새로운 사람을 만났다는 재미는 있었다.&lt;/p&gt;
&lt;p&gt;하반기에는 이제 본격적으로 취준 과정에 들어갔던 것 같다. 초반에 라인 서류 지원 날짜를 놓친 뒤로 호석이한테 취준 톡방 정보를 받아서 들어가서 챙겼다. 모집 공고가 뜨면 서류를 작성하고 코테 준비를 하고의 반복이었다. 서류나 코테에서는 그렇게 막히는 부분은 없었다. 하면 할수록 자신감이 붙었던 것 같다. 그래서 지원한데 어디든 가지 않을까 하는 생각을 했다.&lt;/p&gt;
&lt;p&gt;직무 면접 준비는 살짝 벅찼던 것 같다. 전공 지식은 이전에 공부를 열심히 해놓았던 터라 한번 정리만 해놓고 면접에서 자주 나오는 부분 정도만 챙기면 말하는데 문제는 없었다. (물론 공부를 열심히 안했던 알고리즘, 자료구조는 좀 더 신경썼다.) 문제는 내가 진행했던 프로젝트들에 있었다. 너무 많고 다양한 프로젝트를 진행했었기에 그 안에 들어있던 지식들을 다시 한번 깊게 공부하기에는 시간이 문제가 있었다. 프로젝트도 깊게 공부했던 프로젝트가 있는가 하면 그저 간단하게 작동 방법만 알고 사용한 프로젝트도 있었다. Web, Andorid, IOS, Graphics, AI, Server 등의 다양한 어플리케이션 개발 경험에 대해서 깊이감을 보여줄 정도로 알고있어야 했기에 다양한 프로젝트를 적은 것에 후회를 했던 것도 같다. 내 강점이 다양한 경험을 해보았다긴 하지만 자칫 하다가 약한 부분에 대한 질문이 들어왔을 때 깊이감 없이 그냥 했구나 하는 인식을 남길 것이라고 생각해 열심히 공부했어야 했다. 하지만 하면 되는 부분이라 열심히 했고 만족할 정도로 정리가 됐던 것 같다.&lt;/p&gt;
&lt;p&gt;인성 면접 준비는 나를 돌아보는 시간이었다. 내 인생을 정리했고 나는 왜 이렇게 살아왔나 생각해볼 수 있었던 시간이었다. 나는 내가 어디가서나 이쁨받고 잘 어울리는 성격이라 생각하고, 이제까지 해왔던 것들을 보자면 뭐든지 잘할 수 있는 사람일 거라고 면접관이 금방 판단할거라 생각하고 걱정하지 않았다. 그래서 인생 정리, 주요 질문거리에 대한 답변을 정리하고, 자기 소개를 준비하고는 걱정이 많지 않았다.&lt;/p&gt;
&lt;p&gt;하지만 이 최종 인성 면접에서 다섯번 정도 떨어졌다. 기억에 남는 면접은 삼성 리서치와 카카오다. 삼성 리서치는 인성 면접 준비가 좀 부족했다고 생각한다. 충분히 나올만한 질문이었는데 준비를 못했다고 생각한다. 그 후 그런 부분을 대비하고 본 카카오는 안해도 될 말을 해버렸다. 카카오 면접 때는 좀 신나서 너무 솔직하게 뇌를 안거치고 말을 해버리지 않았나 생각한다.&lt;/p&gt;
&lt;p&gt;현차는 이전 내 경력과 프로젝트에 대한 증빙 서류를 내는 데 골치 아팠다. 이전에 일한 것에 대한 증빙 서류가 어딨는지 모르겠다. 자신이 일한 것에 대해서 어떻게 회사 밖으로 가져올 수 있지? 증거를 남기면서 일을 하나? 하는 생각을 했다. 최종 면접 직전에 카카오 최종 발표를 보고 들어갔던 것도 생각난다. 면접에 큰 영향이 있지는 않았다.&lt;/p&gt;
&lt;p&gt;취준을 해보았다. 그렇게 힘든 과정은 아니었다. 여유를 가지면서 준비했다. 좀만 더 열심히, 잘 준비했다면 어땠을까 하는 생각도 해보지만 별 차이가 있을 것 같지는 않다. 붙어본 적이 없어서 모르겠다. 하나 떨어졌을 때는 떨어졌는가보다 했는데 최종에서 계속 탈락하니까 멘탈이 나가는게 느껴지는 것 같기도 하다. 경빈이랑 술마시면서 멘탈 나가본 적이 없다고 으스댔는데 다음 날 최탈하고 나가버려서 좀 웃겼다. 이제는 웃을 수 있지만 당시에는 좀 우울했다. 내 인생에서는 기억도 안나는 스쳐가는 잠깐일 것 같다. 준비에 실패했지만 재수는 없다. 다음 단계에서 열심히 한다면 잘될 수 있다고 생각하고 걸음을 옮긴다.&lt;/p&gt;
&lt;h3 id=&quot;투-룸&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%88%AC-%EB%A3%B8&quot; aria-label=&quot;투 룸 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;투 룸&lt;/h3&gt;
&lt;h4 id=&quot;민호와-투-룸에서-지내게-됐다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AF%BC%ED%98%B8%EC%99%80-%ED%88%AC-%EB%A3%B8%EC%97%90%EC%84%9C-%EC%A7%80%EB%82%B4%EA%B2%8C-%EB%90%90%EB%8B%A4&quot; aria-label=&quot;민호와 투 룸에서 지내게 됐다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;민호와 투 룸에서 지내게 됐다.&lt;/h4&gt;
&lt;p&gt;방 두 개와 거실 하나가 있었다.
큰 방과 작은 방이 있었는데 사다리를 타기도 했지만, 민호의 흔쾌한 양보로 내가 큰 방에서 지내게 됐다.
이전 자취방들은 작은 원룸이었는데 이젠 방하나가 이전 내 원룸만 했다.
거실엔 쇼파와 티비가 있었고 부엌이 있었다.
거실 창문은 컸고 밖에 뷰는 좋지는 않았지만 놀이터가 보이고 뻥 뚫려있었다.
민호는 흉한 노란 벽지를 희게 칠했고 여러 가구들을 들여놨다.&lt;/p&gt;
&lt;h4 id=&quot;요리를-시작했다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%94%EB%A6%AC%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%96%88%EB%8B%A4&quot; aria-label=&quot;요리를 시작했다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;요리를 시작했다.&lt;/h4&gt;
&lt;p&gt;민호가 요리를 종종 해주었다.
너무 맛있게 먹었고 그걸 보며 요리를 해보고 싶다는 생각을 했다.
유튜브에서 조리법을 보고 근처 마트에서 장을 봐서 요리를 했다.
부엌이 있고 내 방문을 닫으면 요리 냄새가 들어가지 않아서 좋았다.&lt;/p&gt;
&lt;p&gt;양파의 맛을 알게 됐다. 어떤 요리를 하든 양파를 썰고 볶고 본다. 파의 맛을 알게 됐다. 어떤 요리를 하든 파를 썰고 볶고 본다.&lt;/p&gt;
&lt;p&gt;요리를 하면은 이전에 몰랐던 그 재료의 맛을 느끼게 되는 것 같다.
요리 안에서 각 재료들이 어떤 일들을 하나 조금씩 느껴지게 됐다.
민호와 정훈이 생일 날 미역국을 해줬다.
소고기가 굉장히 비쌌다.
민호는 삼겹살로 해줬었나.
좋아하는 사람들에게 요리를 해주는 것의 즐거움을 알게 됐다.
그렇게 힘든 요리를 하지는 않았다.
팬 하나로 할 수 있는 요리를 했다.
귀찮은 것을 싫어하는 나에게 딱이었다.
거창한 음식은 아니었지만 맛있게 먹어준 모두에게 감사한다.&lt;/p&gt;
&lt;h4 id=&quot;동거남&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EA%B1%B0%EB%82%A8&quot; aria-label=&quot;동거남 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동거남&lt;/h4&gt;
&lt;p&gt;대학교 1학년 때부터 민호와 많은 부분이 비슷하다고 생각했다.
좋아하는 유튜브 영상도 비슷하고 노는 것도 비슷하다.
웃는 포인트가 비슷하고 치는 드립도 비슷하다.
가치관도 비슷하다.&lt;/p&gt;
&lt;p&gt;같이 살다보니 다른 부분도 많이 보게 된다.
민호는 말을 참 따뜻하게 한다.
여자친구한테도 그렇게 잘하지만 부모님께도 스윗한 모습을 보니까 신기했다.
민호를 보며 저렇게 말할 수 있구나 배웠고 나도 그렇게 되려고 노력했다.
사실 민호는 부모님도 굉장히 부드럽게 말하시는 것을 들었다.
어렸을 때의 영향이 어른이 되어도 매우 크게 남아있을 것이라고 생각하는 내 입장에서는
민호가 이렇게 부드러운 사람이 될 수 있었던 데는 부모님의 영향이 크지 않을까 생각하기도 했다.
민호 덕분에 진짜로 바뀌었는지는 모르겠지만 겉으로는 확실히 사회화 될 수 있었다.&lt;/p&gt;
&lt;p&gt;민호는 자기 목표를 위해 열심히 달린다.
중간에 다른 길로 빠지면 돌아와서 다시 달릴 생각을 안하는 나와는 다르다.
나는 게임, 유튜브, 웹툰이던 무엇이든 간에 한 번 시작하면 멈출 수 없다.
민호가 취준 때 보여준 모습이 있었기에, 나보다 한 학기 먼저 시작했기에, 내가 그나마 보고 배울게 있었다.
그러지 않았다면 계획도 없이 멸망하고 후회했을 것 같다.&lt;/p&gt;
&lt;p&gt;스키장도 가고, 롤드컵 결승도 같이 응원하러갔다.
수셰프치킨도 기억나고, 달리기 하며 가자가자 외치던 것도 기억나고, 우리집도 데려오고, 점도 빼고, 코로나도 걸리고, 투표도 하고, 코노가서 녹음도 하고, 밤에 라면 끓여먹고, 헬스 개빡쎄게 죠져주고, 닌텐도도 같이하고, 티비로 그것이 알고싶다? 그런것도 보고, 롤체 보면서 자고, 댄싱 스포츠로 놀고, 똥 참는 노래 뭐더라, 축제도 같이가고 뭐 많은 걸 했지.
이전 년도에 혼자 많이 외로워했었기도 했는데 그럴 틈이 없었다.
너무 웃겨서 뿜어 버린 적이 많았다.
드립도 재밌고 끼도 너무 많다.
너무 재밌는 한 해였다.
너무 여유롭고 편안했고 재미있게 지냈던 잊지 못할 한 해가 되지 않을까 싶다.
너무 지쳐있을 때 언제로 돌아갈래?? 라고 묻는다면 이 때로 돌아가지 않을까 싶다.
민호랑 어디 여행 놀러가 본 적이 없는게 아쉬운 것 같기도??
못난 나랑 살아준 민호한테 고맙다.&lt;/p&gt;
&lt;h2 id=&quot;나는-무엇을-했나&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%82%98%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%96%88%EB%82%98&quot; aria-label=&quot;나는 무엇을 했나 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;나는 무엇을 했나&lt;/h2&gt;
&lt;p&gt;월별로 무엇을 했는지 생각해 보자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;민호와 자취를 시작&lt;/li&gt;
&lt;li&gt;01.15 이해성이 불러서 이해성 친구들이랑 술&lt;/li&gt;
&lt;li&gt;01.21 민호커플, 철훈, 정훈 집에서 술&lt;/li&gt;
&lt;li&gt;01.24 민호 커플이랑 곤지암 스키장&lt;/li&gt;
&lt;li&gt;01.28 점 뺌&lt;/li&gt;
&lt;li&gt;01.31 엄마랑 볼링&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;02.11 해성, 재우, 호석 이랑 재우 집&lt;/li&gt;
&lt;li&gt;02.12 대학 동기 졸업식 후 집에서 철훈, 정훈, 민호랑 술&lt;/li&gt;
&lt;li&gt;02.26 자운영 첫 식사&lt;/li&gt;
&lt;li&gt;02.28 사바 신입생 모집&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;03.10 LC 개총&lt;/li&gt;
&lt;li&gt;03.12 구가현이랑 행궁동&lt;/li&gt;
&lt;li&gt;03.16 민호 미역국 차려줌&lt;/li&gt;
&lt;li&gt;03.20 경빈이랑 애들이랑 LP 랑 / 왜 새벽에 정훈이랑 철훈이랑 정훈이 집에서 술먹고있징??&lt;/li&gt;
&lt;li&gt;03.26 웅선, 재석이랑 웅선이형 집&lt;/li&gt;
&lt;li&gt;03.28 경빈이랑 애들이랑 중앙대서 별의별 술 다마심 그러고 경빈이네 잠&lt;/li&gt;
&lt;li&gt;03.31 백정훈 생일 후 집에서 희관이랑 정훈이랑 잠, 담 날 달리기, 미역국해줌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;04.01 재우, 해성이랑 호석이 생일이라 이태원&lt;/li&gt;
&lt;li&gt;04.02 사바 신입생 환영회?&lt;/li&gt;
&lt;li&gt;04.09 구가현이랑 행궁동&lt;/li&gt;
&lt;li&gt;04.15 왜 도엽이네??&lt;/li&gt;
&lt;li&gt;04.16 박진아 결혼식 후 은지, 다연, 재우, 호석, 해성이랑 서현이었나? 그러고 노래방&lt;/li&gt;
&lt;li&gt;04.22 희관, 철훈이랑 튀김 수육&lt;/li&gt;
&lt;li&gt;04.23 자운영 옥상에서 노래방?? 술 번개 형들이랑 친해짐&lt;/li&gt;
&lt;li&gt;04.27 민호랑 디도 앞에서 책읽기&lt;/li&gt;
&lt;li&gt;04.28 혁, 경빈이랑 호모데우스 발제&lt;/li&gt;
&lt;li&gt;04.30 사바 엠티 잠깐 갔다옴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;05.01 왜 먹고?&lt;/li&gt;
&lt;li&gt;05.02 재석이랑 축제&lt;/li&gt;
&lt;li&gt;05.03 축제인데 희관이 왜 집에서 잤지?&lt;/li&gt;
&lt;li&gt;05.04 재우랑 정훈, 철훈, 민호 동기들이랑 학교 축제, 싸이 봄&lt;/li&gt;
&lt;li&gt;05.05 자운영 간식 번개인데 끌려가서 술마심&lt;/li&gt;
&lt;li&gt;05.08 어버이 날이라고 정재가 음식 쏨&lt;/li&gt;
&lt;li&gt;05.14 인천 농구 대회, 박진아 집들이 해성, 다연, 은지, 해성이랑&lt;/li&gt;
&lt;li&gt;05.19 이종규 놀러 왔다가 계단에서 떨어짐&lt;/li&gt;
&lt;li&gt;05.22 재석, 보근??, 술마심 왜??&lt;/li&gt;
&lt;li&gt;05.26 정훈이랑 카페&lt;/li&gt;
&lt;li&gt;05.28 안전모 탐지 과제 하러 학교&lt;/li&gt;
&lt;li&gt;05.31 성적최우수상 받으러 학교, 혜빈이랑 역할맥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;06.12 웅선, 보근이랑 농구 끝나고 맥주 달리다가 소주 비율 늘어남&lt;/li&gt;
&lt;li&gt;06.13 민호랑 의자 보러 동탄?? 감&lt;/li&gt;
&lt;li&gt;06.15 농구 끝나고 웅선, 충현, 지우랑 치맥 먹다가 치소맥&lt;/li&gt;
&lt;li&gt;06.17 민호랑 배드민턴&lt;/li&gt;
&lt;li&gt;06.19 희관이 미국간다길래 동탄 민호랑 데려다 줌&lt;/li&gt;
&lt;li&gt;06.24 재석, 신우랑 유현형네 가서 술, 게임&lt;/li&gt;
&lt;li&gt;06.25 자운영 너무 더운날 땀나가며 뒷풀이&lt;/li&gt;
&lt;li&gt;06.27 어느 수집가의 초대 (이건희) 전시 유진이랑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;7월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;07.02 해성, 은지, 지혜 이날 뭐지?? 노래방 왜??&lt;/li&gt;
&lt;li&gt;07.05 인턴 생활, 회사 근처에서 사진찍으러 다니고 끝나고 술&lt;/li&gt;
&lt;li&gt;07.08 인턴 생활, 무슨 레고 만듬&lt;/li&gt;
&lt;li&gt;07.15 양재우 구두 보러 다님&lt;/li&gt;
&lt;li&gt;07.17 정훈, 민호 커플이랑 치맥&lt;/li&gt;
&lt;li&gt;07.28 인턴 생활, 서울 식물원 및 호텔에서 활동&lt;/li&gt;
&lt;li&gt;07.30 가족 들이랑 가평, 할머니, 이모도 보고 고양이도 보고&lt;/li&gt;
&lt;li&gt;07.31 정재랑 서핑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;08.03 가현, 지혜 보드게임카페&lt;/li&gt;
&lt;li&gt;08.06 혁, 경빈 국밥에 빨뚜, 혁형네 집&lt;/li&gt;
&lt;li&gt;08.17 인턴 마지막, 토끼정, 아웃백&lt;/li&gt;
&lt;li&gt;08.27 엄마, 아빠랑 바다로 프리다이빙 어딘지 기억이 안나넹 물 맑았는데&lt;/li&gt;
&lt;li&gt;08.28 진우, 주성 커플이랑 가평&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;9월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;09.01 사바 애들이랑 자피에서 술마심&lt;/li&gt;
&lt;li&gt;09.03 재석, 지우, 신우, 보근, 효섭이랑 술먹고 당구&lt;/li&gt;
&lt;li&gt;09.05 사바 개총?? 명진갈비 먹고 먹고&lt;/li&gt;
&lt;li&gt;09.13 민호 우리 용인 집 와서 낙곱새&lt;/li&gt;
&lt;li&gt;09.15 사바 신입생 모집&lt;/li&gt;
&lt;li&gt;09.20 민호랑 샤브샤브 집에서 닭도리탕&lt;/li&gt;
&lt;li&gt;09.24 kakao 코테&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10.01 자운영 집회 후에, 혁, 경빈, 지석 보쌈 술&lt;/li&gt;
&lt;li&gt;10.03 skt 코테&lt;/li&gt;
&lt;li&gt;10.06 집에서 철훈이가 치킨 사줌&lt;/li&gt;
&lt;li&gt;10.12 민호가 집 앞 삼겹살 사줌, 예비군 갔다옴&lt;/li&gt;
&lt;li&gt;10.15 태영이형 결혼식, 사바, 웅선이형 오픈카 타고 소리 지름&lt;/li&gt;
&lt;li&gt;10.16 정훈, 철훈, 정한이랑 무슨 이자카야같이 생긴 데 감, 조개탕도 먹었너?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;11월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;11.02 생일인데 뭐했지&lt;/li&gt;
&lt;li&gt;11.03 영훈이랑 밥먹은거 보니 삼성 코테였나&lt;/li&gt;
&lt;li&gt;11.06 민호랑 롤드컵 수원 CGV 로 보러감&lt;/li&gt;
&lt;li&gt;11.09 삼성 면접 끝나고 재석, 효섭이랑 술&lt;/li&gt;
&lt;li&gt;11.12 사바 홈커밍, 삼겹살 후 자피&lt;/li&gt;
&lt;li&gt;11.14 현차 면접&lt;/li&gt;
&lt;li&gt;11.18 호석, 재우, 해성이랑 실내 테니스 치고 볼링 치고, 술&lt;/li&gt;
&lt;li&gt;11.20 젤다 전설 완결&lt;/li&gt;
&lt;li&gt;11.23 졸업 전시회&lt;/li&gt;
&lt;li&gt;11.25 빼빼로 만듬&lt;/li&gt;
&lt;li&gt;11.26 차는 왜 빌렸지?? 유진이랑 어디지 여긴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;12월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;12.02 엄마 생신, 할머니 와서 소고기 먹고 케이크&lt;/li&gt;
&lt;li&gt;12.09 사바 종총&lt;/li&gt;
&lt;li&gt;12.10 경빈이 율전와서 자명문 갔다가 튀김 수육&lt;/li&gt;
&lt;li&gt;12.12 영우 사람들이랑 논현 룸술집&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[자주 쓰는 단축키]]></title><description><![CDATA[자주 쓰는 단축키 이번에 Vim 세팅을 하면서 단축키에 대한 고민을 많이 했다. 자주 쓰는 단축키를 한 번 정리해놓고 싶어서 이 글을 쓰게 됐다. Windows Command Keybingding 복사 ctrl + c 붙여넣기 ctrl + v…]]></description><link>https://sunrisehouse.github.io/posts/29</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/29</guid><pubDate>Tue, 24 Jan 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;자주-쓰는-단축키&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%A3%BC-%EC%93%B0%EB%8A%94-%EB%8B%A8%EC%B6%95%ED%82%A4&quot; aria-label=&quot;자주 쓰는 단축키 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자주 쓰는 단축키&lt;/h1&gt;
&lt;p&gt;이번에 Vim 세팅을 하면서 단축키에 대한 고민을 많이 했다. 자주 쓰는 단축키를 한 번 정리해놓고 싶어서 이 글을 쓰게 됐다.&lt;/p&gt;
&lt;h2 id=&quot;windows&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#windows&quot; aria-label=&quot;windows permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Windows&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Keybingding&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;복사&lt;/td&gt;
&lt;td&gt;ctrl + c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;붙여넣기&lt;/td&gt;
&lt;td&gt;ctrl + v&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;창 최대/축소&lt;/td&gt;
&lt;td&gt;windows + 위/아래 방향키&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;창 분할&lt;/td&gt;
&lt;td&gt;windows + 옆 방향키&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;작업 보기&lt;/td&gt;
&lt;td&gt;windows + tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;바탕 화면 표시&lt;/td&gt;
&lt;td&gt;windows + d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pc 잠금&lt;/td&gt;
&lt;td&gt;windows + l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;앱 전환&lt;/td&gt;
&lt;td&gt;alt + tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;창 닫기&lt;/td&gt;
&lt;td&gt;alt + f4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;chrome-windows&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chrome-windows&quot; aria-label=&quot;chrome windows permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Chrome (Windows)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Keybingding&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;새 탭&lt;/td&gt;
&lt;td&gt;ctrl + t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;새 창&lt;/td&gt;
&lt;td&gt;ctrl + n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;새 시크릿 창&lt;/td&gt;
&lt;td&gt;ctrl + shift + n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;오른 탭 이동&lt;/td&gt;
&lt;td&gt;ctrl + tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;왼쪽 탭 이동&lt;/td&gt;
&lt;td&gt;ctrl + shift + tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;탭 닫기&lt;/td&gt;
&lt;td&gt;ctrl + w&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;새로 고침&lt;/td&gt;
&lt;td&gt;ctrl + r&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;이전 페이지&lt;/td&gt;
&lt;td&gt;alt + 왼쪽 방향키&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;다음 페이지&lt;/td&gt;
&lt;td&gt;alt + 오른쪽 방향키&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;강력 새로 고침&lt;/td&gt;
&lt;td&gt;ctrl + shift + r&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;주소표시줄&lt;/td&gt;
&lt;td&gt;ctrl + l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;개발자 도구&lt;/td&gt;
&lt;td&gt;ctrl + shift + i&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element 선택&lt;/td&gt;
&lt;td&gt;ctrl + shift + c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;스크롤 내리기&lt;/td&gt;
&lt;td&gt;space&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;스크롤 올리기&lt;/td&gt;
&lt;td&gt;shift + space&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;단어 검색&lt;/td&gt;
&lt;td&gt;ctrl + f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;history&lt;/td&gt;
&lt;td&gt;ctrl + h&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;vscode--vim&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vscode--vim&quot; aria-label=&quot;vscode  vim permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VSCode + Vim&lt;/h2&gt;
&lt;p&gt;이 부분은 기존 VSCode Shortcut 에서 변경이 된 부분도 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Keybingding&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;새 창&lt;/td&gt;
&lt;td&gt;ctrl + shift + n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;폴더 열기&lt;/td&gt;
&lt;td&gt;ctrl + k ctrl + o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;파일 탐색기 focus&lt;/td&gt;
&lt;td&gt;ctrl + shift + e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;파일 생성&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;파일 삭제&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;파일 단어 탐색&lt;/td&gt;
&lt;td&gt;ctrl + shift + f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;파일 열기&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;파일 분할 열기&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;터미널 toggle&lt;/td&gt;
&lt;td&gt;ctrl + `&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;터미널 다음&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;파일 탐색기 toggle&lt;/td&gt;
&lt;td&gt;ctrl + b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;새 터미널&lt;/td&gt;
&lt;td&gt;ctrl + shft + `&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;터미널 제거&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;에디터 포커스 넘기기&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;에디터 탭 삭제&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;에디터 다음 탭&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;에디터 이전 탭&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;에디터 단어 탐색&lt;/td&gt;
&lt;td&gt;ctrl + f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;에디터 rename symbol&lt;/td&gt;
&lt;td&gt;ctrl + f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;에디터 change all occurance&lt;/td&gt;
&lt;td&gt;ctrl + f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;에디터 단어 탐색&lt;/td&gt;
&lt;td&gt;ctrl + f&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title><![CDATA[NeoVim 도전기]]></title><description><![CDATA[NeoVim 도전기 새해를 맞아 개발 환경을 나에게 최적화하고 싶었다. 그래서 여러가지 방안을 생각해보았다. 개발 환경을 Linux 와 Vim 으로 맞추자라는 목표를 세우게 됐다. 결론적으로는 실패했지만 그 과정을 기록해둔다. Why Vim?? Vim…]]></description><link>https://sunrisehouse.github.io/posts/28</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/28</guid><pubDate>Sun, 22 Jan 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;neovim-도전기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#neovim-%EB%8F%84%EC%A0%84%EA%B8%B0&quot; aria-label=&quot;neovim 도전기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;NeoVim 도전기&lt;/h1&gt;
&lt;p&gt;새해를 맞아 개발 환경을 나에게 최적화하고 싶었다. 그래서 여러가지 방안을 생각해보았다. 개발 환경을 Linux 와 Vim 으로 맞추자라는 목표를 세우게 됐다. 결론적으로는 실패했지만 그 과정을 기록해둔다.&lt;/p&gt;
&lt;h2 id=&quot;why-vim&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-vim&quot; aria-label=&quot;why vim permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why Vim??&lt;/h2&gt;
&lt;p&gt;Vim 을 선택한 이유는 손목이 아프고 귀찮아서이다. 방향키나 마우스를 쓰기위해 손을 움직이고 싶지않아서다. 그리고 편리한 단축키들에 익숙해진다면 개발 속도 향상에 도움이 되지 않을까 싶었다. 그래서 내가 필요한 플러그인들이 NeoVim 에 있나 조사를 한 후에 NeoVim 으로 선택하게 됐다.&lt;/p&gt;
&lt;h2 id=&quot;어떤-플러그인들이-필요할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%B4%EB%96%A4-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8%EB%93%A4%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;어떤 플러그인들이 필요할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;어떤 플러그인들이 필요할까?&lt;/h2&gt;
&lt;p&gt;우선 어떤 플러그인이 필요한지에 앞서 NeoVim 설정을 위해서 Vim script 를 쓸지 Lua 를 쓸지 결정했어야 했는데 나는 NeoVim 에서 Lua 를 지원하고 많은 플러그인도 Lua 로 제공되고 있기에 Lua 를 선택하게 됐다.&lt;/p&gt;
&lt;p&gt;이제 플러그인을 소개하겠다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;플러그인 관리 - packer&lt;/li&gt;
&lt;li&gt;파일 탐색 - nvim-tree&lt;/li&gt;
&lt;li&gt;터미널 - toggleterm&lt;/li&gt;
&lt;li&gt;괄호 닫기 - auto-pairs&lt;/li&gt;
&lt;li&gt;에디터 하단에서 더 많은 정보 보기 - bufferline&lt;/li&gt;
&lt;li&gt;indent line 보여주기 - indent-blank-line&lt;/li&gt;
&lt;li&gt;자동 완성: nvim-cmp, lsp ...&lt;/li&gt;
&lt;li&gt;에디터 테마 (colorshceme) : NightFox&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;lua&quot;&gt;&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;
packer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;startup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;use&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;wbthomason/packer.nvim&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;nvim-tree/nvim-tree.lua&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; requires &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;nvim-tree/nvim-web-devicons&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;nvim-lualine/lualine.nvim&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    requires &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;kyazdani42/nvim-web-devicons&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; opt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;windwp/nvim-autopairs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nvim-autopairs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        disable_filetype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;TelescopePrompt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;vim&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;akinsho/bufferline.nvim&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;v3.*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; requires &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;nvim-tree/nvim-web-devicons&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;akinsho/toggleterm.nvim&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;lukas-reineke/indent-blankline.nvim&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;-- Colorschemes&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;EdenEast/nightfox.nvim&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;-- Cmp&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hrsh7th/nvim-cmp&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;-- The completion plugin&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hrsh7th/cmp-buffer&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;-- buffer completions&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hrsh7th/cmp-path&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;-- path completions&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hrsh7th/cmp-nvim-lsp&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hrsh7th/cmp-nvim-lua&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;-- Snippets&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;L3MON4D3/LuaSnip&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;--snippet engine&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rafamadriz/friendly-snippets&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;-- a bunch of snippets to use&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;-- LSP&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;neovim/nvim-lspconfig&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;-- enable LSP&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;williamboman/nvim-lsp-installer&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;onsails/lspkind.nvim&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;-- Treesitter&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;nvim-treesitter/nvim-treesitter&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;플러그인-세팅---lsp&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%84%B8%ED%8C%85---lsp&quot; aria-label=&quot;플러그인 세팅   lsp permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;플러그인 세팅 - LSP&lt;/h2&gt;
&lt;p&gt;플러그인을 설정하면서 굉장히 많은 시간이 들었다. 특히 자동 완성을 설정하는데 오랜시간을 들였다. NeoVim 은 LSP 를 지원한다. Language Server 와 함께 Client 로서 다양한 기능을 수행할 수 있다 (&quot;go-to-definition&quot;, &quot;find-reference&quot;, &quot;hover&quot;, &quot;completion&quot;, &quot;rename&quot;, &quot;format&quot;, &quot;refactor&quot;, etc.). NeoVim LSP 문서를 보면서 해보려했지만 이해가 부족해서 쉽지 않았고 다른 사람들이 설정해놓은 것을 보며 따라하려고 했다. 그렇게 다양한 사람들의 세팅을 찾아보았지만 서로 다른 세팅을 사용하고 있었고 뭐가 괜찮은지 비교하면서 따라해보면서 구성을 완료했다. 하지만 정확하게 이 플러그인이 어떤 일을 하는지 몰라서, 그리고 이 옵션들이 어떤 역할을 하는지 이해가 없는 채로 일단 되게끔만 했다. 이때부터 세팅에 너무 오랜 시간이 걸려서 짜증이 슬슬 나고 Vim 을 쓰려던 이유가 최적화이고 쓸데 없는 것은 붙이지 않으려고 했기에 스트레스를 받았다.&lt;/p&gt;
&lt;p&gt;그러다가 단축키를 세팅하는 과정에서 화가나서 때려쳤다. VSCode 에서 자주 사용하던 단축키가 있다. 전체 선택 (ctrl + a), 라인 이동 (alt + 방향키 위/아래) 등을 Vim 으로 옮기려던 중에 라인 이동이 한 줄은 가능한데 여러 줄이 불가능했다. 그리고 명령어, 입력, 비주얼 모드에서 이동 시키는 단축키 세팅을 하다가 생각대로 안돼서 때려쳐버렸다.&lt;/p&gt;
&lt;p&gt;아래는 내 vim configuration 의 repository 링크이다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sunrisehouse/vim_config&quot;&gt;GITHUB: neovim config&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;다시-vscode-로&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%8B%9C-vscode-%EB%A1%9C&quot; aria-label=&quot;다시 vscode 로 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다시 VSCode 로...&lt;/h2&gt;
&lt;p&gt;VSCode 로 다시 돌아왔다. 두 주 정도 아주 짬짬히, 고생하며, 신나게 했었지만 실패했다. 하지만 나름 의의를 찾자면 VSCode 에서 제공하는, 당연하게 여겼던 것들이 너무나 고마워졌다는 것이다. 그리고 VSCode 에서 Vim 플러그인과 기타 단축키 설정으로 본래 목표였던 방향키나 마우스 사용 줄이기를 달성할 수 있을 것이라는 생각이 들었다. 그리고 여우의 신포도같지만 NeoVim 으로 구성했었어도 결국 GUI 와 마우스의 강점을 그리워하며 돌아오지 않았을까 싶다. 결국 실패했지만 Vim 사용에 좀 더 익숙해졌단 것도 마음에 든다. 계속해서 나에게 맞는 개발 환경을 찾기 위해 노력할 것이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[내게 무해한 사람 - 최은영]]></title><description><![CDATA[…]]></description><link>https://sunrisehouse.github.io/posts/27</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/27</guid><pubDate>Sat, 01 Oct 2022 00:00:00 GMT</pubDate><content:encoded>&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/27-0.PNG&quot; width=&quot;300px&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;오랜만에 읽는 소설이라 긴장이 됐다. 요새 바쁘고 정신도 없어서 몰입이 잘 될까 걱정이 됐다. 게다가 주변 한 두장 먼저 읽은 친구들의 반응이 좋지 않았다. 걱정을 안고 책을 읽었다. 책은 각 장마다 다른 이야기들을 담고 있었다. 첫 장부터 이야기를 해보겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;첫장부터 낯선 소재가 등장했다. 레즈비언이 주인공으로 등장하는 이야기다. 소설은 학창 시절 주인공 커플의 첫 만남으로 시작된다. 처음에는 레즈비언인줄 몰랐으니 축구를 하다가 공을 맞춘 아이가 남자인줄 알았다. 그렇게 어린시절 둘의 간지러운 사랑이야기 인줄 알았다. 하지만 읽다가 축구를 하는 아이가 여성임을 알게 됐고 레즈비언 커플인 것을 알게 됐다. 처음 이렇게 레즈비언 커플인 것을 알 수 없게 쓴 것은 레즈비언 커플의 사랑이나 이성 커플의 사랑이나 같은 것임을 말하고 싶었던 것이지 않을까 싶다. 그도 그럴 것이 후반부에 이 커플의 갈등이나 어려움은 레즈비언 이었기 때문에 발생한 것이 아니다. 그들은 자신의 마음을 몰라주었기에, 자신과 맞지 않다고 생각했기에, 종국에는 다른 사람에게 더 끌렸기에 이별하게 된다. 이러한 이유는 여타 이성 커플들의 일반적인 문제와 동일하다. 처음 레즈비언이라는 낯설고 다소 불편한 소재는 읽으면 읽을수록 잊게 되었다. 그저 한 커플의 사랑이야기로 다가왔던 것 같다. 주인공이 끝내 이별을 고하고 헤어지는 장면과 그걸 받아들이는 수이의 모습을 읽으며 괭장히 가슴 아팠다. 그리고 결국엔 수이를 그리는 주인공의 모습을 보고 공감이 많이 됐다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;나는 어렸을 때 갖고 놀던 장난감이라던가 일기장 등의 물건들을 버리지 못해서 아직도 갖고 있다. 같이 보내온 그 시간들이 너무나 소중하다. 시간이 지나는 것이 두려워 과거에 머무는 것일 수도 있다. 이런 물건들을 보고 있으면 그 때의 냄새가 나고 눈앞에 그려지고 만져진다. 오랜 사귐 끝에 헤어진 커플들을 보면 어떤 기분일지 상상 할 수도 없겠지만 그 돌아갈 수 없는 시간을 너무나 그리워하지 않을까하며 가슴 아파했다. 나는 항상 짧은 연애를 해왔다. 그 사람과 오래 갈 수 있을 거란 확신이 없었고 그 사람에게 내 마음을 주고 그 사람과 과거를 만들어 가는 것을 두려워했다. 확신이 없으면 시작을 말았어야 했던가. 오랜 시간이 지나도 잊혀지지 않는 그 사람들을 나는 어쩌면 좋을까. 새로운 사람으로 덧칠할 수 있기를 바란다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[정확한 사랑의 실험 - 신형철]]></title><description><![CDATA[…]]></description><link>https://sunrisehouse.github.io/posts/26</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/26</guid><pubDate>Sat, 04 Jun 2022 00:00:00 GMT</pubDate><content:encoded>&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/26-0.PNG&quot; width=&quot;300px&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;예전에 영화 하나를 재밌게 본 적이 있었다. 그리고 친구에게 이 영화가 왜 재미있는지를 설명하려고 했는데 내가 할 수 있던 말은 이거 &quot;그냥 재밌어&quot; 였다. 그래서 자괴감이 들었다. 나는 무언가를 보고도 이정도로 밖에 설명할 수 없구나. 그래서 그 이후부터 영화를 보고나서 내가 이 영화를 왜 재미있게 봤는지 생각을 해봤던 것 같다. 보통 내 경험에서 비롯된 공감이 많은 부분을 차지했다. 또한 영화 리뷰어들의 리뷰를 찾아보았다. 내가 생각하지 못한 것들을 짚어주거나, 정리가 안된 것들을 대신 정리해주기 때문이다. 그것 뿐 아니라 나는 그 사람이 작품을 어떻게 감상하나를 유심히 지켜본다. 그 사람들은 나보다 더 많이, 깊이 알고 있기 때문에 나보다 더 많은 것을 볼 수 있었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 책을 읽고는 영화의 스토리에 대해서 생각을 해보게 되었다. 작가는 이 책에서 3계층의 감상 방법을 서술했다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[호모데우스 - 유발 노아 하라리]]></title><description><![CDATA[…]]></description><link>https://sunrisehouse.github.io/posts/25</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/25</guid><pubDate>Fri, 22 Apr 2022 00:00:00 GMT</pubDate><content:encoded>&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/25-0.jpeg&quot; width=&quot;300px&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;인류의 미래에 대해서 예측을 했다. 전쟁, 기아, 질병과 싸웠던 근대 * 현대를 지나 인류는 새로운 의제를 갖게될 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그 의제는 바로 불멸과 행복이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이전까지 인류의 수명이 늘어나고 있다고 알고 있어서 나는 의학의 발전으로 계속 선형적으로 증가하지 않을까 하고 막연하게 생각하고 있었다. 하지만 책에서 인류의 수명은 정해져있고 의학의 발전은 질병과 부상으로 죽지 않고 수명을 다해서 죽는데에 그친다고 말했다. 맞는 말이라고 생각한다. 인류의 수명은 늘지 않았다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;모든 기술적 문제에는 기술적 해법이 있다.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;죽음은 심장등 기타 생명활동이 멈추는 기술적 문제이다. 그러므로 죽음은 해결할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;우리 신체는 수많은 기술들로 이루어져 있다. 여기에서 나타나는 문제들은 해결할 수 있다. 행복 또한 우리는 조절하게 될 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(86p, 지식의 역설) 작가는 이 책이 예언서로 읽히며 많은 사람들에게 두려움과 소외감, 분노를 일으킬것을 걱정했다. 이 책은 예언서가 아니라 인류가 해야할 선택들에 대해 논의해보자라는 취지라고 했다. 그러면서 이 논의를 통해 인류가 다른 선택을 해서 틀리게되면 오히려 땡큐. 예측이 행동의 변화를 일으킨 것은 너무나 당연하고 훌륭한 예측. 그러면서 마르크스가 자본주의 부정적인 미래를 예측함으로 자본주의자들의 행동 변화를 통해 예측이 틀리게 됐던 이야기를 함. 지식은 쌓이면 쌓일 수록 이전 예측에서 벗아나 다른 행동을 하게끔 한다고 함. 그러면서 예측이란게 쉽지 않음을 어필. 행동을 바꾸지못하면 지식은 무용지물이다. 하지만 행동을 바꾼 지식도 무용지물이 된다. 라면서 자기의 예측이 틀려도 행동을 바꾸는데 의의를 두겠다고 어필.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예측 못하는데 역사는 왜 공부할까? 과학 또한 예측인데 왜?? 과거를 공부해서 과거의 손아귀에서 벗어나기 위해. 우리는 과거를 공부하며 새로운 선택지를 떠올릴 수 있다. 이전까지 상상할 수 없던 조상들도 못하고 우리도 원치 않던 미래를 상상할 수 있다. 그 예로 잔디를 들었다. 잔디의 역사는 중세 귀족들의 저택에서부터 시작됐다. 잔디는 많은 관리가 필요했기에 근대, 현대에 와서도 권력, 돈, 명성과 연관 지어졌다. 우리가 이러한 역사를 알게 되면 다음 우리의 집에 잔디를 놓는 것을 재고할 수 있다. 다른 선택지를 상상할 수 있게 됐다. 과거에서 해방되어 새로운 운명을 상상할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(1부) 인류의 미래를 예측하기 위해 우선 인류가 어떻게 발전해왔는지를 먼저 설명한다. 모든 것에 의식이 있다고 생각했던 때(토테미즘, 애니멀리즘 등)에서 인본주의적으로 바뀌었다. 신과 인간만이 의식을 갖고 있고 다른 생물, 인간은 의식이 없다고 주장했다. 그렇게 인간이 다른 생물위에 군림하는 것을 당연시했다. 하지만 과학이 발전하고 의식의 존재는 그저 뇌에서의 전기 신호일 뿐이라고 밝혀지고있다. 그리고 그러한 전기 신호는 다른 동물들에게서도 보이고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그렇다면 우리는 다른 생물들을 어떻게 대해야 하는 것일까?? 정말 옳고 그름이 없는 문제다. 무엇이 옳다고 주장할 순 없다. 하지만 예측해보자면 우리의 뇌는 생존, 약육강식 의 특성을 본능적으로 갖고있다. 그러므로 결국에 살아남은 생물들은 그저 인간의 선택을 받은 생물들만이 살아남을 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2021년 한정우는 어떻게 살았을까]]></title><description><![CDATA[2021년 올해 정말 열심히 살았다.…]]></description><link>https://sunrisehouse.github.io/posts/24</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/24</guid><pubDate>Fri, 31 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;2021년&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2021%EB%85%84&quot; aria-label=&quot;2021년 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2021년&lt;/h1&gt;
&lt;p&gt;올해 정말 열심히 살았다. 2학기 때는 프로젝트에 스타트업에 학교 수업에, 노는 것도 술자리, 어디 여행 하나 빠지지 않고 동아리 활동도 열심히 하고 헬스도 열심히 했다. 결정적으로 가장 중요하게 생각했던 학점에서 좋은 결과가 나와서 올해가 정말 아쉽지 않다. 내가 대견하다. 열심히 한만큼 결과가 나와서 감사하다. 모든 일에 감사하다.&lt;/p&gt;
&lt;p&gt;삶의 태도가 바뀌었다. 짧은 인생 살면서 어떻게 살아갈 것인지 2번정도 바꿨었는데 (올해 무엇이 바뀌었나 설명하기 위해 전에 내가 어떻게 살아왔는가를 설명하려다가 너무 길어져서 지웠다. 아쉽다.) 올해 바뀐 내 삶의 태도에 대해서 한번 말해보고 싶다. 뭔가 깨달은 척, 멋있는 척 하긴 했는데 아직 너무나 부족한 사람이란걸 알아주길 바라고 내가 말한 모든 것이 정답이란 것이 아니고 그냥 내 생각을 말한 것이다.&lt;/p&gt;
&lt;h2 id=&quot;책임을-다하는-삶&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B1%85%EC%9E%84%EC%9D%84-%EB%8B%A4%ED%95%98%EB%8A%94-%EC%82%B6&quot; aria-label=&quot;책임을 다하는 삶 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;책임을 다하는 삶&lt;/h2&gt;
&lt;p&gt;올해 초에는 좀 힘들었다. 무기력함, 공허함, 허무주의에 좀 빠져있었던것 같다. 정말 좋아했던 사람과도 잘 되지 않았다. 회사 다니는 것도 질렸고 스타트업에서 일하는 것에도 지쳤었다. 그래서 학교로 복학했다. 하지만 코로나라서 말을 할 친구들도 많이 없었고 혼자 있을 때 너무 힘들었었다. 아 이게 우울증 걸린 느낌인가 싶었다. 학교 공부는 너무 힘들었다. 대학교 다니는 동안 공부란 걸 해본적도 없었고 수업을 꾸준히 나가본 적도 없었다. 학교 복학해서 적응을 잘 못했었다.&lt;/p&gt;
&lt;p&gt;그러다 “책임” 을 다 하는 삶을 사려고 노력하면서 괜찮아졌다. 조던 피터슨의 “12가지 인생의 법칙” 에서 말했던 것 중 하나가 책임을 다하는 삶을 살라는 것이었다. 그 책을 읽을 당시에는 그저 당연한 말로 받아들였지만 지금에 와 느끼는 바는 많이 다르다. 책임을 다 한다는 것이 이런것 아닐까 하는 생각이 든다. 이제 한정우의 책임론에 대해서 설명해보겠다.&lt;/p&gt;
&lt;p&gt;이전까지 나는 나만을 바라봤었다. 내가 열심히 살아야하는 이유는 내가 나중에 행복하기 위해서이고 가족이나 친구한테 잘해야하는 이유는 내가 좋아서라고 생각했었다. 하기 싫은건 안했고 하고 싶은 것은 다 해왔다. 이런 것들이 내가 여유롭고 좋을 땐 괜찮았는데 힘들어지니 문제가 생겼다. &apos;나 힘들고 이거 하는거 좋아하지 않는것 같은데 해야해??&apos;, &apos;인생 뭐 아무리 열심히 살아도 성공 못할것 같은데 그냥 적당히 하고 적당히 살까??&apos; 등의 허무주의적인 생각들을 하곤했던 것 같다. 목표가 없어졌던 것 같다. 이성 관계에서도 마찬가지이다. 나와 조금이라도 맞지 않거나 내가 힘들면 끊어버렸다. 대학 초반에는 돈 없어서 밥 굶는데 여유가 없는게 당연했고, 회사 다니면서 돈도 시간도 생기면서 여유가 생긴줄 알았다. 돈을 펑펑 써가며 여유로운 사람이 된 줄 알았는데 그냥 나 하나 챙기기 급급했던 사람이었었다.&lt;/p&gt;
&lt;p&gt;일단 정말 고마운 &lt;strong&gt;백정훈&lt;/strong&gt; shout out (이거맞나??) 함 한다. 올해의 인물이다. 그냥 아무 생각 안하고 의욕없이 우울해하며 계속 누워있는데 그냥 맨날 불러서 카페서 공부하자 데려가고, 말 하는 방법 까먹었는데 정훈이보고 다시 배웠고, 재미있는 이야기 소재 계속 가져와서 말하면서 엄청 웃었던 것 같다.&lt;/p&gt;
&lt;p&gt;그러면서 올해 언제, 어떻게, 왜 바뀌었는지는 모르겠는데 어느 순간부터 노는 것, 공부, 친구, 가족 등 모든 것에 의욕적이게 됐다. 어느 순간부터 &quot;책임&quot; 을 다하는 삶을 살고 싶다고 생각을 했던 것 같다. 나를 위해 사는 것이 아닌 책임을 지며 사는 것이 목표가 됐다. 간단하게는 프로젝트 팀장으로서 책임을 지고 열심히 프로젝트를 완수하는 것 부터해서, 부모님께 자식된 책임을 다하고, 세상에 나온 나에 대한 책임을 다한다. 이 무거운 여러 책임들을 느끼면서 걸어가며 이 여정을 완수하는게 인생의 목표가 됐다.&lt;/p&gt;
&lt;p&gt;이러면서 마음이 매우 편안해졌다. 내가 모든 것에 책임을 다하며 열심히 사는 것이 너무나 당연해졌다. 부모님께 잘해야하는 이유는 내가 그렇게 하는게 좋아서가 아니라 그냥 자식이라는 책임으로 그게 당연하기 때문이 됐다. 이 수업에서 열심히 공부해야하는 이유는 내가 이 수업이 좋아서가 아니라 그냥 수업을 듣기 시작한 책임을 지고 열심히 듣는게 당연하기 때문이 됐다. 종교에서 기도하고 마음이 편안해지는 느낌이 이런것 아닐까 하는 생각이든다. 내면에서부터 풍요로워짐을 느꼈고 삶이 충만해짐을 느꼈다.&lt;/p&gt;
&lt;p&gt;쓰다보니 안대쓴 경주마처럼 이유를 알려하지 않고 앞만 보고 달리는 것 같다는 생각을 하게 된다. 역시나 이것도 진리는 아닌 것 같다.&lt;/p&gt;
&lt;p&gt;예전에 진리가 무엇인지 한창 생각하던 적이 있다. &apos;사람은 왜 살아가야 하는 거지?&apos; 같은 질문들을 생각 할 때마다 매우 고통스러웠다. 정답은 없었고 생각은 계속 돌고 돌아 제자리로 돌아왔다. 그래서 내가 내린 결론은 &apos;정답은 없다&apos; 였다. 인간이 살아가는 이유는 무수히 많고 나만의 삶이 있는 것이고 그저 내 삶의 태도를 관철하며 살아가면 그것이 나의 진리가 되는 것이라고 생각한다. 나의 이 책임지며 살아가는 삶도 정답이 아닌 것을 알지만 상관 없다. 이미 나의 진리가 됐고 나는 그저 믿고 행동하면 될 뿐이라고 생각한다.&lt;/p&gt;
&lt;p&gt;그래 내가 이렇게 사는게 좋으면 됐지 뭐. 약간 걱정되는 것은 모든 걸 책임지려다가 지쳐서 나가떨어지면 어떡하지?? 근데 12월에 쫌 쉬니까 바로 괜찮아지는 것 보면 그냥 좀 쉬다오면 될 것 같다는 생각이 들기도 하고?? 올해 내가 얻은 것 중 가장 큰 것 같다. 감사하다.&lt;/p&gt;
&lt;h2 id=&quot;기억에-남는-활동이-있니&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EC%96%B5%EC%97%90-%EB%82%A8%EB%8A%94-%ED%99%9C%EB%8F%99%EC%9D%B4-%EC%9E%88%EB%8B%88&quot; aria-label=&quot;기억에 남는 활동이 있니 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기억에 남는 활동이 있니??&lt;/h2&gt;
&lt;h3 id=&quot;saba&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#saba&quot; aria-label=&quot;saba permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SABA&lt;/h3&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/24-1.jpeg&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;농구 동아리 코치로서 열심히 활동했다고 생각한다. 대학교 초반 내가 왜 농구 동아리 활동을 열심히 해야하지? 몰랐다. 그냥 나 좋을 때만 가고 훈련 하기 싫으니까 안하고 선배들 뭐 중요해? 그냥 내가 하고 싶은대로 하면 되는 거 아니야? 했었던 나를 후회한다. 농구 동아리에 들었으면 그 책임을 다 하면 되는 것 뿐이었는데… 좋은 동생들이 있어서 너무 다행이었다. 재석이에게 감사하다. 신우나 상준이 마지막이라 아쉽다. 새로 좋은 동생들이 더 생겨서 좋다.&lt;/p&gt;
&lt;h3 id=&quot;산학협력프로젝트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%B0%ED%95%99%ED%98%91%EB%A0%A5%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8&quot; aria-label=&quot;산학협력프로젝트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;산학협력프로젝트&lt;/h3&gt;
&lt;p&gt;개발 프로젝트 팀장을 맡아서 일년간 팀을 이끌어나갔다. 살면서 팀장은 처음이었다. 항상 개발팀에서 막내였는데 내가 이끌어 가야하자 너무나 힘들었다. 재촉하고 싶진 않았는데 내가 바빠지니가 화가 나기도 하고 내가 하면 금방 끝날것 같은데 왜 못하는 거지 하면서 스트레스 받기도 했다. 그 외에도 말할 수 없는 잘못한 것도 있고 후… 그래도 잘 마무리 했단것에 만족한다. 마지막 발표 잘했던 것 같은데 상 못받아서 아쉽다.&lt;/p&gt;
&lt;h3 id=&quot;2학기-학점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2%ED%95%99%EA%B8%B0-%ED%95%99%EC%A0%90&quot; aria-label=&quot;2학기 학점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2학기 학점&lt;/h3&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/24-2.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;4.35... 자기 전에 한번씩 보고 잔다. 그냥 열심히 했는데 학점 잛 받겠지 란 막연한 생각 정도였는데 잘 받은 것 보니까 너무 기분 좋다. 자랑할 사람 아직도 찾고 있다. 과목들이 다 재밌어서 열심히 했는데 너무 기분 좋다. 데이터베이스 기말 시험, 운체 기말 시험 1등한 거 기분 너무 좋다. 성적 장학금 나올수도??? 열심히 한 것에 결과가 나온 게 정말 오랜만인 것 같다. 내년에도 좋은 성적을 냈으면 좋겠다.&lt;/p&gt;
&lt;h2 id=&quot;열심히-놀았나요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%B4%EC%8B%AC%ED%9E%88-%EB%86%80%EC%95%98%EB%82%98%EC%9A%94&quot; aria-label=&quot;열심히 놀았나요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;열심히 놀았나요??&lt;/h2&gt;
&lt;p&gt;갤러리 보면서 뭐하고 놀았나 봐야겠다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1.2) 박진아랑 밥먹으러 갔다가 열난다고 바로 코로나 검사 받으러 갔던 날인듯&lt;/li&gt;
&lt;li&gt;(1.3) 해성이랑 카카오 프렌즈?? 판교쪽?? 갔는데 왜 갔나 몰라&lt;/li&gt;
&lt;li&gt;(1.12) 구가현이랑 밥먹으러 차타고 갔다가 눈 겁나 많이 와서 무서웠던 날 같네&lt;/li&gt;
&lt;li&gt;(1.16) 충현이 재석이랑 내가 운전해서 바다&lt;/li&gt;
&lt;li&gt;(1.17) 이해성이랑 차타고 어디 멀리 카페 갔던 사진 같군 저녁떼 카페거리 쪽에서 삼겹살 먹은 거 같은데&lt;/li&gt;
&lt;li&gt;(1.20) 호석이랑 왜 성수동에 있었을까 카페갔다가 밥먹었는뎅&lt;/li&gt;
&lt;li&gt;(1.26) 지우네가서 술 오지게 마신 날 인듯&lt;/li&gt;
&lt;li&gt;(1.31) 뭔데 호석이랑 자고 있을까 아 성지훈네 자취방 간 날이네&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(2.2) 이건 어딜까 구가현이랑 밥 먹었는데...&lt;/li&gt;
&lt;li&gt;(2.7) 정훈, 철훈이랑 안주없이 술 먹기 하다가 민호가 와서 불닭게티 해준날인듯&lt;/li&gt;
&lt;li&gt;(2.8) 스키장 가기전에 해성이네 집에서 잠&lt;/li&gt;
&lt;li&gt;(2.9) 호석, 해성이랑 스키장가서 스키도 타고 덜덜 떨며 소고기&lt;/li&gt;
&lt;li&gt;(2.10) 해성이랑 호석이네 집 가서 호석이 아버님과 양주 엄청 마시고 사소한 사고가...&lt;/li&gt;
&lt;li&gt;(2.15) 지웅이가 아는 형들이랑 해서 이태원 쪽에서 술 마신 듯?&lt;/li&gt;
&lt;li&gt;(2.18) 종규, 선재랑 사당에서 술&lt;/li&gt;
&lt;li&gt;(2.21) 성은이랑 카페갔다가 고기 먹은 것 같은데&lt;/li&gt;
&lt;li&gt;(2.24) 왜 해성, 호석, 은지 다연도 있었던 것 같고 아마 강남?? 그 전집 같은 곳에서 마신 듯&lt;/li&gt;
&lt;li&gt;(2.26) 호석, 재우랑 해성이 생일 파티 이건 아마 강남??&lt;/li&gt;
&lt;li&gt;(2.28) 나라, 성윤 누나랑 호석이랑 그 어디야 서울숲?? 갔다가 술&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3월&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(4.1) 호석이 생일이라 해성이랑 여긴 어딜까 무슨 옥상 루프탑 술집&lt;/li&gt;
&lt;li&gt;(4.11) 해성, 호석이랑 재우 누나 결혼식 갔다가 한강&lt;/li&gt;
&lt;li&gt;(4.19) 지원, 지윤, 지웅이 그 맥주집에서 불러서 갔다가 잡혀서 술마신날 같은디&lt;/li&gt;
&lt;li&gt;(4.20) 이해성이랑 자명문 카페 공부&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(5.18) 해성이랑 행궁동 갔다가 재우 와서 노래방에서 술 마시고 개 재밌게 놀았던 듯??&lt;/li&gt;
&lt;li&gt;(5.21) 신우네 집에서 사바 신입생이랑 마셨는듯&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;6월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(6.3) 현모랑 철훈이랑 정훈이랑 옛날 감성 술집 하 이름 뭐지 거기서 술마시다가 사바 애들 만나서 사진 찍은듯??&lt;/li&gt;
&lt;li&gt;(6.4) 보근이네 방에서 충현이랑 윤수랑 누구랑 술 마신 거 같은데&lt;/li&gt;
&lt;li&gt;(6.5) 가족들이랑 수원 프리 다이빙 하러&lt;/li&gt;
&lt;li&gt;(6.6) 은지, 진아랑 심바 데리고 애견 카페 갔다가 동백에서 술&lt;/li&gt;
&lt;li&gt;(6.11) 뭔데 이해성 또 내 자취방??&lt;/li&gt;
&lt;li&gt;(6.13) 양재우 자취방와서 술. 영훈이, 철훈이 왔었는 듯. 양재우 엑시던트.&lt;/li&gt;
&lt;li&gt;(6.25) 강남에서 산학협력 팀원들이랑 방탈출 하러갔던것 같은데&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;7월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(7.7) 뭔데 이해성 내 자취방에 있징&lt;/li&gt;
&lt;li&gt;(7.11) 가족들이랑 영화관가서 영화봤는데 뭐더랑&lt;/li&gt;
&lt;li&gt;(7.23) 산학협력프로젝트 팀원들이랑 강남 방탈출 하러 갔다옴&lt;/li&gt;
&lt;li&gt;(7.25) 성지훈이랑 어디간거더라 가평쪽인것 같은데 갔다가&lt;/li&gt;
&lt;li&gt;(7.26) 스타트업 면접보고 태형이형이 강남 회사 근처에서 카페 사주고 밤에 정훈이 방에서 그 닭갈비 해먹고 민트초코 소주 마신날&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;8월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(8.1) 충현이랑 주호민 전시회 갔다가 허탕침&lt;/li&gt;
&lt;li&gt;(8.7) 효찬이 올라와서 선재, 종규, 원영, 승환이랑 내 자취방에서 술&lt;/li&gt;
&lt;li&gt;(8.12) 왜 나라누나랑 밥을 먹었을까 아마 나라 누나 회사 근처 합정이었던거 같은데&lt;/li&gt;
&lt;li&gt;(8.15) 호석, 해성이 내 자취방 와서 양주를 한 세 병 마시고 대참사 났던 날 같은데&lt;/li&gt;
&lt;li&gt;(8.24) 호석이 내 자취방와서 같이 프로젝트??&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;9월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(9.19) 태헌이방에서 정훈이랑 술&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;10월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(10.4) 가족들이랑 외할머니 뵈러 대전&lt;/li&gt;
&lt;li&gt;(10.13) 내 자취방에서 아마 정훈이랑 철훈이랑 술 마신거 같은뎅&lt;/li&gt;
&lt;li&gt;(10.23) 뭔데 재우랑 해성이랑 정훈이랑 영훈이랑 율전 노래방을 갔을까 그 인싸들 가는 술집 갔던것 같기도 하고??&lt;/li&gt;
&lt;li&gt;(10.25) 지윤, 재석, 신우 왠진 몰라 술&lt;/li&gt;
&lt;li&gt;(10.29) 왜 또 사바애들이랑 마셨을까&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;11월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(11.2) 내 생일, 먹고에서 상준, 보근, 정환이랑 개지랄하고 욕포차에서도 지랄하고 다음 날에 사바애들이랑 농구하고 민호, 영훈, 철훈, 성윤, 세준이랑 밥먹고 케잌먹고.&lt;/li&gt;
&lt;li&gt;(11.6) 사바 OB 형들이랑 농구하고 현곤이형 결혼식 하기 전에 삼겹살 먹으면서 술&lt;/li&gt;
&lt;li&gt;(11.7) 해성, 재우, 은지, 다연이랑 합동 생일파티??&lt;/li&gt;
&lt;li&gt;(11.13) 해성, 은지, 다연이랑 인생 첫 롯데월드 후 곱창 먹고 수지 와서 한잔 더&lt;/li&gt;
&lt;li&gt;(11.14) 사바 애들이랑 태영이형 집들이&lt;/li&gt;
&lt;li&gt;(11.18) 뭔데 이날 사바애들이랑 술 마셨징&lt;/li&gt;
&lt;li&gt;(11.21) 뭔데 해성이랑 재우랑 행궁동 쪽에서 모둠 전에 술을 마셨지?&lt;/li&gt;
&lt;li&gt;(11.23) 사바 올해 마지막 트레이닝. 행가래 받음.&lt;/li&gt;
&lt;li&gt;(11.27) 사바애들이랑 현곤이형 결혼식&lt;/li&gt;
&lt;li&gt;(11.29) 태형이형, 승민이형, 창연이형이랑 사당에서 고기 먹고 스타벅스&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;12월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(12.1) 산학협력프로젝트 마무리, 발표.&lt;/li&gt;
&lt;li&gt;(12.3) 심심해서 윤수네 집 무작정 쳐들어가서 나 재우라고 함.&lt;/li&gt;
&lt;li&gt;(12.10) 마지막 시험 날. 사바 종강 총회하고 술 오지게 마심. 난 왜 늦었지?? 아 종강 늦게했지&lt;/li&gt;
&lt;li&gt;(12.11) 성은이가 사당에서 맛있는 고기 사줌.&lt;/li&gt;
&lt;li&gt;(12.13) 신우, 효섭, 원우, 다현, 웅선이형이랑 한 5차 갔다는데 난 3차 전에 쨈&lt;/li&gt;
&lt;li&gt;(12.14) 상준, 신우가 사준 소고기 냠냠. 종규랑 율전에서 곱창에 술.&lt;/li&gt;
&lt;li&gt;(12.16) 종강하고 영훈, 철훈, 정훈, 성윤이랑 담양가서 죽림원, 메타 프로방스, 근현대사 전시관 갔음.&lt;/li&gt;
&lt;li&gt;(12.20) 다연, 은지, 해성, 재우랑 내 자취방에서 술, 고스돕, 노래 맞추는 게임, 개 시끄러워서 사고 남.&lt;/li&gt;
&lt;li&gt;(12.21) 민호와 새 집 이사&lt;/li&gt;
&lt;li&gt;(12.22) 신우네 집에서 신우랑 원우랑 다현이 아침 8시?? 까지 술먹고 고스돕치고&lt;/li&gt;
&lt;li&gt;(12.24) 엄지 누나가 부른 크리스마스 파티&lt;/li&gt;
&lt;li&gt;(12.25) 가족들이랑 크리스마스, 혼자 영화관가서 스파이더맨 보고옴&lt;/li&gt;
&lt;li&gt;(12.26) 원우랑 원우차타고 농구하러 맨투맨&lt;/li&gt;
&lt;li&gt;(12.27) 신우, 진민, 원우랑 원우 차 타고 농구하러 멀리&lt;/li&gt;
&lt;li&gt;(12.30) 호석, 해성, 재우랑 월미도 디스코 팡팡, 바이킹 갔다가 을왕리 바다보고 조개 먹고 숙소가서 노래부르면서 술.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;사진 안찍은 술자리도 많은데 그래도 이정도면 열심히 놀았다 잘했다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Operating System 10]]></title><link>https://sunrisehouse.github.io/posts/22</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/22</guid><pubDate>Mon, 20 Dec 2021 00:00:00 GMT</pubDate><content:encoded></content:encoded></item><item><title><![CDATA[Operating System 9 - File System]]></title><description><![CDATA[File System…]]></description><link>https://sunrisehouse.github.io/posts/21</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/21</guid><pubDate>Sun, 19 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;file-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#file-system&quot; aria-label=&quot;file system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;File System&lt;/h1&gt;
&lt;p&gt;자 파일이 무엇이냐 물어보면 나는 뭐라고 답할까. 일단 파일에는 프로그램이 프로세스로 올라가는 것에 관한 정보가 담긴 실행 파일과 이미지나 영상등 정보를 담고 있는 데이터 파일이 있는 것 같다. 그런 의미에서 파일은 데이터를 묶어 놓은 하나의 개념이라고 보면 될 것 같다. 그 중 실행 파일은 운영체제가 정해 놓은 형식을 따른 파일로 프로세스를 실행시킬 수 있는 데이터 뭉치 라고 보면 될 것 같다. 운영 체제는 이러한 파일들을 관리하기 위해 어떤 방법을 쓰는지 정리해 봅시다.&lt;/p&gt;
&lt;h2 id=&quot;1-hardware&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-hardware&quot; aria-label=&quot;1 hardware permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Hardware&lt;/h2&gt;
&lt;p&gt;파일을 저장하는 하드웨어 장치에 대해서 정리해봅시다.&lt;/p&gt;
&lt;h4 id=&quot;11-hdd&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#11-hdd&quot; aria-label=&quot;11 hdd permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.1 HDD&lt;/h4&gt;
&lt;p&gt;Sector, Track, Cylinder, Platter, Surface&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/21-1.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Head, Arm, Positioner, SpindleR&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/21-2.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Average time to access some target sector&lt;/p&gt;
&lt;p&gt;= 타겟 섹터가 있는 실린더에 헤드 움직이는 시간 + 타겟 섹터 있는 첫번째 비트 위치로 도눈 시간 + 타겟 크기 만큼 읽어들이는(도는) 시간&lt;/p&gt;
&lt;h4 id=&quot;22-ssd&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#22-ssd&quot; aria-label=&quot;22 ssd permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.2 SSD&lt;/h4&gt;
&lt;p&gt;플래쉬 메모리를 이용한 저장장치이다. 데이터를 페이지 단위로 읽거나 쓸 수 있다. random access 가 sequential access 보다 느리다.&lt;/p&gt;
&lt;h2 id=&quot;2-file-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-file-system&quot; aria-label=&quot;2 file system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. File System&lt;/h2&gt;
&lt;h4 id=&quot;21-file-operation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#21-file-operation&quot; aria-label=&quot;21 file operation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.1 File Operation&lt;/h4&gt;
&lt;p&gt;file 에 관한 operation 에는 create, write, read, deletion ... 등이 있다.&lt;/p&gt;
&lt;p&gt;이 중에서 open operation 에 관해서 정리해보자면 파일을 열게되면 파일이름으로 디렉토리를 찾는다. 디렉토리 엔트리를 open-file table 에 copy 하고 file meta data 들을 kernel 에 저장한다. 그리고 open-file table 의 엔트리 pointer 를 반환한다.&lt;/p&gt;
&lt;p&gt;Open-file table 은 열려진 파일에 관한 정보를 저장한다. open file table 에는 파일 포인터, 열려 있는 수, 접근 권한, 파일 메타 데이터 포인터 (FCB) 등의 정보를 갖고 있다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/21-3.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h2 id=&quot;3-directory-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-directory-structure&quot; aria-label=&quot;3 directory structure permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Directory Structure&lt;/h2&gt;
&lt;h4 id=&quot;31-flat-single-level-directory-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#31-flat-single-level-directory-structure&quot; aria-label=&quot;31 flat single level directory structure permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.1 Flat (single-level) directory structure&lt;/h4&gt;
&lt;p&gt;디렉토리가 한 개&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/21-4.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h4 id=&quot;32-2-level-directory-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#32-2-level-directory-structure&quot; aria-label=&quot;32 2 level directory structure permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.2 2-level directory structure&lt;/h4&gt;
&lt;p&gt;user 마다 directory 를 구분했다. MFD(master file directory) level 과 UFD (user file directory) level 이 있다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/21-5.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h4 id=&quot;33-hierarchical-tree-structured-directory-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#33-hierarchical-tree-structured-directory-structure&quot; aria-label=&quot;33 hierarchical tree structured directory structure permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.3 Hierarchical (tree-structured) directory structure&lt;/h4&gt;
&lt;p&gt;user 가 서브디렉토리 만들 수 있는 구조&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/21-6.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h4 id=&quot;34-acyclic-graph-directory-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#34-acyclic-graph-directory-structure&quot; aria-label=&quot;34 acyclic graph directory structure permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.4 Acyclic graph directory structure&lt;/h4&gt;
&lt;p&gt;directory 들 끼리 sub directory 를 공유할 수 있는 구조&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/21-7.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h4 id=&quot;35-general-graph-directory-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#35-general-graph-directory-structure&quot; aria-label=&quot;35 general graph directory structure permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.5 General graph directory structure&lt;/h4&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/21-8.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h2 id=&quot;4-mounting&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-mounting&quot; aria-label=&quot;4 mounting permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Mounting&lt;/h2&gt;
&lt;p&gt;file system 이 시스템에 적용되는 것&lt;/p&gt;
&lt;h2 id=&quot;5-consistency-semantic&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-consistency-semantic&quot; aria-label=&quot;5 consistency semantic permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Consistency Semantic&lt;/h2&gt;
&lt;p&gt;두 사용자가 같은 파일을 열고 있을 때 한 사용자가 먼저 파일에 write 를 하게 되면 다른 사용자에게 바로 반영되어 보이게 할 것인지 아닌지&lt;/p&gt;
&lt;h2 id=&quot;6-file-protection&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-file-protection&quot; aria-label=&quot;6 file protection permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. File Protection&lt;/h2&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/21-9.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
access matrix 를 이용한다. 다음은 access matrix 를 어떻게 구현했는지다.
&lt;h4 id=&quot;61-global-table&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#61-global-table&quot; aria-label=&quot;61 global table permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.1 Global table&lt;/h4&gt;
&lt;p&gt;domain, object, right-set 을 table 형식으로 저장하기 때문에 많은 space 를 차지한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/21-13.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h4 id=&quot;62-access-list&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#62-access-list&quot; aria-label=&quot;62 access list permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.2 Access list&lt;/h4&gt;
&lt;p&gt;각 object 들 마다 domain 에 대한 권한을 저장한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/21-10.png&quot; style=&quot;width:90%; max-width: 200px&quot; /&gt;
&lt;/div&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/21-11.png&quot; style=&quot;width:90%; max-width: 200px&quot; /&gt;
&lt;/div&gt;
&lt;h4 id=&quot;63-capability-list&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#63-capability-list&quot; aria-label=&quot;63 capability list permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.3 Capability list&lt;/h4&gt;
&lt;p&gt;각 domain 마다 모든 object 들에 대한 권한을 저장한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/21-12.png&quot; style=&quot;width:90%; max-width: 200px&quot; /&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Operating System 8 - Virtual Memory]]></title><description><![CDATA[Virtual Memory 프로세스 마다 가상의 메모리가 하나씩 있는 것처럼 보이게 하는 기법이다. 이점은 프로그래밍을 할 때 실제 메모리 크기를 생각할 필요가 없고 더 많은 프로세스를 동시에 올려놓을 수 있다(multiprogramming…]]></description><link>https://sunrisehouse.github.io/posts/20</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/20</guid><pubDate>Sat, 18 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;virtual-memory&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#virtual-memory&quot; aria-label=&quot;virtual memory permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Virtual Memory&lt;/h1&gt;
&lt;p&gt;프로세스 마다 가상의 메모리가 하나씩 있는 것처럼 보이게 하는 기법이다.&lt;/p&gt;
&lt;p&gt;이점은 프로그래밍을 할 때 실제 메모리 크기를 생각할 필요가 없고 더 많은 프로세스를 동시에 올려놓을 수 있다(multiprogramming degree). 또한 swap in out 하는 프로세스 수가 즐어들어서 swapping, load 하는 IO 가 줄었다.&lt;/p&gt;
&lt;p&gt;하지만 실제 주소로 address mapping 을 해야하고 page fault 가 났을때 핸들링을 해줘야한다.&lt;/p&gt;
&lt;h2 id=&quot;1-virtual-memory-methods&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-virtual-memory-methods&quot; aria-label=&quot;1 virtual memory methods permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Virtual Memory Methods&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Paging&lt;/li&gt;
&lt;li&gt;Segmentation&lt;/li&gt;
&lt;li&gt;Hybrid paging/segmentation&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-block-mapping&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-block-mapping&quot; aria-label=&quot;2 block mapping permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Block Mapping&lt;/h2&gt;
&lt;p&gt;user program 을 block 으로 나누고 각 block 에 대한 정보를 block map table 로 기록한다.&lt;/p&gt;
&lt;p&gt;virtual address = (b, d)&lt;/p&gt;
&lt;p&gt;b: block number
d: offset in a block&lt;/p&gt;
&lt;p&gt;real address = (a, d)&lt;/p&gt;
&lt;p&gt;virtual address 에 접근할 때 해당 프로세스의 BMT 에 접근해서 block number 로 해당 block 정보에 접근한다. residence bit 을 확인해서 메모리에 그 블럭이 올라와 있는지 확인. 올라와 있으면 real address 바로 가져다 쓰면 되지만 없으면 swap device 에서 load (context switching 됨)&lt;/p&gt;
&lt;h2 id=&quot;3-demand-paging-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-demand-paging-system&quot; aria-label=&quot;3 demand paging system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. (Demand) Paging System&lt;/h2&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/20-1.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;프로그램을 같은 크기의 block 으로 나눈다. 처음에는 필요한 block 들을 메모리로 올리고 진행되면서 demand 된 block 들을 load 한다.&lt;/p&gt;
&lt;h2 id=&quot;4-segmentation-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-segmentation-system&quot; aria-label=&quot;4 segmentation system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Segmentation System&lt;/h2&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/20-2.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Segmentationi Mapping Table 에 프로그램의 각 segmentation 에 대한 정보 저장.&lt;/p&gt;
&lt;h2 id=&quot;5-hybrid-pagingsegmentation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-hybrid-pagingsegmentation&quot; aria-label=&quot;5 hybrid pagingsegmentation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Hybrid Paging/Segmentation&lt;/h2&gt;
&lt;p&gt;페이징 시스템의 메모리 관리하기 용이함이라는 장점과 세그멘테이션 시스템의 프로그램을 logical 하게 나눠서 sharing 의 용이함이라는 두가지 장점을 합친 방법이다.&lt;/p&gt;
&lt;p&gt;프로그램을 logical 하게 나눈 후 각 Logical partition 을 같은 크기의 block 으로 나눈 방법이다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/20-3.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;virtual address = segment number / page number / offset&lt;/p&gt;
&lt;p&gt;segment number 로 SMT 에서 어떤 segment 에 있는지 찾고 그 segment 의 PMT 에서 page number 로 page 의 real address 를 찾고 offset 으로 접근하는 방법이다.&lt;/p&gt;
&lt;h2 id=&quot;6-hardware--software-components&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-hardware--software-components&quot; aria-label=&quot;6 hardware  software components permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. Hardware / Software Components&lt;/h2&gt;
&lt;h3 id=&quot;61-hardware-components&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#61-hardware-components&quot; aria-label=&quot;61 hardware components permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.1 Hardware Components&lt;/h3&gt;
&lt;h4 id=&quot;611-bit-vector&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#611-bit-vector&quot; aria-label=&quot;611 bit vector permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.1.1 Bit Vector&lt;/h4&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/20-4.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;해당 페이지 프레임에 관한 정보를 저장한다.&lt;/p&gt;
&lt;p&gt;reference bit vector: 참조될 때 마다 1로 변경한다. 주기적으로 0으로 초기화 된다.&lt;/p&gt;
&lt;p&gt;update bit vector: 수정될 때 1로 변경된다. 나중에 해당 page frame 이 victim 으로 나가야 할 때 sub memory 에 반영되게 한다.&lt;/p&gt;
&lt;h3 id=&quot;62-software-components&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#62-software-components&quot; aria-label=&quot;62 software components permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.2 Software Components&lt;/h3&gt;
&lt;p&gt;virtual memory 를 관리하는 소프트웨어 모듈들이다.&lt;/p&gt;
&lt;h4 id=&quot;621-allocation-strategies&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#621-allocation-strategies&quot; aria-label=&quot;621 allocation strategies permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.2.1 Allocation strategies&lt;/h4&gt;
&lt;p&gt;(How Much) 얼마나 많이 한 프로세스에 메모리 space 를 할당할 것인가 정해야한다. 너무 많이 할당하면 메모리 낭비가 되고 너무 적게 할당하면 page fault 비율이 늘어날 것이다.&lt;/p&gt;
&lt;h4 id=&quot;622-fetch-strategies&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#622-fetch-strategies&quot; aria-label=&quot;622 fetch strategies permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.2.2 Fetch strategies&lt;/h4&gt;
&lt;p&gt;(When) 언제 페이지를 메모리에 부를것인지&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Demand Fetch: reference 됐을 때&lt;/li&gt;
&lt;li&gt;Anticipatory Fetch: 예측해서 fetch 한다. overhead 크고 예측 실패하면 잃는 cost 크다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;623-placement-strategies&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#623-placement-strategies&quot; aria-label=&quot;623 placement strategies permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.2.3 Placement strategies&lt;/h4&gt;
&lt;p&gt;(Where) 어디 페이지 프레임에 들어오는 페이지를 넣을지&lt;/p&gt;
&lt;p&gt;First-fit, Best-fit, Worst-fit, Next-fit&lt;/p&gt;
&lt;h4 id=&quot;624-replacement-strategies&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#624-replacement-strategies&quot; aria-label=&quot;624 replacement strategies permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.2.4 Replacement strategies&lt;/h4&gt;
&lt;p&gt;(Who) 어떤 페이지가 나갈지 (페이지 프레임 꽉 차있는데 page fault 나서 메모리에 불러오려면)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixed: MIN(OPT, B0), Random, FIFO(First In First Out), LRU(Least Recently Used), Additional reference-bits, LFU(Least Frequently Used), NUR(Not Used Recently), Clock, Enhanced clock&lt;/li&gt;
&lt;li&gt;Variable: VMIN(Variable MIN), WS(Working Set), PFF(Page Fault Frequency)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;625-cleaning-strategies&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#625-cleaning-strategies&quot; aria-label=&quot;625 cleaning strategies permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.2.5 Cleaning strategies&lt;/h4&gt;
&lt;p&gt;(When) 언제 update 된 페이지를 반영할 것인지&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Demand cleaning&lt;/li&gt;
&lt;li&gt;Anticipatory cleaning (pre-cleaning)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;626-load-control-strategies&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#626-load-control-strategies&quot; aria-label=&quot;626 load control strategies permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.2.6 Load control strategies&lt;/h4&gt;
&lt;p&gt;얼마나 많은 프로세스를 메모리에 올릴지 (multiprogramming degree) 정하는 것. allocation strategy 와 관련있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Underloaded&lt;/li&gt;
&lt;li&gt;Overloaded&lt;/li&gt;
&lt;li&gt;Plateau&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-replacement-strategies&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-replacement-strategies&quot; aria-label=&quot;7 replacement strategies permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. Replacement Strategies&lt;/h2&gt;
&lt;p&gt;페이지 프레임이 꽉찼을 때 누가 나갈지를 정하는 전략이다. 페이지 프레임 수가 정해져 있는 상황(fixed allocaation)에서 쓰는 전략과 페이지 프레임이 변하는 상황(variable allocation)에서 쓰는 전략이 있다.&lt;/p&gt;
&lt;h4 id=&quot;71-min&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#71-min&quot; aria-label=&quot;71 min permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7.1 Min&lt;/h4&gt;
&lt;p&gt;가장 page fault frequency 가 적은 방법이다. 가장 오랫동안 참조되지 않을 페이지 프레임을 내보낸다. 이 방법은 언제 참조되는지 알아야 하기 때문에 실현 불가능하고 얼마나 빠른지 비교하기 위해 사용된다고 한다.&lt;/p&gt;
&lt;h4 id=&quot;72-random&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#72-random&quot; aria-label=&quot;72 random permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7.2 Random&lt;/h4&gt;
&lt;p&gt;그냥 랜덤으로 뽑는 전략이다.&lt;/p&gt;
&lt;h4 id=&quot;73-fifo&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#73-fifo&quot; aria-label=&quot;73 fifo permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7.3 FIFO&lt;/h4&gt;
&lt;p&gt;가장 먼저 들어온 (오래된) 페이지 프레임을 교체한다. 페이지 프레임이 로드된 시간을 기록해서 새 페이지가 들어와야 할 때 전체 timestamp 를 비교한다.&lt;/p&gt;
&lt;h4 id=&quot;74-lru&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#74-lru&quot; aria-label=&quot;74 lru permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7.4 LRU&lt;/h4&gt;
&lt;p&gt;가장 오래 전에 참조된 페이지 프레임을 교체한다. 페이지 프레임이 참조될 때 시간을 기록해야한다.&lt;/p&gt;
&lt;h4 id=&quot;75-nur&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#75-nur&quot; aria-label=&quot;75 nur permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7.5 NUR&lt;/h4&gt;
&lt;h4 id=&quot;76-clock&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#76-clock&quot; aria-label=&quot;76 clock permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7.6 Clock&lt;/h4&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/20-5.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;시계바늘 돌면서 reference bit 와 update bit 이 (0, 0) 인 것을 victim 으로 선택한다. 돌면서 update bit 이 1 이거나 reference bit 이 1 이면 0 으로 바꾼다.&lt;/p&gt;
&lt;h4 id=&quot;77-enhanced-clock&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#77-enhanced-clock&quot; aria-label=&quot;77 enhanced clock permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7.7 Enhanced clock&lt;/h4&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/20-5.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;시계바늘 돌면서 reference bit 와 update bit 이 (0, 0) 인 것을 victim 으로 선택한다. 돌면서 update bit 이 1 이거나 reference bit 이 1 이면 0 으로 바꾼다.&lt;/p&gt;
&lt;h4 id=&quot;78-working-set-memory-management&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#78-working-set-memory-management&quot; aria-label=&quot;78 working set memory management permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7.8 Working set memory management&lt;/h4&gt;
&lt;p&gt;일정 시간 내에 참조된 페이지들을 메모리에 로드해 놓는 방법이다. working set 이라는 variable 한 page frames 들을 관리한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Operating System 7 - Memory Management]]></title><description><![CDATA[Memory Manaement 운영체제는 실행된 프로세스를 관리하기 위해 프로세스에 관한 정보들 (예를 들어 프로세스의 코드들, 프로그램 데이터들(전역, 정적 변수), heap, stack…]]></description><link>https://sunrisehouse.github.io/posts/19</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/19</guid><pubDate>Fri, 17 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;memory-manaement&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#memory-manaement&quot; aria-label=&quot;memory manaement permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Memory Manaement&lt;/h1&gt;
&lt;p&gt;운영체제는 실행된 프로세스를 관리하기 위해 프로세스에 관한 정보들 (예를 들어 프로세스의 코드들, 프로그램 데이터들(전역, 정적 변수), heap, stack) 을 메모리에 저장한다. 그런데 운영체제에는 여러 프로세스가 있기 때문에 이러한 데이터들을 메모리에서 어떻게 관리해야 효율적으로 관리할 수 있는지 정리해보자.&lt;/p&gt;
&lt;h2 id=&quot;1-background&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-background&quot; aria-label=&quot;1 background permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Background&lt;/h2&gt;
&lt;p&gt;컴퓨터 시스템의 메모리에는 프로세서 레지스터, 캐쉬 메모리, 메인 메모리, 보조 기억장치 등이 있다.&lt;/p&gt;
&lt;p&gt;Data transfer unit&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Block: 메인 메모리 - 보조 기억장치&lt;/li&gt;
&lt;li&gt;Word: 프로세서 - 메인 메모리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;프로세서에 가까울 수록 access time 빠르고 용량 작다.&lt;/p&gt;
&lt;p&gt;Address Binding: 명령어들 중에 상대 주소로 jump 하는 경우는 상관 없지만 절대 주소로 jump 하는 경우가 있다. 그런데 실제 메모리에 올라갈 때는 시작 주소가 다르니까 문제가 생긴다. 그러므로 이제 binding 이 필요하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compile time binding: 프로세스가 메모리 어디에 매핑될지 아는 경우에 시작 주소를 더해준다.&lt;/li&gt;
&lt;li&gt;load time binding: 로드 시에&lt;/li&gt;
&lt;li&gt;run time binding: 런타임 시에 하드웨어에서 메모리에 매핑된 주소를 계산해서 바인딩한다. (하드웨어 지원 필요)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dynamic Linking&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linking 이 excution 할 때 일어나는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Swapping&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세스는 일시적으로 메모리 뺏기고 보조 기억장치의 swap device 란 곳에 swaped out 될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/19-1.png&quot; style=&quot;width:90%; max-width: 200px&quot; /&gt;
&lt;/div&gt;
&lt;h2 id=&quot;2-memory-management-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-memory-management-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;2 memory management 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Memory Management 방법&lt;/h2&gt;
&lt;p&gt;Contiguous allocation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uniprogramming&lt;/li&gt;
&lt;li&gt;FPM/VPM&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align:left&quot;&gt;
  &lt;img src=&quot;/images/19-2.png&quot; style=&quot;width:90%; max-width: 200px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Discontiguous allocation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Paging&lt;/li&gt;
&lt;li&gt;Segmentation&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align:left&quot;&gt;
  &lt;img src=&quot;/images/19-3.png&quot; style=&quot;width:90%; max-width: 200px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Virtual memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Paging (Demand paging)&lt;/li&gt;
&lt;li&gt;Segmentation&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align:left&quot;&gt;
  &lt;img src=&quot;/images/19-4.png&quot; style=&quot;width:90%; max-width: 200px&quot; /&gt;
&lt;/div&gt;
&lt;h2 id=&quot;3-contiguousmemory-allocation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-contiguousmemory-allocation&quot; aria-label=&quot;3 contiguousmemory allocation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. ContiguousMemory Allocation&lt;/h2&gt;
&lt;p&gt;프로세스에 관한 데이터들을 한 섹션에 저장&lt;/p&gt;
&lt;h4 id=&quot;31-unimprogramming&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#31-unimprogramming&quot; aria-label=&quot;31 unimprogramming permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.1 Unimprogramming&lt;/h4&gt;
&lt;p&gt;메모리에 프로세스가 한 개 존재한다. 커널 부분에 접근하지 않게 하기위해 메모리 접근할 때 kernel boundary 와 비교해서 보호.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/19-5.png&quot; style=&quot;width:90%; max-width: 300px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;만약 메모리보다 프로세스의 크기가 더 크다면 오버레이 구조를 이용해서 메모리에 공통된 부분은 놔두고 섹션을 나눠서 메모리에 넣어놨다가 갈아끼는 식으로 구현&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/19-6.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h4 id=&quot;32-fixed-partition-multiprogramming&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#32-fixed-partition-multiprogramming&quot; aria-label=&quot;32 fixed partition multiprogramming permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.2 Fixed Partition Multiprogramming&lt;/h4&gt;
&lt;p&gt;메모리를 여러 크기의 파티션으로 나눠서 프로세스가 메모리 할당받을 때 파티션 중에 하나 택해서 들어가는 방법이다. 메모리 관리가 쉽지만 메모리 활용 효울이 낮다.&lt;/p&gt;
&lt;p&gt;프로세스의 크기와 파티션의 크기가 맞지 않아서 파티션 안의 낭비되는 곳이 있다(internal fragmentation). 그리고 낭비되는 공간들을 다 합하면 새로 프로세스하나 더 들어갈 수도 있으니 그렇게도 낭비가 된다 (external fragmentation).&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/19-7.png&quot; style=&quot;width:90%; max-width: 300px&quot; /&gt;
&lt;/div&gt;
&lt;h4 id=&quot;33-variable-partition-multiprogramming&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#33-variable-partition-multiprogramming&quot; aria-label=&quot;33 variable partition multiprogramming permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.3 Variable Partition Multiprogramming&lt;/h4&gt;
&lt;p&gt;메모리 파티션의 크기가 들어오는 프로세스 크기에 따라서 달라진다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/19-8.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Placement strategies: 프로세스가 들어오면 빈 파티션 중 어디에 놔야할지 정해야한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;first fit: 빈 공간 찾다가 들어갈 수 있는 파티션에 바로 들어가기&lt;/li&gt;
&lt;li&gt;best fit: 전체 빈 공간 한번 다 둘러보고 크기가 딱 맞는 곳에 들어가기&lt;/li&gt;
&lt;li&gt;worst fit: 전체 빈 공간 한번 다 둘러보고 제일 큰 데에 들어가기. small size partitions 수를 줄일 수 있다.&lt;/li&gt;
&lt;li&gt;next fit: 이전에 찾은 데 이후부터 찾기 (first fit 이랑 유사)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;빈 파티션이 너무 자잘하게 많아지면 문제가 효율이 안좋아진다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;인접한 빈 파티션을 합치기&lt;/li&gt;
&lt;li&gt;빈 파티션 모조리 다 하나로 합치기, 많은 시스템 자원을 쓴다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;4-discontiguous-memory-allocation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-discontiguous-memory-allocation&quot; aria-label=&quot;4 discontiguous memory allocation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Discontiguous Memory Allocation&lt;/h2&gt;
&lt;h4 id=&quot;41-paging&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#41-paging&quot; aria-label=&quot;41 paging permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.1 Paging&lt;/h4&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/19-9.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Physical 메모리를 Frame (page frame) 으로 Logical 메모리를 page 로 나눠서 메모리를 관리하는 방법이다. 프로세스가 메모리에 올라갈 때 프로세스 이미지를 페이지 단위로 나눠서 메모리에 저장한다. 나뉜 프로세스 이미지들이 메모리의 어떤 페이지에 들어있는지 기록하기 위해 Page Map Table 에 기록한다.&lt;/p&gt;
&lt;p&gt;logical 주소 v = (p, d)&lt;/p&gt;
&lt;p&gt;p 를 page map table 에 넣어서 f (page frame number) 를 찾는다. d (offset) 은 그대로 사용한다.&lt;/p&gt;
&lt;p&gt;physical 주소 a = (f, d)&lt;/p&gt;
&lt;h4 id=&quot;42-segmentation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#42-segmentation&quot; aria-label=&quot;42 segmentation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.2 Segmentation&lt;/h4&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/19-10.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;프로세스 이미지를 logical 한 영역들로 나눈다. 메모리도 variable sized segments 로 나눠서 관리한다. 프로세스 이미지의 각 logical 영역들이 어디 segment 에 있는지 segment table 에 저장한다.&lt;/p&gt;
&lt;p&gt;logical 주소 v = (s, d)&lt;/p&gt;
&lt;p&gt;s 를 segment table 에 넣어서 b (base line 주소) 를 찾는다. d (offset) 은 그대로 사용한다.&lt;/p&gt;
&lt;p&gt;physical 주소 a = (b, d)&lt;/p&gt;
&lt;h2 id=&quot;5-virtual-memory-allocation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-virtual-memory-allocation&quot; aria-label=&quot;5 virtual memory allocation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Virtual Memory Allocation&lt;/h2&gt;
&lt;p&gt;은 다음 포스트에서 계속 ~&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Operating System 6 - Deadlock Handling]]></title><description><![CDATA[Deadlock Handling 운영체제 시스템 안에서 여러 프로세스들이 자신이 필요한 Resource 들을 사용하기 위해 운영체제한테 요청한다. Resource 들은 한정돼 있고 그때마다 프로세스들은 asleep…]]></description><link>https://sunrisehouse.github.io/posts/18</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/18</guid><pubDate>Thu, 16 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;deadlock-handling&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#deadlock-handling&quot; aria-label=&quot;deadlock handling permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Deadlock Handling&lt;/h1&gt;
&lt;p&gt;운영체제 시스템 안에서 여러 프로세스들이 자신이 필요한 Resource 들을 사용하기 위해 운영체제한테 요청한다. Resource 들은 한정돼 있고 그때마다 프로세스들은 asleep 상태로 기다리게 된다. 그러다 어떤 경우에 특정 프로세스들이 자원을 요청하며 깨어나지 못하는 상황이 발생한다. 이 상황을 Deadlock 이라고 하고 이 Deadlock 을 어떻게 찾아내고 어떻게 해결할지에 대해서 정리해 봅시다.&lt;/p&gt;
&lt;h2 id=&quot;1-deadlock-state&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-deadlock-state&quot; aria-label=&quot;1 deadlock state permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Deadlock State&lt;/h2&gt;
&lt;p&gt;프로세스가 미래에 절대 일어나지 않을 이벤트를 기다리고 있는 상태이다.&lt;/p&gt;
&lt;p&gt;그러한 프로세스가 하나라도 있는 시스템을 Deadlock state 에 있다고 말한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/18-1.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;다음과 같이 프로세스는 자원을 요청하며 asleep 상태로 기다린다.&lt;/p&gt;
&lt;h2 id=&quot;2-resource-classification&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-resource-classification&quot; aria-label=&quot;2 resource classification permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Resource Classification&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;preemptible vs non-preemtible&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세스에 의해서 preemtion 될 수 있는지 없는지&lt;/li&gt;
&lt;li&gt;preemtible: processor, memory...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;total allocation vs partitioned allocation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자원 전체가 할당되야하는지&lt;/li&gt;
&lt;li&gt;total: processor...&lt;/li&gt;
&lt;li&gt;partitioned: memory...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;exclusive allocation vs shared allocation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;번갈아가면서 할당되야하는지 아니면 동시에 쓸 수 있는지&lt;/li&gt;
&lt;li&gt;exclusive: processor, memory...&lt;/li&gt;
&lt;li&gt;shared: program, shared data...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;serially reusable vs consumable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;연속해서 다시 쓸 수 있는지 아니면 한번 쓰고 끝나는지&lt;/li&gt;
&lt;li&gt;serially: processor, memory...&lt;/li&gt;
&lt;li&gt;consumable: signal, message...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;3-deadlock-model&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-deadlock-model&quot; aria-label=&quot;3 deadlock model permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Deadlock Model&lt;/h2&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/18-2.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;P1, P2 가 R1, R2 을 각각 할당 받고 사용하고 있는데 각자 R2, R1 을 요청하고 있는 이 상황.&lt;/p&gt;
&lt;h2 id=&quot;4-deadlock-필수-조건&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-deadlock-%ED%95%84%EC%88%98-%EC%A1%B0%EA%B1%B4&quot; aria-label=&quot;4 deadlock 필수 조건 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Deadlock 필수 조건&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Non preemtible resources&lt;/li&gt;
&lt;li&gt;Exclusive resources&lt;/li&gt;
&lt;li&gt;Serially reusable resources&lt;/li&gt;
&lt;li&gt;Circular wait&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;5-deadlock-resolution-schemes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-deadlock-resolution-schemes&quot; aria-label=&quot;5 deadlock resolution schemes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Deadlock Resolution Schemes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Deadlock prevention methods: 아예 Deadlock 일어나지 않게 하기.&lt;/li&gt;
&lt;li&gt;Deadlock avoidance methods: Deadlock 일어나는 상황 계산해서 선택 안하게 하기.&lt;/li&gt;
&lt;li&gt;Deadlock detection and deadlock recovery methods: Deadlock 발생하면 그 때 해결하기.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;51-deadlock-prevention-methods&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#51-deadlock-prevention-methods&quot; aria-label=&quot;51 deadlock prevention methods permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.1 Deadlock prevention methods&lt;/h3&gt;
&lt;p&gt;Deadlock 이 일어나는 필수 조건 중에 하나를 일어나지 않게 막는 방법이다. 구현 불가능하거나 실용적이지 않아서 사용되지 않는다.&lt;/p&gt;
&lt;h4 id=&quot;511-exclusive-한-자원을-shared-하게-쓰기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#511-exclusive-%ED%95%9C-%EC%9E%90%EC%9B%90%EC%9D%84-shared-%ED%95%98%EA%B2%8C-%EC%93%B0%EA%B8%B0&quot; aria-label=&quot;511 exclusive 한 자원을 shared 하게 쓰기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.1.1 exclusive 한 자원을 shared 하게 쓰기&lt;/h4&gt;
&lt;p&gt;불가능&lt;/p&gt;
&lt;h4 id=&quot;512-자원을-preemtible-하게-쓰기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#512-%EC%9E%90%EC%9B%90%EC%9D%84-preemtible-%ED%95%98%EA%B2%8C-%EC%93%B0%EA%B8%B0&quot; aria-label=&quot;512 자원을 preemtible 하게 쓰기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.1.2 자원을 preemtible 하게 쓰기&lt;/h4&gt;
&lt;p&gt;방법1: 프로세스가 다른 자원을 갖고 있는 상태로 자원을 요청하면 갖고 있는 모든 자원을 release 하고 다시 시작하기&lt;/p&gt;
&lt;p&gt;방법2: 대기중인 프로세스가 갖고 있는 자원을 요청하면 그 대기중인 프로세스를 다시 시작시키고 그 자원들을 가져온다.&lt;/p&gt;
&lt;p&gt;다른 자원이 필요한 경우에 그 자원을 갖고있는 프로세스를 종료시켜서 뺐어 오는 것이다. 전혀 실용적이지 않을 것이다.&lt;/p&gt;
&lt;h4 id=&quot;513-자원-전체를-할당-하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#513-%EC%9E%90%EC%9B%90-%EC%A0%84%EC%B2%B4%EB%A5%BC-%ED%95%A0%EB%8B%B9-%ED%95%98%EA%B8%B0&quot; aria-label=&quot;513 자원 전체를 할당 하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.1.3 자원 전체를 할당 하기&lt;/h4&gt;
&lt;p&gt;방법1: 프로세스 실행 전에 모든 자원을 할당하기&lt;/p&gt;
&lt;p&gt;방법2: 할당받은 자원이 하나도 없을 때 자원 할당받을 수 있게 한다.&lt;/p&gt;
&lt;p&gt;그러니까 요청할 때는 할당받은 자원이 하나도 없는 상태로 요청하게 한다는 것&lt;/p&gt;
&lt;h4 id=&quot;514-circular-wait-못하게-하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#514-circular-wait-%EB%AA%BB%ED%95%98%EA%B2%8C-%ED%95%98%EA%B8%B0&quot; aria-label=&quot;514 circular wait 못하게 하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.1.4 circular wait 못하게 하기&lt;/h4&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/18-3.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;모든 자원을 그룹지어놓고 순서를 매겨놓는다. 각 프로세스는 더 높은 순서의 자원을 갖고 있는 동안에 낮은 순서의 그룹에 있는 자원을 요청할 수 없게 한다. 그럼으로 circular wait 을 방지한다.&lt;/p&gt;
&lt;h3 id=&quot;52-deadlock-avoidance&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#52-deadlock-avoidance&quot; aria-label=&quot;52 deadlock avoidance permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.2 Deadlock avoidance&lt;/h3&gt;
&lt;p&gt;항상 system 을 safe state(모든 프로세스가 deadlock 없이 안정적인 종료가 가능한 자원 할당의 sequence 가 있는 상태) 로만 유지하거나 deadlock 이 절대 발생하지 않는 상태로 유지하는 방법이다.&lt;/p&gt;
&lt;h4 id=&quot;521-가정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#521-%EA%B0%80%EC%A0%95&quot; aria-label=&quot;521 가정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.2.1 가정&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;정해진 수의 프로세스&lt;/li&gt;
&lt;li&gt;정해진 수의 자원 유형과 unit(그 자원에게서 할당받을 수 있는 단위) 수&lt;/li&gt;
&lt;li&gt;프로세스가 어떤 자원을 얼마나 필요로 하는지 미리 알고 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;522-dijkstras-algorithm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#522-dijkstras-algorithm&quot; aria-label=&quot;522 dijkstras algorithm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.2.2 Dijkstra’s algorithm&lt;/h4&gt;
&lt;p&gt;자원 유형이 하나라고 가정한다. 항상 safe state 로 유지한다. 프로세스가 자원을 요청할 때 안정적으로 종료할 수 있는 하나의 자원할당 sequence 라도 있으면 accept 하고 아니면 reject 한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/18-4.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;유형이 1개, unit이 10개인 자원이 있다.
P1, P2, P3, 3개의 프로세스가 각각 3, 9, 5 개의 unit 을 최대로 요청하고 현재는 1, 5, 2 개 할당받은 상태이다.&lt;/p&gt;
&lt;p&gt;이때 P1 이 unit 하나를 요청하게 되면 이제 할당했을 때의 상태가 safe state 인지 검사한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/18-5.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;이 상태는 safe 상태인데 그 이유는 P1 -&gt; P3 -&gt; P2 순서대로 모든 필요한 자원을 할당해주고 release 시키면 모든 프로세스를 안전하게 종료시킬 수 있기 때문이다.&lt;/p&gt;
&lt;p&gt;이처럼 각 프로세스가 자원을 요청할 때 요청한 상태가 안정적으로 종료할 수 있는 단 하나의 sequence 가 있는지 검사해서 할당하는 방법이다.&lt;/p&gt;
&lt;h4 id=&quot;523-habermanns-algorithm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#523-habermanns-algorithm&quot; aria-label=&quot;523 habermanns algorithm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.2.3 Habermann’s algorithm&lt;/h4&gt;
&lt;p&gt;위의 다익스트라 알고리즘의 확장판이다. 자원의 수가 여러 개인 곳에 적용한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/18-6.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;P1 ~ P5 까지 5개의 프로세스들이 있다.
각 프로세스들은 각 자원마다 최대로 요청하는 unit 들의 수를 알고 있고 현재 각 자원들에 대해 할당받은 자원 unit 들의 수에 대해서도 알고 있다.&lt;/p&gt;
&lt;p&gt;이때 P2 가 Ra 1개, Rc 2개 (1, 0, 2) 를 요청하면 할당했을 때의 상태가 safe state 인지 검사해서 아니면 reject 한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/18-7.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;P2 -&gt; P4 -&gt; P1 -&gt; P3 -&gt; P5 의 자원 할당 순서로 모든 프로세스를 안정적으로 종료할 수 있기 때문에 위의 자원 요청은 accept 된다.&lt;/p&gt;
&lt;h3 id=&quot;53-deadlock-detection&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#53-deadlock-detection&quot; aria-label=&quot;53 deadlock detection permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.3 Deadlock Detection&lt;/h3&gt;
&lt;p&gt;Resource allocation graph 를 만들고 graph reduction 을 통해 해당 state 가 deadlock 인지 검사하는 방법이다.&lt;/p&gt;
&lt;h4 id=&quot;531-resource-allocation-graph&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#531-resource-allocation-graph&quot; aria-label=&quot;531 resource allocation graph permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.3.1 Resource allocation graph&lt;/h4&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/18-8.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;모든 노드는 프로세스 노드와 자원 노드로 나누어진다.&lt;/p&gt;
&lt;p&gt;프로세스 노드 -&gt; 자원 노드: 해당 프로세스에서 해당 자원을 요청
자원 노드 -&gt; 프로세스 노드: 해당 노드에서 해당 프로세스에 자원 할당
엣지에 해당하는 값은 엣지의 숫자다. (여러 unit 을 요청 or 할당 받을 수 있다.)&lt;/p&gt;
&lt;h4 id=&quot;532-graph-reduction&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#532-graph-reduction&quot; aria-label=&quot;532 graph reduction permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.3.2 Graph Reduction&lt;/h4&gt;
&lt;p&gt;모든 프로세스를 돌아보면서 요청한 자원들을 다 할당 받을 수 있는 프로세스를 찾는다.&lt;/p&gt;
&lt;p&gt;그런 프로세스를 찾으면 해당 자원에게 할당된, 해당 자원이 요청하고 있는 (연결된 모든 edge 들을) 연결들을 제거한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/18-9.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;edge 를 한번 날리고 계속 모든 프로세스를 돌아보는데 더 이상 검사할 프로세스가 없는데 남아있는 edge 가 있으면 deadlock 상태인 것이다.&lt;/p&gt;
&lt;p&gt;해당 프로세스의 edge 들을 다 제거했다는 것은 그 프로세스가 모든 자원을 할당받고 안전하게 종료했다는 것을 의미한다.&lt;/p&gt;
&lt;h3 id=&quot;54-deadlock-recovery&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#54-deadlock-recovery&quot; aria-label=&quot;54 deadlock recovery permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.4 Deadlock Recovery&lt;/h3&gt;
&lt;p&gt;Deadlock 을 발견하고 그 상태를 해소하기 위한 방법이다. Deadlock 을 이루는 프로세스 중 하나를 종료시키거나 그 자원을 할당하고 있는 프로세스들에게서 자원을 다 뺐는 방법이 있다. (둘 다 프로세스들이 종료된다.)&lt;/p&gt;
&lt;h4 id=&quot;541-process-termination&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#541-process-termination&quot; aria-label=&quot;541 process termination permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.4.1 Process termination&lt;/h4&gt;
&lt;p&gt;Deadlock 을 이루는 프로세스 중 종료시키는 cost 가 가장 적은 프로세스를 찾아서 종료시킨다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/18-10.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;위에 상태에서 cost 가 가장 적은 것 부터 종료 시키면 P3 -&gt; P6 -&gt; P1 종료 시키는 방법이 있다. 그런데 사실은 P6 -&gt; P10 만 종료시키면 된다. 그러면 모든 경우의 수의 cost 를 다 조사해서 가장 적은 cost 를 갖는 경우의 process 들을 종료시키는 방법도 있다.&lt;/p&gt;
&lt;h4 id=&quot;542-resource-preemption&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#542-resource-preemption&quot; aria-label=&quot;542 resource preemption permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.4.2 Resource preemption&lt;/h4&gt;
&lt;p&gt;Elect resources to be preemptedin order to eliminate deadlocks&lt;/p&gt;
&lt;p&gt;May terminate the processesthat are preempted the elected resourcesand restart/rollback them&lt;/p&gt;
&lt;p&gt;Rollback&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Operating System 5 - Process Synchronization]]></title><description><![CDATA[Operating System - Process Synchronization 현대 시스템엔 여러 프로세스가 번갈아가며 한 프로세서를 사용하곤한다(concurrency). (여러 프로세스에서 동시에서 여러 프로세스가 실행되는 것은 parallelism…]]></description><link>https://sunrisehouse.github.io/posts/17</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/17</guid><pubDate>Wed, 15 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;operating-system---process-synchronization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#operating-system---process-synchronization&quot; aria-label=&quot;operating system   process synchronization permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Operating System - Process Synchronization&lt;/h1&gt;
&lt;p&gt;현대 시스템엔 여러 프로세스가 번갈아가며 한 프로세서를 사용하곤한다(concurrency). (여러 프로세스에서 동시에서 여러 프로세스가 실행되는 것은 parallelism). 그러다 보니까 이제 같은 메모리에 접근을 하는 경우 접근 순서에 따라서 결과가 달라지는 문제가 발생한다. 이러한 문제를 해결하기 위한 기법에 대해서 정리해보았다.&lt;/p&gt;
&lt;h2 id=&quot;1-critical-section-problem&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-critical-section-problem&quot; aria-label=&quot;1 critical section problem permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Critical Section Problem&lt;/h2&gt;
&lt;p&gt;여러 프로세스가 동시에 같은 메모리에 접근하는 경우 그 접근하는 명령어 혹은 코드 부분을 critical section 이라고 한다. 이 critical section 에 동시에 진입하게 돼서 문제가 발생한다. 이 critical section 에 진입하기 전에 enterCS() 코드를 실행하고 나와서 exitCS() 코드를 실행해서 동시에 접근하는 문제를 해결해 보자.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/17-1.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h3 id=&quot;11-조건&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#11-%EC%A1%B0%EA%B1%B4&quot; aria-label=&quot;11 조건 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.1 조건&lt;/h3&gt;
&lt;p&gt;다음 세가지를 만족해야한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mutual Exclusion: 한 프로세스가 CS 에 있으면 다른 프로세스는 CS 에 있으면 안된다.&lt;/li&gt;
&lt;li&gt;Progress: CS 안에 아무도 없으면 CS 에 진입하는 프로세스는 바로 들어갈 수 있어야한다.&lt;/li&gt;
&lt;li&gt;Bounded wating: 무한히 대기하면 안된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;12-기법들-간략하게&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#12-%EA%B8%B0%EB%B2%95%EB%93%A4-%EA%B0%84%EB%9E%B5%ED%95%98%EA%B2%8C&quot; aria-label=&quot;12 기법들 간략하게 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.2 기법들 간략하게&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mutual Exclusion&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2개의 프로세스들에만 적용 가능한 기법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ME primitives version 1&lt;/li&gt;
&lt;li&gt;ME primitives version 2&lt;/li&gt;
&lt;li&gt;ME primitives version 3&lt;/li&gt;
&lt;li&gt;Dekker&apos;s algorithm&lt;/li&gt;
&lt;li&gt;Peterson&apos;s algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2개 이상의 프로세스에 적용 가능한 기법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dijkstra’s algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하드웨어로 해결하는 기법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TS instruction&lt;/li&gt;
&lt;li&gt;Swap instruction&lt;/li&gt;
&lt;li&gt;TS + ME&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mutual Exclusion 은 while 을 계속 돌기 때문에 busy waiting 을 한다. 이것을 프로세스를 sleep 시켜서 해결한 기법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Semaphore&lt;/li&gt;
&lt;li&gt;Spin lock&lt;/li&gt;
&lt;li&gt;Event counter / Sequencer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-mutual-exclusion-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-mutual-exclusion-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;2 mutual exclusion 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Mutual Exclusion 기법&lt;/h2&gt;
&lt;h3 id=&quot;21-me-primitives-version-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#21-me-primitives-version-1&quot; aria-label=&quot;21 me primitives version 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.1 ME primitives version 1&lt;/h3&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/17-2.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;P0 가 CS 들어갔다 나가면 turn 이 1 이되는데 그러고 다시 P0 가 들어가면 turn 이 0 이라서 들어갈 수 없다. progress 조건을 만족하지 않는다.&lt;/p&gt;
&lt;h3 id=&quot;22-me-primitives-version-2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#22-me-primitives-version-2&quot; aria-label=&quot;22 me primitives version 2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.2 ME primitives version 2&lt;/h3&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/17-3.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;P0 가 P1 이 CS 에 없어서 while 문을 통과하고 preemtion 됐다. P1 이 이제 실행하는데 P0 가 while 통과하고 flag0 을 true 로 안만들고 멈춰서 P1 도 while 통과해서 CS 로 진입한다. 이러면 둘 다 CS 로 들어가기 때문에 mutual exclusion 조건 만족하지 않게 된다.&lt;/p&gt;
&lt;h3 id=&quot;23-me-primitives-version-3&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#23-me-primitives-version-3&quot; aria-label=&quot;23 me primitives version 3 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.3 ME primitives version 3&lt;/h3&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/17-4.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;P0 가 flag0 을 true 로 만들고 끝났다. 이제 P1 차례인데 CS 가 비어있음에도 flag0 이 true 로 되어있어서 CS 에 들어갈 수 없기 때문에 progress 조건을 만족하지 않는다.&lt;/p&gt;
&lt;h3 id=&quot;24-dekkers-algorithm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#24-dekkers-algorithm&quot; aria-label=&quot;24 dekkers algorithm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.4 Dekker&apos;s algorithm&lt;/h3&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/17-5.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h3 id=&quot;24-petersons-algorithm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#24-petersons-algorithm&quot; aria-label=&quot;24 petersons algorithm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.4 Peterson&apos;s algorithm&lt;/h3&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/17-6.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h3 id=&quot;25-dijkstras-algorithm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#25-dijkstras-algorithm&quot; aria-label=&quot;25 dijkstras algorithm permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.5 Dijkstra’s algorithm&lt;/h3&gt;
&lt;p&gt;2 개 이상의 프로세스에 적용할 수 있는 알고리즘&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/17-7.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h2 id=&quot;3-하드웨어-명령어-지원&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A7%80%EC%9B%90&quot; aria-label=&quot;3 하드웨어 명령어 지원 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 하드웨어 명령어 지원&lt;/h2&gt;
&lt;p&gt;명령어는 atomicity, indivisibility 하다는 것을 이용해서 해결한다. 이전의 software ME solution 는 speed 느리고 중간에 preemtion 이 돼서 context switching 이 일어난다.&lt;/p&gt;
&lt;h3 id=&quot;31-ts&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#31-ts&quot; aria-label=&quot;31 ts permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.1 TS&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;boolean &lt;span class=&quot;token function&quot;&gt;TS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;boolean &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    boolean rv &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; true&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; rv&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/17-8.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h3 id=&quot;32-swap&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#32-swap&quot; aria-label=&quot;32 swap permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.2 Swap&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;boolean &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; boolean &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    boolean tmp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tmp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/17-9.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h3 id=&quot;33-ts-with-mutual-exclusion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#33-ts-with-mutual-exclusion&quot; aria-label=&quot;33 ts with mutual exclusion permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.3 TS with Mutual Exclusion&lt;/h3&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/17-10.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h2 id=&quot;4-semaphore-spin-lock-event-counter--sequencer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-semaphore-spin-lock-event-counter--sequencer&quot; aria-label=&quot;4 semaphore spin lock event counter  sequencer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Semaphore, Spin Lock, Event counter / Sequencer&lt;/h2&gt;
&lt;h3 id=&quot;41-semaphore&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#41-semaphore&quot; aria-label=&quot;41 semaphore permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.1 Semaphore&lt;/h3&gt;
&lt;p&gt;Mutual Exclusion 은 기다리는 동안 while 을 계속 돌기 때문에 비효율적이다. 그래서 기다리는 동안 asleep 상태로 보내서 기다리게 하기 위해 나왔다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Semaphore 는 일단 정수형 변수다.&lt;/li&gt;
&lt;li&gt;semaphre 에 대해서 P(), V() 두개의 연산자가 있다. (initialize 하는 것 빼면)
&lt;ul&gt;
&lt;li&gt;P(Semaphore s): s 가 0 보다 크면 -1, 0 이면 queue 로 프로세스 보낸다&lt;/li&gt;
&lt;li&gt;V(Semaphore s): queue 에 프로세스 있으면 awake 후 실행. 없으면 s 1 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;asleep queue 에서 깨우기 위한 스케줄링 기법이 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;411-mutual-exclusion-problem&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#411-mutual-exclusion-problem&quot; aria-label=&quot;411 mutual exclusion problem permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.1.1 Mutual Exclusion Problem&lt;/h4&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/17-11.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h4 id=&quot;412-process-synchronization-problem&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#412-process-synchronization-problem&quot; aria-label=&quot;412 process synchronization problem permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.1.2 Process Synchronization Problem&lt;/h4&gt;
&lt;p&gt;한 프로세스가 다른 프로세스 다음에 실행되야 하는 경우 다른 프로세스 실행될 때까지 기다려야 한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/17-12.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h4 id=&quot;413-producer-consumer-problem&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#413-producer-consumer-problem&quot; aria-label=&quot;413 producer consumer problem permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.1.3 Producer Consumer Problem&lt;/h4&gt;
&lt;p&gt;Producer 는 버퍼에 생산해놓고 Consumer 는 버퍼에서 가져온다. 한 개의 버퍼만 쓰는 경우 여러 버퍼를 쓰는 경우가 있다. Consumer 는 Producer 가 produce 할 때까지 기다려야 한다.&lt;/p&gt;
&lt;h4 id=&quot;414-reader-writer-problem&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#414-reader-writer-problem&quot; aria-label=&quot;414 reader writer problem permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.1.4 Reader Writer Problem&lt;/h4&gt;
&lt;p&gt;Reader 는 read 만 하고 Writer 는 write 만 한다.&lt;/p&gt;
&lt;p&gt;read-write 문제는 매우 많이 일어나서 read-write lock 을 제공하기도 한다.&lt;/p&gt;
&lt;h4 id=&quot;415-dining-philosopher-problem&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#415-dining-philosopher-problem&quot; aria-label=&quot;415 dining philosopher problem permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.1.5 Dining philosopher problem&lt;/h4&gt;
&lt;p&gt;기억이 안납니다...&lt;/p&gt;
&lt;h3 id=&quot;42-spin-lock&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#42-spin-lock&quot; aria-label=&quot;42 spin lock permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.2 Spin Lock&lt;/h3&gt;
&lt;p&gt;semaphore 랑 똑같은데 CS 에 들어가있는 다른 프로세스가 금방 끝날것 같아서 그냥 busy waiting 시켜놓고 기다리게 할 때 사용한다.&lt;/p&gt;
&lt;h3 id=&quot;43-evenetcount--sequencer-ticket-lock&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#43-evenetcount--sequencer-ticket-lock&quot; aria-label=&quot;43 evenetcount  sequencer ticket lock permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.3 Evenetcount / Sequencer (ticket lock)&lt;/h3&gt;
&lt;p&gt;번호표를 뽑아서 번호표에 해당하면 통과시키고 현재 대기 번호보다 크면 asleep 시켜놓는 기법이다. busy waiting 막고 asleep 들어가 순서대로 awake 되기 때문에 queue 에서 스케줄링 기법있다.&lt;/p&gt;
&lt;p&gt;Sequencer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정수형 변수&lt;/li&gt;
&lt;li&gt;현재 번호표 뽑으면 몇 번인지 저장하는 변수라고 생각하면 될 듯&lt;/li&gt;
&lt;li&gt;operation
&lt;ul&gt;
&lt;li&gt;ticket(Sequencer s): 현재 값 return 하고 값 1 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eventcount&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정수형 변수&lt;/li&gt;
&lt;li&gt;event 가 일어난 횟수 기록&lt;/li&gt;
&lt;li&gt;현재 대기 번호 저장하는 변수라고 생각하면 될 듯&lt;/li&gt;
&lt;li&gt;operation
&lt;ul&gt;
&lt;li&gt;read(Eventcount e): 현재 값 return&lt;/li&gt;
&lt;li&gt;advance(Eventcount e): 값 1 증가&lt;/li&gt;
&lt;li&gt;await(Eventcount e, int v): 현재 대기 번호 e 인데 v 갖고 있는 사람이 온거지. e &amp;#x3C; v 이면은 await 시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;431-mutual-exclusion-problem&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#431-mutual-exclusion-problem&quot; aria-label=&quot;431 mutual exclusion problem permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.3.1 Mutual Exclusion Problem&lt;/h4&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/17-13.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;h2 id=&quot;5-case-studies&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-case-studies&quot; aria-label=&quot;5 case studies permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Case Studies&lt;/h2&gt;
&lt;h3 id=&quot;51-solaris&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#51-solaris&quot; aria-label=&quot;51 solaris permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.1 Solaris&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;adaptive mutex: code segement 짧으면 busy waiting 하고 아니면 sleep 시키고 이거였남&lt;/li&gt;
&lt;li&gt;reader-writer lock 제공&lt;/li&gt;
&lt;li&gt;turnstiles: 몰랑&lt;/li&gt;
&lt;li&gt;locking mechanism 을 user level 에서도 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;52-windows-xp&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#52-windows-xp&quot; aria-label=&quot;52 windows xp permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.2 Windows XP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;kernel 안: uniprocessor 에선 interrupt masking, multiprocessor 에선 spinlock&lt;/li&gt;
&lt;li&gt;kernel 밖: dispatcher object 인데 뭔지 모르겟넹&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;53-linux&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#53-linux&quot; aria-label=&quot;53 linux permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.3 Linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Spinlocks, Semaphore, Ticket locks, Reader-writer lock 제공&lt;/li&gt;
&lt;li&gt;SMP 에서: 짧은 lock 이면 spin lock, 긴 lock 이면 semaphore 사용한다.&lt;/li&gt;
&lt;li&gt;uniprocessor 에서: 그냥 preemtion 시키는 것을 껐다 켰다 하는 것으로&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Operating System 4 - Process Scheduling]]></title><description><![CDATA[Operating System - Process Scheduling…]]></description><link>https://sunrisehouse.github.io/posts/16</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/16</guid><pubDate>Tue, 14 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;operating-system---process-scheduling&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#operating-system---process-scheduling&quot; aria-label=&quot;operating system   process scheduling permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Operating System - Process Scheduling&lt;/h1&gt;
&lt;p&gt;지난 포스트에선 프로세스가 무엇인지부터 시작해서 전반적인 프로세스에 관한 내용을 다루었다. 이번 포스트에서는 프로세스를 스케쥴링하는 기법들에 대해서 작성할 예정이다. 스케줄링 중에서도 프로세서를 할당하는 스케줄링인 medium term scheduling 에 대해서 중점적으로 배웠기 때문에 그 부분을 위주로 작성할 것이다.&lt;/p&gt;
&lt;h2 id=&quot;1-프로세스-스케줄링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot; aria-label=&quot;1 프로세스 스케줄링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 프로세스 스케줄링&lt;/h2&gt;
&lt;p&gt;현대 컴퓨터 시스템은 멀티프로그래밍 (멀티 태스킹) 을 지원한다. 시스템에 프로세서보다 많은 수의 프로세스가 돌아간다. 그렇기 때문에 이 프로세스들을 어떻게 관리할지(스케줄링) 에 따라서 성능이 많이 변한다.&lt;/p&gt;
&lt;h2 id=&quot;2-스케줄링-레벨-scheduling-level&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EB%A0%88%EB%B2%A8-scheduling-level&quot; aria-label=&quot;2 스케줄링 레벨 scheduling level permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 스케줄링 레벨 (scheduling level)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Long term scheduling: Job 들을 Kernel 에 등록할 때 어떤 Job 을 등록할지&lt;/li&gt;
&lt;li&gt;Medium term scheduling: Swaped out 된 프로세스 중에 어떤 프로세스에 메모리를 할당 시켜줄지&lt;/li&gt;
&lt;li&gt;Short term scheduling: 프로세서 요청중인 프로세스 중에 어떤 프로세스한테 프로세서 할당할지&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-스케줄링-정책-scheduling-policies&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EC%A0%95%EC%B1%85-scheduling-policies&quot; aria-label=&quot;3 스케줄링 정책 scheduling policies permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 스케줄링 정책 (scheduling policies)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;preemtive vs non-preemtive: 프로세스가 끝나기 전에 다른 프로세스로 바뀔 수 있는지&lt;/li&gt;
&lt;li&gt;static priority vs dynamic priority: 우선순위가 바뀌는지 고정됐는지&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-스케줄링-기법-scheduling-schemes&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EA%B8%B0%EB%B2%95-scheduling-schemes&quot; aria-label=&quot;4 스케줄링 기법 scheduling schemes permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 스케줄링 기법 (scheduling schemes)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;FCFS&lt;/li&gt;
&lt;li&gt;RR&lt;/li&gt;
&lt;li&gt;SPN&lt;/li&gt;
&lt;li&gt;SRTN&lt;/li&gt;
&lt;li&gt;HRRN&lt;/li&gt;
&lt;li&gt;priority&lt;/li&gt;
&lt;li&gt;MLQ&lt;/li&gt;
&lt;li&gt;MFQ&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;41-fcfs-first-come-first-service&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#41-fcfs-first-come-first-service&quot; aria-label=&quot;41 fcfs first come first service permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.1 FCFS (first come first service)&lt;/h3&gt;
&lt;p&gt;먼저 온 프로세스 먼저 프로세서 사용하고 다 끝나면 다음 프로세스가 사용하는 기법이다. 그렇기 때문에 큰 프로세스가 실행 중이라면 뒤에 많은 프로세스들이 대기하고 있어야 한다. 그렇기 때문에 interactive system 에 적절하지 못하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;non-preemtive&lt;/li&gt;
&lt;li&gt;기준: arrival time&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;42-rr-round-robin&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#42-rr-round-robin&quot; aria-label=&quot;42 rr round robin permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.2 RR (round robin)&lt;/h3&gt;
&lt;p&gt;먼저 온 프로세스 먼저 프로세서 사용한다. FCFS 와 다른 점은 프로세스가 끝나기 전에 time quantum 을 다 쓰게된다면 쓰고 있던 프로세서를 뺐기고 ready 상태로 들어간다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;preemtive&lt;/li&gt;
&lt;li&gt;기준: arrival time&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;43-spn-shortest-process-next&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#43-spn-shortest-process-next&quot; aria-label=&quot;43 spn shortest process next permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.3 SPN (shortest process next)&lt;/h3&gt;
&lt;p&gt;빨리 끝낼 수 있는 걸 먼저 끝내는 스케줄링 기법이다. 하지만 긴 cpu burst time 을 가진 프로세스는 계속해서 미뤄지다가 실행을 못할 수 도 있다(starvation)(시간이 지날수록 우선순위를 높여주는 aging 으로 해결할 순 있다.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;non-preemtive&lt;/li&gt;
&lt;li&gt;기준: 프로세스의 남은 cpu burst time&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;44-srtn-shortest-remaining-time-next&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#44-srtn-shortest-remaining-time-next&quot; aria-label=&quot;44 srtn shortest remaining time next permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.4 SRTN (shortest remaining time next)&lt;/h3&gt;
&lt;p&gt;빨리 끝낼 수 있는 걸 먼저 끝내는 SPN 의 변형이다. 프로세서를 사용하고 있는 프로세스의 남은 remaining cpu burst time 과 다른 프로세스들의 remaining cpu burst time 을 계속해서 비교해가며 더 짧은 것으로 바꾼다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;preemtive&lt;/li&gt;
&lt;li&gt;기준: 프로세스의 남은 cpu burst time&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;45-hrrn-high-response-ratio-next&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#45-hrrn-high-response-ratio-next&quot; aria-label=&quot;45 hrrn high response ratio next permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.5 HRRN (high response ratio next)&lt;/h3&gt;
&lt;p&gt;빨리 끝낼 수 있는 걸 먼저 끝내지만 많이 기다린 것도 끝낼 수 있게 하는 기법이다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/16-1.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;preemtive, non-preemtive 둘 다 가능&lt;/li&gt;
&lt;li&gt;기준: response ratio&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;46-priority&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#46-priority&quot; aria-label=&quot;46 priority permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.6 priority&lt;/h3&gt;
&lt;p&gt;우선순위가 높은 프로세스 부터 프로세서를 할당한다. 우선순위가 같은 경우 tie breaking rule 에 따라서 선택한다. (FCFS 같이 먼저 온 프로세스를 선택할 수도 있다.) 우선순위가 낮은 프로세스는 계속 미뤄지다가 실행이 매우 늦춰질 수 도 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;preemtive, non-preemtive 둘 다 가능&lt;/li&gt;
&lt;li&gt;기준: 프로세스의 priority&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;47-mlq-multi-level-queue&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#47-mlq-multi-level-queue&quot; aria-label=&quot;47 mlq multi level queue permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.7 MLQ (multi level queue)&lt;/h3&gt;
&lt;p&gt;Ready queue 를 여러개로 분리하고 queue 각각에 우선순위를 부여해서 높은 우선순위의 queue 부터 스케줄링하는 기법. 프로세스는 하나의 우선순위 큐를 할당받고 변하지 않는다. 각 queue 는 각각의 스케줄링 기법을 사용해서 프로세스를 선택한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/16-2.png&quot; style=&quot;width:90%; max-width: 500px&quot; /&gt;
&lt;/div&gt;
&lt;h3 id=&quot;48-mfq-multi-level-feedback-queue&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#48-mfq-multi-level-feedback-queue&quot; aria-label=&quot;48 mfq multi level feedback queue permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.8 MFQ (multi level feedback queue)&lt;/h3&gt;
&lt;p&gt;MLQ 와 마찬가지로 분리된 여러 ready queue 를 운영하는데 프로세스가 어디 ready queue 에 들어갈지 계속 바꾸면서 짧은 cpu burst time 을 갖는 프로세스 먼저 끝나게 하는 기법이다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/16-3.png&quot; style=&quot;width:90%; max-width: 500px&quot; /&gt;
&lt;/div&gt;
&lt;h4 id=&quot;481-mfq-mechanism&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#481-mfq-mechanism&quot; aria-label=&quot;481 mfq mechanism permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.8.1 MFQ mechanism&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;맨 처음 프로세스가 진입하면 가장 높은 우선순위를 갖는 큐로 들어간다.&lt;/li&gt;
&lt;li&gt;프로세서 할당받은 프로세스가 IO 하러 가면 (IO 를 많이 하면) 큐 유지.&lt;/li&gt;
&lt;li&gt;프로세서 할당받은 프로세스가 preemt 되면 (cpu 많이 쓰면) 우선순위 낮춘다.&lt;/li&gt;
&lt;li&gt;마지막 큐에 있는 프로세스는 그대로 유지.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;482-mfq-variation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#482-mfq-variation&quot; aria-label=&quot;482 mfq variation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.8.2 MFQ variation&lt;/h4&gt;
&lt;p&gt;낮은 우선순위 큐에 들어가있는 프로세스는 올라올 방법이 없기 때문에 starvation 이 일어날 수 있다. 그리고 오버헤드가 크다. 그래서 variation 을 줘서 해결할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각 ready queue 마다 다른 time quantum 사용하기&lt;/li&gt;
&lt;li&gt;aging: 오래 기다린 프로세스 더 높은 우선순위의 queue 에 배정&lt;/li&gt;
&lt;li&gt;IO bound process 는 우선하기 위해 io 하러간 프로세스는 wake up 때 더 높은 우선순위 queue 에 배정&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-case-study&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-case-study&quot; aria-label=&quot;5 case study permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Case Study&lt;/h2&gt;
&lt;h3 id=&quot;51-unix&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#51-unix&quot; aria-label=&quot;51 unix permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.1 Unix&lt;/h3&gt;
&lt;p&gt;MFQ 와 유사한 스케줄링 기법을 사용한다. kernel mode 에 있는 프로세스의 우선순위(kernel priority) user mode 에 있는 프로세스의 우선순위 (user priority) 로 나뉜다. kernel 전체 시스템의 프로세스들의 우선순위를 판단해서 주기적으로 프로세스를 interrupt 한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/16-4.png&quot; style=&quot;width:90%; max-width: 500px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;우선순위는 cpu count 에 반비례해서 io bound 를 선호하게 한다. (아래 식에 있는 priority 값이 낮을 수록 우선순위가 높다.) 일정 주기마다 1/2 하면서 starvation 을 예방한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/16-5.png&quot; style=&quot;width:90%; max-width: 300px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;FSS 라는 기법도 사용하는데 프로세스마다가 아닌 user 기준으로 프로세스의 그룹을 지어서 user 마다 프로세서를 똑같이 할당받을 수 있게 하는 기법이다. (user 한명이 프로세스 많이 쓰면 다른 user 는 프로세서 사용을 많이 못하니까)&lt;/p&gt;
&lt;h3 id=&quot;52-windows&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#52-windows&quot; aria-label=&quot;52 windows permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.2 Windows&lt;/h3&gt;
&lt;p&gt;6가지 우선순위 분류(priority classes)가 있다. 각 클래스마다 상대적인 우선순위(relative priorities)가 있다. 이 우선순위들을 변화시키면서 스케줄링을 진행한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/16-6.png&quot; style=&quot;width:90%; max-width: 300px&quot; /&gt;
&lt;/div&gt;
&lt;h3 id=&quot;53-linux&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#53-linux&quot; aria-label=&quot;53 linux permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.3 Linux&lt;/h3&gt;
&lt;h4 id=&quot;531-version&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#531-version&quot; aria-label=&quot;531 version permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.3.1 version&lt;/h4&gt;
&lt;p&gt;~ v2.4&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예전 unix 기법의 변형을 사용했다.&lt;/li&gt;
&lt;li&gt;SMP 를 지원하지 않는다.&lt;/li&gt;
&lt;li&gt;No scalability (in scheduling) for the number of tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;~ v2.6.22&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SMP 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;v2.6.23 ~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CFS(Completely Fair Scheduler): Implementation of a well-studied, classic scheduling algorithm,called fair queuing(fair scheduling) (red black tree 로 구현)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;532-priority-ranges&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#532-priority-ranges&quot; aria-label=&quot;532 priority ranges permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.3.2 priority ranges&lt;/h4&gt;
&lt;p&gt;0 ~ 139 까지의 우선순위를 가지고 있고 값이 낮을 수록 우선순위가 높다. 0 ~ 99 까지 real time range 이고 100 ~ 139 까지 non-real time range 이다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/16-8.png&quot; style=&quot;width:90%; max-width: 200px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;각 real time range 에서는 우선순위 별로 queue 를 가지고 있고 non-real time range 에서는 red black tree 구조로 ready queue 를 구현했다. (CFS)&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/16-7.png&quot; style=&quot;width:90%; max-width: 200px&quot; /&gt;
&lt;/div&gt;
&lt;h2 id=&quot;6-multiple-processor-scheduling&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-multiple-processor-scheduling&quot; aria-label=&quot;6 multiple processor scheduling permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. Multiple Processor Scheduling&lt;/h2&gt;
&lt;h3 id=&quot;61-processor-affinity&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#61-processor-affinity&quot; aria-label=&quot;61 processor affinity permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.1 processor affinity&lt;/h3&gt;
&lt;p&gt;프로세스가 사용 중이던 프로세서 말고 다른 프로세서에서 실행되게 되면 overhead 가 크다. 그래서 최대한 같은 프로세서에서 실행될 수 있도록 하는 방법이다. 하지만 너무 한 프로세서만 바쁘면 옮겨질 수도 있다(soft affinity). 아예 옮기면 안되는 방법은 hard affinity 라고 한다.&lt;/p&gt;
&lt;h3 id=&quot;62-load-balancing&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#62-load-balancing&quot; aria-label=&quot;62 load balancing permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.2 load balancing&lt;/h3&gt;
&lt;p&gt;최대한 고르게 프로세서에 프로세스를 할당할 수 있도록 하는 방법이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Push migration: 특정 task 가 계속 프로세서들의 load 를 모니터링하다가 불균형이 발견되면 많은 프로세스를 갖고있는 프로세서에서 적은 프로세스를 갖고있는 프로세서로 push&lt;/li&gt;
&lt;li&gt;Pull migration: 제일 적은 프로세서가 많으 프로세서한테 프로세스를 땡겨온다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;보통 둘 다 사용한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Operating System 3 - Process management]]></title><description><![CDATA[Operating System - Process management 운영체제는 process…]]></description><link>https://sunrisehouse.github.io/posts/15</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/15</guid><pubDate>Mon, 13 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;operating-system---process-management&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#operating-system---process-management&quot; aria-label=&quot;operating system   process management permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Operating System - Process management&lt;/h1&gt;
&lt;p&gt;운영체제는 process 들을 관리한다. 프로세스들이 운영체제 위에서 최적으로 돌아갈 수 있도록 운영체제가 여러가지 기법을 이용해 관리를 한다. 그 기법들을 공부한다. 들어가기에 앞서 프로세스가 무엇인지 부터 알아보았다.&lt;/p&gt;
&lt;h2 id=&quot;1-프로세스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4&quot; aria-label=&quot;1 프로세스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 프로세스&lt;/h2&gt;
&lt;p&gt;프로세스는 운영체제(커널) 에 실행하도록 등록된 Entity 이다.&lt;/p&gt;
&lt;h2 id=&quot;2-process-and-job&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-process-and-job&quot; aria-label=&quot;2 process and job permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Process and Job&lt;/h2&gt;
&lt;p&gt;실행 전에는 File or Job 등으로 불리지만 사용자가 실행하는 순간 커널에 프로세스로 등록되게된다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/15-1.png&quot; style=&quot;width:90%; max-width: 500px&quot; /&gt;
&lt;/div&gt;
&lt;h2 id=&quot;3-process-and-resource&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-process-and-resource&quot; aria-label=&quot;3 process and resource permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Process and Resource&lt;/h2&gt;
&lt;p&gt;OS system 에서 Resource 들은 이제 프로세스가 사용하기 위해 커널에 요청하는 것들이다.&lt;/p&gt;
&lt;p&gt;전체 System 은 크게 Process - Kernel - Resource 로 이루어져있다고 볼 수 있고 Process 는 Resource 를 요청하기 위해 꼭 Kernel 을 거쳐야 한다.&lt;/p&gt;
&lt;h2 id=&quot;4-pcb&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-pcb&quot; aria-label=&quot;4 pcb permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. PCB&lt;/h2&gt;
&lt;p&gt;프로세스 entity 는 PCB (Process Control Block) 으로 kernel space 에 구현돼있다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/15-2.png&quot; style=&quot;width:90%; max-width: 500px&quot; /&gt;
&lt;/div&gt;
&lt;h3 id=&quot;4-1-pcb-에-저장되는-정보&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-1-pcb-%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%98%EB%8A%94-%EC%A0%95%EB%B3%B4&quot; aria-label=&quot;4 1 pcb 에 저장되는 정보 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4-1. PCB 에 저장되는 정보&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PID&lt;/li&gt;
&lt;li&gt;Process state&lt;/li&gt;
&lt;li&gt;Scheduling information: 프로세스 스케쥴링 관련 정보&lt;/li&gt;
&lt;li&gt;Memory management information&lt;/li&gt;
&lt;li&gt;IO status information&lt;/li&gt;
&lt;li&gt;Accounting information&lt;/li&gt;
&lt;li&gt;Context save area: Context Switching 발생할 때 register context 를 저장하는 용도&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-2-os-별-pcb&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-2-os-%EB%B3%84-pcb&quot; aria-label=&quot;4 2 os 별 pcb permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4-2. OS 별 PCB&lt;/h3&gt;
&lt;p&gt;Unix&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Process Table Slot&lt;/li&gt;
&lt;li&gt;U - area&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Process Descriptor (task_struct)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-process-states&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-process-states&quot; aria-label=&quot;5 process states permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Process States&lt;/h2&gt;
&lt;p&gt;메모리를 할당받았는가, Processor 를 요청하는 중인가, Processor 를 할당받았는가 등으로 State 가 나뉜다.&lt;/p&gt;
&lt;p&gt;Active: 메모리를 할당 받은 상태&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running: 프로세서를 할당받아서 코드가 실행되는 상태&lt;/li&gt;
&lt;li&gt;Ready: 프로세서를 할당받지 못해서 요청하고 있는 상태&lt;/li&gt;
&lt;li&gt;Blocked, Asleep: 다른 자원(IO 등)을 요청 하고 있는 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suspended, Swapped-out: 메모리를 할당받지 못한 상태&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Suspended-ready: 메모리를 할당받지 못해서 메모리 할당 받으면 프로세스를 요청하는 상태&lt;/li&gt;
&lt;li&gt;Suspendedd-block: 메모리를 할당받지 못한 상태로 다른 자원 요청하고 기다리는 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/15-3.png&quot; style=&quot;width:90%; max-width: 500px&quot; /&gt;
&lt;/div&gt;
&lt;h2 id=&quot;6-process-scheduling&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-process-scheduling&quot; aria-label=&quot;6 process scheduling permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. Process Scheduling&lt;/h2&gt;
&lt;p&gt;Long term scheduling: Job 들을 Kernel 에 등록할 때 어떤 Job 을 등록할지&lt;/p&gt;
&lt;p&gt;Medium term scheduling: Swaped out 된 프로세스 중에 어떤 프로세스에 메모리를 할당 시켜줄지&lt;/p&gt;
&lt;p&gt;Short term scheduling: 프로세서 요청중인 프로세스 중에 어떤 프로세스한테 프로세서 할당할지&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/15-4.png&quot; style=&quot;width:90%; max-width: 500px&quot; /&gt;
&lt;/div&gt;
&lt;h2 id=&quot;7-interrupt&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-interrupt&quot; aria-label=&quot;7 interrupt permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. Interrupt&lt;/h2&gt;
&lt;p&gt;interrupt 는 다양한 상황에서 발생하는 이벤트이다. 이 이벤트(interrupt)가 발생하면 각 상황에 맞게 대응한다.&lt;/p&gt;
&lt;h3 id=&quot;71-interrupt-handling&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#71-interrupt-handling&quot; aria-label=&quot;71 interrupt handling permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7.1 interrupt handling&lt;/h3&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/15-5.png&quot; style=&quot;width:90%; max-width: 500px&quot; /&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;interrupt 발생&lt;/li&gt;
&lt;li&gt;현재 실행중인 프로세스 중지 후 context saving&lt;/li&gt;
&lt;li&gt;interrupt handler 코드 실행&lt;/li&gt;
&lt;li&gt;source 와 reason 분석 후 적절한 ISR 실행&lt;/li&gt;
&lt;li&gt;context restoring&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;8-inter-process-communication-ipc&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-inter-process-communication-ipc&quot; aria-label=&quot;8 inter process communication ipc permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. Inter Process Communication (IPC)&lt;/h2&gt;
&lt;p&gt;프로세스간에 communication 방식에 대해서 알아보자&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Message Passing: 메시지를 send and receive&lt;/li&gt;
&lt;li&gt;Shared Memory: 공유된 메모리를 read and write&lt;/li&gt;
&lt;li&gt;RPC (Remote Procedure Call): 커널에 있는 RPC 를 통해서 client 와 server 가 각자의 stub 에서 message 를 pack and unpack&lt;/li&gt;
&lt;li&gt;RMI (Remote Method Invocation): Java 용 이라고 했던 것 같은뎅&lt;/li&gt;
&lt;li&gt;LRPC (Lightweight RPC): Light 버전&lt;/li&gt;
&lt;li&gt;DSM (Distributed Shared Memory): network 를 통해 연결된 가상의 공유 메모리를 통해 통신&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Operating System 2 - IO management, Virtualization]]></title><description><![CDATA[IO manaement 프로세스는 OS 의 system call 을 호출해서 I/O 를 요청한다. 그 프로세스는 그 응답을 기다리며 sleep 상태로 들어간다. IO 가 끝나면 kernel space 의 IO buffer pool…]]></description><link>https://sunrisehouse.github.io/posts/14</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/14</guid><pubDate>Sun, 12 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;io-manaement&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#io-manaement&quot; aria-label=&quot;io manaement permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IO manaement&lt;/h2&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/14-1.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/14-2.png&quot; style=&quot;width:90%; max-width: 500px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;프로세스는 OS 의 system call 을 호출해서 I/O 를 요청한다. 그 프로세스는 그 응답을 기다리며 sleep 상태로 들어간다. IO 가 끝나면 kernel space 의 IO buffer pool 에 저장한다. interrupt 가 발생하고 프로세스를 깨우고 kernel space 의 buffer pool 에서 user space 로 가져온다.&lt;/p&gt;
&lt;h2 id=&quot;dual-model-operation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dual-model-operation&quot; aria-label=&quot;dual model operation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dual model operation&lt;/h2&gt;
&lt;p&gt;cpu 에 현재 어떤 모드인지 저장하는 1 bit 가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user mode: processor 에서 user application code 를 실행하는 상황&lt;/li&gt;
&lt;li&gt;kernel mode: processor 에서 kernel code 를 실행하는 상황&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;trap or interrupt 가 발생하면 HW 의 mode 가 바뀐다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;trap: Software-generated interrupt caused by exception or system call&lt;/li&gt;
&lt;li&gt;interrupt: Unexpected external event from either the H/W or the S/W&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;virtualization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#virtualization&quot; aria-label=&quot;virtualization permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Virtualization&lt;/h2&gt;
&lt;h3 id=&quot;hardware-virtualization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#hardware-virtualization&quot; aria-label=&quot;hardware virtualization permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hardware virtualization&lt;/h3&gt;
&lt;p&gt;한 PC 에 여러 실행 환경 (execution environment) 을 추상화 한 것. 각각의 실행 환경이 자기의 컴퓨터를 갖고 있는 것처럼 보인다.&lt;/p&gt;
&lt;p&gt;VMM(Virtual Machine Monitor or Manager) or HyperVisor: virtualize 를 실행하기 위한 플랫폼&lt;/p&gt;
&lt;h4 id=&quot;가상화-타입-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94-%ED%83%80%EC%9E%85-1&quot; aria-label=&quot;가상화 타입 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상화 타입 1&lt;/h4&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/14-4.png&quot; style=&quot;width:90%; max-width: 300px&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Para-virtualization(반가상화): guest OS 를 수정&lt;/li&gt;
&lt;li&gt;Full-virtualization(전가상화): guest OS 수정 X. supervisor 가 guest OS 의 명령어를 하드웨어한테 전달&lt;/li&gt;
&lt;li&gt;Hybrid-virtualization: guest OS 몇몇 부분 수정&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;가상화-타입-2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%94-%ED%83%80%EC%9E%85-2&quot; aria-label=&quot;가상화 타입 2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상화 타입 2&lt;/h4&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/14-3.png&quot; style=&quot;width:90%; max-width: 600px&quot; /&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Type 1: VMM 이 직접 하드웨어 위에서 돌아간다.&lt;/li&gt;
&lt;li&gt;Type 2: VMM 이 host OS 위에서 돌아간다.&lt;/li&gt;
&lt;li&gt;Type 3: hybrid&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;os-virtualization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#os-virtualization&quot; aria-label=&quot;os virtualization permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OS virtualization&lt;/h3&gt;
&lt;p&gt;OS virtualization is a server virtualization method where the kernel allows formultiple isolated user-space instances
Such instances, sometimes calledcontainers, virtual private servers (VPS), or jails,may look and feel like a real server from the point of view of its owners and users&lt;/p&gt;
&lt;p&gt;OS virtualization usually imposes little to no overhead, because programs in virtual partitionsuse the OS’s normal system call interfaceand do not need to be subjected to emulation orbe run in an intermediate virtual machine&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Operating System 1 - Operating System]]></title><description><![CDATA[Operating System…]]></description><link>https://sunrisehouse.github.io/posts/13</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/13</guid><pubDate>Sat, 11 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;operating-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#operating-system&quot; aria-label=&quot;operating system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Operating System&lt;/h1&gt;
&lt;p&gt;누군가 나에게 운영체제가 무엇인가요 라고 물어본다면 나는 뭐라고 답할까라는 생각을 해보았다. 나는 컴퓨터 자원을 운영하는 시스템이라고 생각한다. 이 수업에서 컴퓨터 자원 중에 몇가지를 운영체제가 어떻게 운영하는지에 대해서 배웠다.&lt;/p&gt;
&lt;h2 id=&quot;resource-컴퓨터-자원&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#resource-%EC%BB%B4%ED%93%A8%ED%84%B0-%EC%9E%90%EC%9B%90&quot; aria-label=&quot;resource 컴퓨터 자원 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Resource (컴퓨터 자원)&lt;/h2&gt;
&lt;p&gt;컴퓨터 자원에는 여러가지가 있지만 하드웨어와 소프트웨어 자원으로 나누어보겠다.&lt;/p&gt;
&lt;p&gt;하드웨어 자원&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Processor&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;I/O devices&lt;/li&gt;
&lt;li&gt;Network devices&lt;/li&gt;
&lt;li&gt;등등&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;소프트웨어 자원&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Process&lt;/li&gt;
&lt;li&gt;File&lt;/li&gt;
&lt;li&gt;등등&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 수업에서 운영체제가 Memory 를 어떻게 운영하고 Process 와 File 을 어떻게 구현해서 운영하는지에 대해서 배웠다.&lt;/p&gt;
&lt;h2 id=&quot;역할&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%AD%ED%95%A0&quot; aria-label=&quot;역할 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;역할&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;User Interface
&lt;ul&gt;
&lt;li&gt;system call interface: 컴퓨팅 자원을 사용하기 위해서는 운영체제에 있는 interface 를 사용해서 운영체제에 요청을 해야한다.&lt;/li&gt;
&lt;li&gt;CLI, GUI ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Resource Management
&lt;ul&gt;
&lt;li&gt;Process, Memory, File, IO ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Process Management&lt;/li&gt;
&lt;li&gt;Networking / Security&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구조&lt;/h2&gt;
&lt;p&gt;운영체제는 결국에 컴퓨터 하드웨어를 쉽게 사용하기 위한 또 하나의 추상화이다.&lt;/p&gt;
&lt;p&gt;크게 두 가지로 나누어진다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User Interface&lt;/li&gt;
&lt;li&gt;Kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각 어플리케이션들은 System Call Interface 를 통해서 하드웨어의 접근을 한다. 운영체제는 System Call Interface 를 통해 받은 각 자원에 대한 요청을 kernel 에서 처리한다. kernel 은 Resource 들을 관리한다.&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/13-1.png&quot; style=&quot;width:90%; max-width: 400px&quot; /&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Operating System 0]]></title><description><![CDATA[Operating System 2021년도…]]></description><link>https://sunrisehouse.github.io/posts/12</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/12</guid><pubDate>Fri, 10 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;operating-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#operating-system&quot; aria-label=&quot;operating system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Operating System&lt;/h1&gt;
&lt;p&gt;2021년도 2학기 대학교 수업으로 운영체제 수업을 들었다. 엄익준 교수님의 명품 강의로 인해서 너무나도 재미있게 공부할 수 있었다. (존경합니다 교수님!) 기존에 서버나 개발 환경 설정을 위해서 여러 알 수 없는 이름들을 많이 마주하곤 했는데 자주 봤던 이름들이 나올 때는 &apos;아 이게 이거였구나~&apos; 하며 너무나도 반가웠다. 매우 열심히 공부하고 과제도 최선을 다 한 결과 A+ 이 나왔다. 노력한 것에 성과가 나오니까 너무나도 기쁘고 이번에 배운 것들을 간단하게 정리하기 위해 이 Operating System 정리 글을 작성하게 됐다. 신나게 작성해 보겠다.&lt;/p&gt;
&lt;h2 id=&quot;contents&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#contents&quot; aria-label=&quot;contents permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contents&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Operating System&lt;/li&gt;
&lt;li&gt;Process Management&lt;/li&gt;
&lt;li&gt;Memory Management&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[소년이 온다 - 한강]]></title><description><![CDATA[학교 커뮤니티 에브리타임에 누가 자신의 인생책들을 소개했다. 이 책은 그 안에 있었고 댓글에도 이 책이 인생책이라며 꼭 읽어보라는 얘기가 많았다. 그래서 "죽기 전에 봐야할 OO…]]></description><link>https://sunrisehouse.github.io/posts/11</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/11</guid><pubDate>Thu, 13 May 2021 00:00:00 GMT</pubDate><content:encoded>&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/11-1.png&quot; width=&quot;200px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;학교 커뮤니티 에브리타임에 누가 자신의 인생책들을 소개했다. 이 책은 그 안에 있었고 댓글에도 이 책이 인생책이라며 꼭 읽어보라는 얘기가 많았다. 그래서 &quot;죽기 전에 봐야할 OO&quot; 에 눈돌아가는 나는 정말 궁금해서 읽어보게 됐다.&lt;/p&gt;
&lt;p&gt;소설은 정말 오랜만에 읽는 것이었기 때문에 좀 신이났았다. 맨 처음에는 몰입도 잘 안되고 어렵고 대사에 큰따옴표도 없고 읽기 힘들었다.&lt;/p&gt;
&lt;p&gt;처음 읽기 시작했을 때 주인공을 &quot;너&quot; 라고 부르는 것에 당황했다. 너무 낯설었고 그래서 더 집중도 안됐다. 각 장마다 얘기를 하는 주체?? 주인공?? 이 달라지면서 이번엔 누구지?? 하며 추측하면서 읽다가 설마 얘가 얘였어?? 하며 맞추는 작은 재미도 있었다.&lt;/p&gt;
&lt;p&gt;주변 배경이라던가 상황 묘사가 정말 세세하다?? 아니 이게 상상해서 쓴 글이라고?? 직접 안보고 이렇게까지 쓸 수 있나? 작가들은 천재다. 라는 생각을 계속 했다. 특히 2장에서 이걸 이렇게 상상해서 쓸 수 있나 라는 생각을 많이 했던 것 같다.&lt;/p&gt;
&lt;p&gt;각 장마다 있던 변주들이 지루할 틈이 없게 만든 것 같다.&lt;/p&gt;
&lt;p&gt;고문을 당하는 장면은 많지도 않았는데 너무 끔찍하게 다가왔다.&lt;/p&gt;
&lt;p&gt;마지막 장에서 눈물이 찔끔났다. 이 책의 제목이 왜 &quot;소년이 온다&quot; 인지 이 장 때문인 것 같다. 이별이란 것을 극도로 싫어하는 나로서는 마지막 장은 눈물 터트리기 더할 나위 없는 소재였지만 그 이상의 무언가 있었다. 와 이렇게 심리 묘사라 해야하나 이걸 어떻게 쓴거지. 글을 잘 몰라서 이게 어떻게 이렇게 된 건지 잘 모르겠다. 나는 항상 내가 잘 모르는 것에 대한 평가를 &quot;내가 할 수 있는가?&quot; 로 하고 보통 나도 좀만 하면 할 수 있을 듯이라고 생각을 하곤 하는데 이 책은 안될 것 같다. 정말 마지막 장을 읽고 이 책에 완벽한 마무리였다고 생각을 했다. 책을 다 읽고 와 재밌다 라는 생각을 했다.&lt;/p&gt;
&lt;p&gt;5.18 에 관한 영화, 만화를 봤었는데 소설이 추가 됐다. 영화, 만화는 재미있어서 봤는데 이번 소설에서는 피해자들이 되가며 그 아픔에 집중하고 공감하며 봤던 것 같다.&lt;/p&gt;
&lt;p&gt;좀 더 책 많이 읽고 더 많이 알고 봤다면 더 재밌지 않았을까 하는 생각을 했다. 아쉽다. 처음 본 뇌 삽니다.&lt;/p&gt;
&lt;p&gt;한강 작가의 채식주의자도 읽어봐야겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[실격당한 자들을 위한 변론 - 김원영]]></title><description><![CDATA[…]]></description><link>https://sunrisehouse.github.io/posts/10</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/10</guid><pubDate>Thu, 15 Apr 2021 00:00:00 GMT</pubDate><content:encoded>&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;/images/10-1.png&quot; width=&quot;200px&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;이 책을 읽고 장애인들을 어떻게 대해야 하는지, 잘못된 삶이 있는가 에대한 해답을 얻고 싶었다.
장애인들에 대해서 그냥 &quot;안타깝다.&quot;, &quot;나중에 만나면 잘 도와줘야겠다.&quot; 정도의 생각만 가지고 있었다.
하지만 이 변론을 읽고 나는 그들의 입장을 처음으로 들어보았던 것 같다.
해답은 얻진 못 했지만 더욱 진정성 있게 대할 수 있지 않을까 하는 생각을 했다.
좋은 경험이었다.&lt;/p&gt;
&lt;h2 id=&quot;다른-생각들&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EB%A5%B8-%EC%83%9D%EA%B0%81%EB%93%A4&quot; aria-label=&quot;다른 생각들 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다른 생각들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;독서 토론 모임을 시작하게 되었다. 뭐든 핸드폰 보는 것 말고 다른 걸 하고 싶었다. 그러면서 또 뭘 할지를 핸드폰을 보며 찾다가 독서 토론 모임을 발견했다. 일단 해보기로 결정. 이 책은 그 모임의 첫 책이었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;작가의 노련한 모습이 정말 우아해 보였다. 여유로운 태도를 갈망했었던 나에게 그는 정말 노련한 사람처럼 보였다. 자신의 장애에 대해서 농담으로 대처하고 오히려 자조하는 개그를 하는 그런 모습. 너무나 자신감 넘쳐 보였다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그런 노련함을 위해, 자아를 보호하기 위해 &apos;바라보는 나&apos;와 &apos;보여지는 나&apos; 를 분리해서 생각할 수록 어떤 &apos;타자&apos;에게 몰입하거나, 자신이 처한 상황에 분노 혹은 감동하거나, 특정 현실에 완벽하게 실재하는 순간을 경험하지 못한다고 한 부분에서 크게 공감했다. 내가 20 ~ 25살 까지 좋아하는 감정도 잘 못 느끼고 자기객관화만 엄청 해서 내 삶에 몰입이 잘 안됐다. 그냥 영화보는 것 같은 느낌이 들어서 굉장히 고통스러웠었다. 나 또한 나를 보호하기 위해서 그랬을까 하는 생각이 들었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;작가는 상호 존중하는 퍼포먼스를 통해 인간의 존엄성이 &apos;구성된다&apos; 리며 인간의 존엄성에 대한 생각을 밝혔다. 퍼포먼스라고 표현을 해서 처음에는 그냥 진심, 존중 없이 연기만 하면 되는 건가 하는 생각이 들었다. 하지만 읽다 보면 그 퍼포먼스는 서로가 욕망과 자존심을 가진 하나의 인격체라는 점을 깊이 인정한 상태에서의 연기라고 했고 그저 껍데기 뿐인 퍼포먼스는 또한 아니었다. 그런 점에서 퍼포먼스라는 표현이 마음에 들지 않았다. 메소드 연기 정도면 어떨까 하는 생각을 했었다. 하지만 이런 가벼운 표현이 나에게 한편으론 힘이 됐던 것 같다. 인간 존엄성이란 무엇인가에 관한 해답없는 질문에 종종 고통받았었는데 오히려 힘 빼고 가볍게 생각하게끔 된 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[인간 컴파일러가 되어보았다]]></title><description><![CDATA[인간 컴파일러가 되어보았다. 컴퓨터 구조 수업에서 간단한 c 코드를 어셈블리어로 바꾸는 과제를 했다. 4 개의 함수를 어셈블리어로 바꾸는 과제였다. QtSpim 이라고 하는 processor 시뮬레이션 프로그램을 사용해 test…]]></description><link>https://sunrisehouse.github.io/posts/9</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/9</guid><pubDate>Sun, 04 Apr 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;인간-컴파일러가-되어보았다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EA%B0%84-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EA%B0%80-%EB%90%98%EC%96%B4%EB%B3%B4%EC%95%98%EB%8B%A4&quot; aria-label=&quot;인간 컴파일러가 되어보았다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인간 컴파일러가 되어보았다.&lt;/h1&gt;
&lt;p&gt;컴퓨터 구조 수업에서 간단한 c 코드를 어셈블리어로 바꾸는 과제를 했다.&lt;/p&gt;
&lt;p&gt;4 개의 함수를 어셈블리어로 바꾸는 과제였다.&lt;/p&gt;
&lt;p&gt;QtSpim 이라고 하는 processor 시뮬레이션 프로그램을 사용해 test 와 디버깅을 해볼 수 있었다.&lt;/p&gt;
&lt;p&gt;코드는 &lt;a href=&quot;https://github.com/HanJungwoo1102/mips-compile-using-qtspim&quot;&gt;여기&lt;/a&gt; 있다.&lt;/p&gt;
&lt;h2 id=&quot;함수-or-procedure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98-or-procedure&quot; aria-label=&quot;함수 or procedure permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수 or procedure&lt;/h2&gt;
&lt;p&gt;함수가 호출되면 caller 에서 쓰던 레지스터를 스택에 저장해줘야한다.&lt;/p&gt;
&lt;p&gt;tN(t0, t1, t2, ...) 레지스터들은 스택에 저장해줄 필요가 없다.&lt;/p&gt;
&lt;p&gt;sN(s0, s1, s2, ...) 레지스터들은 스택에 저장해줘야한다.&lt;/p&gt;
&lt;p&gt;저장, 적재하는 연산 빠지는게 좋으니 가급적 tN 레지스터를 사용하는게 좋지 않을까??&lt;/p&gt;
&lt;p&gt;일단 나는 c 코드에서 변수에 해당하는 레지스터는 sN 레지스터를 사용했지만 tN 레지스터를 써도 상관없지 않을까 하는 생각이 들고 뭐가 맞는지는 교수님께 여쭤봐야겠다.&lt;/p&gt;
&lt;p&gt;그리고 함수가 끝나면 스택에 저장해놨던 caller 에서 쓰던 레지스터를 복구해줘야한다.&lt;/p&gt;
&lt;p&gt;마지막으로 jr $ra 를 통해 return address 로 돌아가야한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;재귀 함수를 짜면서 알게 된 것은 재귀함수는 함수가 쌓일 때 $ra 도 같이 쌓는데 (계속 return address 를 저장해야하니까) main 에서 부른 함수는 $ra 를 저장하지 않았다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;main 에서는 $ra 를 사용하지 않아도 되는 건가 생각 해 봐야겠다.
그럴리 없는데 코드 다시 짜야할 것 같은 느낌이...
그런데 교재 예제에서는 $ra 를 스택에 쌓지 않는다.
흠...&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;assembler&quot;&gt;&lt;pre class=&quot;language-assembler&quot;&gt;&lt;code class=&quot;language-assembler&quot;&gt;FUNC:
  addi $sp, $sp, -8                             
  sw $s1, 4($sp)
  sw $s0, 0($sp)

  ~ 함수 ~

  lw $s0, 0($sp)
  lw $s1, 4($sp)
  addi $sp, $sp, 8
  jr $ra&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;for&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#for&quot; aria-label=&quot;for permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;for&lt;/h2&gt;
&lt;p&gt;내가 작성한 for 문은 다음의 형식이 반복 됐다.&lt;/p&gt;
&lt;p&gt;맞기는 한데 이렇게 말고도 다른 방법으로도 작성할 수 있을 것 같은데 뭐가 맞는지 모르겠다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;assembler&quot;&gt;&lt;pre class=&quot;language-assembler&quot;&gt;&lt;code class=&quot;language-assembler&quot;&gt;
  mv $t0, $zero         # i = 0 (for 문 초기화)
FOR:
  slt ...
  beq ..., FOR_END,     # for 종료 조건

  ...

  addi $t0, $t0, 1      # i += 1 (1 증가)
  j FOR
FOR_END:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;이중-배열&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EC%A4%91-%EB%B0%B0%EC%97%B4&quot; aria-label=&quot;이중 배열 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이중 배열&lt;/h2&gt;
&lt;p&gt;이중 배열에 접근하는 것도 형식이 유사했다.&lt;/p&gt;
&lt;p&gt;배열 메모리 주소: $s0&lt;/p&gt;
&lt;p&gt;배열 크기: $s1 (NxN 배열일 때 N 에 해당)&lt;/p&gt;
&lt;p&gt;i: $s2&lt;/p&gt;
&lt;p&gt;j: $s3&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;assembler&quot;&gt;&lt;pre class=&quot;language-assembler&quot;&gt;&lt;code class=&quot;language-assembler&quot;&gt;  # array[i][j]

  mult $s2, $s1           
  mflo $t0                # $t0 = N * i
  add $t0, $t0, $s3       # $t0 = N * i + j                      
  sll $t4, $t4, 2         # $t0 = 4(N * i + j)
  add $t0, $t0, $s0       # $t0 = &amp;amp;array + 4(N * i + j)
  lw $t0, 0($t0)          # $t0 = array[i][j]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;의문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%98%EB%AC%B8&quot; aria-label=&quot;의문 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;의문&lt;/h2&gt;
&lt;p&gt;일단 t0 쓸지 s1 쓸지&lt;/p&gt;
&lt;p&gt;다른 함수 호출해도 보존이 돼야하는 정보는 sN 에 넣는야 하는 것 같다.&lt;/p&gt;
&lt;p&gt;이 생각이 맞나 궁금하고 그 외 다른 게 있나 궁금하다.&lt;/p&gt;
&lt;p&gt;그다음에 레지스터를 0으로 초기화하는 것을 add $s0, $s0, $zero 쓰면되나 $addi $s0, $s0, 0 쓰면 되나 mv 는 add 이용해서 하는 거라고 봤던 것 같기도 하고&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ReDet 논문 해석]]></title><description><![CDATA[ReDet 논문 리뷰 2021년 3월 13일에 나온 따끈따끈한 논문 해석을 해보겠습니다.
논문을 이번에 처음 읽어봤고 아는게 많이 없어서 이해 안된 부분이 많고 그런 부분은 메모를 해놨다.
뭔 말인지 진짜 모르겠다. Redet…]]></description><link>https://sunrisehouse.github.io/posts/8</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/8</guid><pubDate>Fri, 02 Apr 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;redet-논문-리뷰&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#redet-%EB%85%BC%EB%AC%B8-%EB%A6%AC%EB%B7%B0&quot; aria-label=&quot;redet 논문 리뷰 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ReDet 논문 리뷰&lt;/h1&gt;
&lt;p&gt;2021년 3월 13일에 나온 따끈따끈한 논문 해석을 해보겠습니다.
논문을 이번에 처음 읽어봤고 아는게 많이 없어서 이해 안된 부분이 많고 그런 부분은 메모를 해놨다.
뭔 말인지 진짜 모르겠다.&lt;/p&gt;
&lt;h2 id=&quot;redet&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#redet&quot; aria-label=&quot;redet permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Redet&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/2103.07733&quot;&gt;링크&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;제목: ReDet: A Rotation-equivariant Detector for Aerial Object Detection&lt;/p&gt;
&lt;p&gt;코드: &lt;a href=&quot;https://github.com/csuhan/ReDet&quot;&gt;깃허브 링크&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;연구 주제: Computer Vision and Pattern Recognition&lt;/p&gt;
&lt;h3 id=&quot;abstraction&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#abstraction&quot; aria-label=&quot;abstraction permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;abstraction&lt;/h3&gt;
&lt;p&gt;자연 이미지에서와는 다르게 항공 이미지에서의 객체는 임의의 방향성을 갖는다.
그러므로 항공 객체의 방향을 해석하기 위해서는 더 많은 정보가 필요하다.
일반적인 CNN 은 방향 변화를 명시적으로 모델링하지 않으므로 많은 양의 회전 증강 데이터가 필요합니다. (이미지 회전 시켜서 데이터로 쓰는 작업을 말하는 것 같다.)
그러므로 이 논문에서는 회전 등변성 및 회전 불변성을 명시 적으로 해석하는 Rotation-equivariant성 Detetor (ReDet)를 제안합니다.
네트워크에 회전 등변 네트워크를 detector 에 통합해서 방향을 정확하게 예측하고 모델 크기를 줄입니다.
회전 등변 기능을 기반으로 RoI의 방향에 따라 등변 기능에서 회전 불변 기능을 적응 적으로 추출하는 Rotation-invariant RoI Align (RiRoI Align)도 제시합니다.
여러 도전적인 항공 이미지 데이터 세트 DOTA-v1.0, DOTA-v1.5 및 HRSC2016에 대한 광범위한 실험을 통해 우리의 방법이 항공 물체 감지 작업에서 최첨단 성능을 달성 할 수 있음을 보여줍니다.
이전 최고의 결과와 비교하여 ReDet은 DOTA-v1.0, DOTA-v1.5 및 HRSC2016에서 각각 1.2, 3.5 및 2.6mAP를 확보하면서 매개 변수 수를 60 % 줄였습니다 (313Mb 대 121Mb)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;몰라요
&lt;ul&gt;
&lt;li&gt;회전 불변성&lt;/li&gt;
&lt;li&gt;RoI&lt;/li&gt;
&lt;li&gt;회전 등변성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;introduction&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#introduction&quot; aria-label=&quot;introduction permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h3&gt;
&lt;p&gt;제약이없는 항공 이미지에서 정확한 물체 감지를 달성하기 위해 대부분은 회전 불변 특징을 추출하는 데 전념합니다.
실제로 Rotated RoI (RRoI) wrapping 은 rotation-invariant features 를 추출하는 데 가장 흔히 사용된다.
하지만 일반적인 CNN feature 들과 wrapping 한 RRoI 는 rotation-invariant feature 를 만들어 낼 수 없다.
rotation invariance 은 더 큰 수용 능력을 가진 network, 더 많은 training 샘플들로 만들어진다.
CNN에 회전된 이미지를 주는 것은 원래 이미지의 rotation feature map 과 다르다. (??)
region features warped from regular CNN feature 는 종종 불안정하고 방햔 변화에 민감하다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CNN 에 RRoI wrapping 한 것은 한계가 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;최근에 나온 몇몇 방법은 CNN 을 더 큰 그룹으로 확장시키고 그룹 convolution 으로 rotation equivariance 를 얻는다.
이 방법의 feature map 은 부가적인 방향 channel 을 갖는다. (?? channel??)
하지만 보통의 rotation-equivariant features 에 쌓인 RRoI 를 직접 적용하는 것은 rotation-invariant features 를 만들지 못한다.
왜냐하면 orientation channels 는 여전히 어긋나도 2D 평면의 region features 만 감싸기 때문이다.
rotation-invariant features 을 정확하게 얻기 위해서 RRoI 의 방향에 따라서 orientation dimension of feature maps 을 조절해야한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;최근 나온 방법보다 더 좋은게 있는데 RRoI 방향에 따라 orientation dimension of feature maps 을 조절하는 것&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 논문에서 rotation-equivariant features 을 통해 rotation-invariant features 을 정확하게 추출하기 위한 ReDet 을 제시한다.
이 논문은 rotation-equivariant feature 추출과 rotation-invariant feature 추출 두 부분으로 이루어져있다.
우선 rotation-equivariant features 추출을 위해서 rotation-equivariant networks 를 backbone 과 통합한다.
하지만 직접적으로 RRoI warping 을 적용하는 것은 여전히 rotation-equivariant features 로 부터 rotation-invariant features 을 구할 수 없다.
그러므로 novel Rotation-invariant RoI Align (RiRoI Align) 를 제시한다.
이것은 spartial dimension 안 RRoI 경계 박스에 따른 region feature 를 감싼다.
또 orientation channels 과 feature interpolation 을 바꾸면서 orientation dimesion 안 align features 도 감싼다. (??)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;더 정확학게 추출하기 위해서 우리는 ReDet 을 제시한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;항공 이미지 data set DOTA 로 광범위한 실험을 수행했다.
HRSC2016 우리 방법의 효율성을 증명했다.
우리는 고품질 항공 객체 탐색을 위한 rotation equivariance 와 rotation invariance 를 해석하는 Redet 을 제시한다.
rotation equivariance 가 방향을 갖는 객체 탐색에 도입된 것은 이번이 처음이다.
우리는 또한 rotation-equivariant features 로부터 rotation-invariant features 을 추출하기 위해서 novel RiRoI Align 를 설계했다.
다른 RRoI warping 방법과는 다르게 RiRoI Align 은 spatial and orientation dimensions 에서 완전하게 rotation-invariant features
우리의 방법은 DOTA-v1.0, DOTA-v1.5 및 HRSC2016에서 각각 최첨단 80.10, 76.80 및 90.46 mAP를 달성합니다. (??)
이전의 최상의 결과와 비교하여 우리의 방법은 1.2, 3.5 및 2.6 mAP 향상을 얻었습니다. (??)
기준과 비교하여 우리의 방법은 일관되고 실질적인 개선을 보여 주며 매개 변수 수를 60 % 감소시킵니다 (313Mb 대 121Mb). (??)
또한, 우리의 방법은 더 나은 모델 크기 대 정확도 절충을 달성합니다. (??)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redet 제시와 novel RiRoI Align 설계를 했고 우리의 방법은 효과적이었다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;몰라요
&lt;ul&gt;
&lt;li&gt;회전 불변 feature (rotation invariant feature)&lt;/li&gt;
&lt;li&gt;RRoI wrapping&lt;/li&gt;
&lt;li&gt;convolution&lt;/li&gt;
&lt;li&gt;Feature map&lt;/li&gt;
&lt;li&gt;region feature&lt;/li&gt;
&lt;li&gt;networks&lt;/li&gt;
&lt;li&gt;backbone&lt;/li&gt;
&lt;li&gt;spartial dimension&lt;/li&gt;
&lt;li&gt;orientation channels&lt;/li&gt;
&lt;li&gt;feature interpolation&lt;/li&gt;
&lt;li&gt;align features&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;related-works&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#related-works&quot; aria-label=&quot;related works permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Related Works&lt;/h3&gt;
&lt;h4 id=&quot;1-oriented-object-detection&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-oriented-object-detection&quot; aria-label=&quot;1 oriented object detection permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(1) Oriented Object Detection&lt;/h4&gt;
&lt;p&gt;HBB 를 사용하는 대부분의 일반적인 객체 탐색과는 다르게 방향성을 갖는 객체 탐색은 OBB 를 사용한다.
OBB 는 큰 aspect ratio 을 가진 항공물체를 탐색하는데 필수적이다.
일반적인 객체 탐색 개발과 함께 방향성을 가진 객체 탐색에도 잘 설계된 방법이 제시돼왔다
임의의 방향성을 갖는 객체 탐색을 하기 위해서 몇몇 방법은 많은 rotated anchors 를 채택했다.
많은 rotated anchors 는 계산을 복잡하게 하지만 다양한 각도, 크기, aspect ratio 를 얻을 수 있다.
Ding 은 많은 anchor 를 피하기 위해 Horizontal RoIs (HRoIs) 를 RRoIs 로 변형시키기 위한 RoI Transformer 를 제시했다.
Gliding vertex 와 CenterMap 은 각각 방향이있는 객체를 정확하게 설명하기 위해 사각형과 마스크를 사용합니다.
R3Det and S2A-Net 는 horizontal receptive fields 와 rotated anchor 사이에 feature 를 정렬한다. (??)
DRN 은 dynamic feature selection과 refinement를 통해 방향성을 갖는 객체를 탐색한다. (??)
CSL은 불연속적인 경계 문제를 피하기 위해 angular prediction 을 분류로 간주했다.
최근에 몇몇 CenterNet 기반 방법은 작은 객체를 탐색하는데 이점을 보였다.
위의 방법은 객체 표현 또는 feature 표현을 개선하는데 전념한다.
반면에 우리의 방법은 backbone 부터 detection head 까지 feature 표현을 개선하는데 전념합니다.
특리 우리의 방법은 backbone 에서 rotation-equivariant features 을 만든다.
그것은 방향 변화를 모델링하는 복잡성을 상당히 감소시킨다.
detection head 에서 RiRoI Align 은 robust object localization 을 위해 rotation-invariant features 를 완벽히 추출한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;방향성을 가진 객체 탐색은 이렇게 발전해 왔고 우리의 방법은 여기서 한단계 더 나아갔다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;몰라요
&lt;ul&gt;
&lt;li&gt;HBB, OBB&lt;/li&gt;
&lt;li&gt;aspect ratio&lt;/li&gt;
&lt;li&gt;anchor&lt;/li&gt;
&lt;li&gt;Gliding vertex&lt;/li&gt;
&lt;li&gt;CenterMap&lt;/li&gt;
&lt;li&gt;R3Det&lt;/li&gt;
&lt;li&gt;S2A-Net&lt;/li&gt;
&lt;li&gt;horizontal receptive fields&lt;/li&gt;
&lt;li&gt;rotated anchor&lt;/li&gt;
&lt;li&gt;DRN&lt;/li&gt;
&lt;li&gt;dynamic feature selection&lt;/li&gt;
&lt;li&gt;dynamic feature refinement&lt;/li&gt;
&lt;li&gt;CSL&lt;/li&gt;
&lt;li&gt;angular prediction&lt;/li&gt;
&lt;li&gt;CenterNet&lt;/li&gt;
&lt;li&gt;detection head&lt;/li&gt;
&lt;li&gt;robust object localization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-rotation-equivariant-networks&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-rotation-equivariant-networks&quot; aria-label=&quot;2 rotation equivariant networks permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(2) Rotation-equivariant Networks&lt;/h3&gt;
&lt;p&gt;4-fold rotation equivariance 를 CNN 에 통합시키기 위해 group convolution 이 제안됐다.(??)
HexaConv 는 group convolution 을 6-fold rotation equivariance 로 확장시켰다.
더 많은 방향에서 rotation equivariance 을 얻기 위해 몇몇 방법은 interpolation
로 필터를 리셈플링한다. (??)
다른 방법들은 연속적인 도메인에서 equivariant features 을 만들기 위한 harmonics 을 필터로 사용한다. (??)
위의 방법은 점진적으로 더 큰 그룹으로 rotation equivariance 을 확장시켜서 classification 에서 유망한 결과를 얻었다.
반면 우리의 방법은 rotation-equivariant networks 을 객체 탐색기에 통합하여 detection 에서 유망한 결과를 얻었다.
rotation equivariance가 시스템적으로 방향성을 갖는 객체 탐색에 적용된 것은 처음이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rotation equivariance 를 다른데서도 썼는데 객체 탐색에 방향성을 갖는 객체 탐색에 적용되는 것은 우리가 처음이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;몰라요
&lt;ul&gt;
&lt;li&gt;group convolution&lt;/li&gt;
&lt;li&gt;4-fold rotation&lt;/li&gt;
&lt;li&gt;rotation equivariance&lt;/li&gt;
&lt;li&gt;HexaConv&lt;/li&gt;
&lt;li&gt;interpolation&lt;/li&gt;
&lt;li&gt;harmonics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-rotation-invariant-object-detection&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-rotation-invariant-object-detection&quot; aria-label=&quot;3 rotation invariant object detection permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(3) Rotation-invariant Object Detection&lt;/h3&gt;
&lt;p&gt;rotation-invariant feature 는 임의의 방향성을 갖는 객체를 탐색하는데 중요하다.
하지만 CNN 은 rotation variations 를 모델링 잘 못한다.
CNN 은 방향정보를 해석하기 위해 더 많은 parameter 가 있어야한다.
STN 과 DCN 은 명백하게 network 안 rotation 을 모델로 만든다.
그리고 방향성을 가진 객체에 적용돼왔다.
Cheng 은 정규화 강제성을 부여하는 rotation invariant layer 을 제시했다.
위의 방법들이 이미지 레벨에서 대량의 rotation invariance 를 얻을지라도 많은 트레이닝 샘플과 parameter 가 필요하다.
게다가 객체 탐색은 instance level rotation-invariant feature 가 필요하다.
그러므로 몇몇 방법은 RoI wrapping 을 RRoI wrapping 으로 확장시킨다.
RoI Transformer 은 HRoIs 를 RRoI 로 변화시키는 것을 배우고 region feature 을 rotated position sensitive RoI Align 로 감싼다.
하지만 일반적인 CNN 은 rotation equivariant 와는 다르다.
그러므로 심지어 RRoI Align 을 통해서도 우리는 rotation-invariant features 을 얻을 수 없다.
aforementioned 방법과는 다르게 우리의 방법은 s Rotation-invariant RoI Align (RiRoI Align) 을 제시한다.
이것은 rotation-equivariant features 로부터 rotation-invariant features 을 얻을 수 있다.
우리는 rotation-equivariant features 를 만들기 위해 rotation-equivariant networks 를 backbone 에 통합시킨다.
그러면 RiRoI Align 은 완전하게 rotation-equivariant features 로 부터 rotationinvariant features 을 추출한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;일단 rotation-equivariant networks 를 backbone 에 통합시켜서 rotation-equivariant features 를 얻고 RiRoI Align 으로 rotation invariant features 를 얻어낸다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;몰라요
&lt;ul&gt;
&lt;li&gt;STN&lt;/li&gt;
&lt;li&gt;DCN&lt;/li&gt;
&lt;li&gt;image level&lt;/li&gt;
&lt;li&gt;instance level&lt;/li&gt;
&lt;li&gt;aforementioned&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;preliminaries&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#preliminaries&quot; aria-label=&quot;preliminaries permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Preliminaries&lt;/h2&gt;
&lt;p&gt;아 모르겠다.&lt;/p&gt;
&lt;p&gt;(1) equivariance
(2) translation equivariance
(3) the rotationequivariant convolution
(4) the rotation transformation
(5) the rotation equivariance
(6) rotation-invariant feature&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rotation-invariant feature 를 얻기 위한 공식 유도&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;몰라요
&lt;ul&gt;
&lt;li&gt;group action&lt;/li&gt;
&lt;li&gt;translation equivalriant&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;rotation-equivariant-detector&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#rotation-equivariant-detector&quot; aria-label=&quot;rotation equivariant detector permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rotation-equivariant Detector&lt;/h2&gt;
&lt;p&gt;rotation equivariance 와 rotation invariance 를 해석하기 위한 ReDet 의 세부사항에 대해서 말해주겠다
우선  rotation equivariant networks 를 backbone 에 적용시켰다.
전에 말했듯이 직접적으로 RRoI Aligh 을 rotation-equivariant feature maps 에 적용하는 것은 rotation-invariant features 를 얻을 수 없다.
그러므로 novel Rotation-invariant RoI Align (RiRoI Align) 을 설계했다.
rotationequivariant feature maps 으로 RoI-wise rotation-invariant features 를 얻을 수 있습니다.
전반적인 아키텍쳐는 Fig.3 입니다.
한 인풋 이미지를 rotation-equivariant backbone 에 준다.
그리고 HRoIs 를 만들기 위해 RPN 채택한다.
RPN 은 HRoIs 를 RRoIs 로 바꾸는 RoI Transformer 를 따른다. (??)
마침내 RiRoI Align 은 rotation-invariant features 을 추출하기 위해 채택됐다
RoI-wise classification 와 bounding box regression 을 위해&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;아는게 없어서 계속 같은 말 하는 것 처럼 느껴진다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;몰라요
&lt;ul&gt;
&lt;li&gt;HRoIs&lt;/li&gt;
&lt;li&gt;RoI Transformer&lt;/li&gt;
&lt;li&gt;RPN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-rotation-equivariant-backbone&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-rotation-equivariant-backbone&quot; aria-label=&quot;1 rotation equivariant backbone permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(1) Rotation-equivariant Backbone&lt;/h3&gt;
&lt;p&gt;현대 객체 탐색은 종종 semantic information 을 갖는 deep features 을 자동적으로 추출하기 위해 deep CNN 을 backbone 으로 채택한다.
예를 들어 ResNet with Feature Pyramid Network (FPN)
우리 또한 ResNet을 시작점으로 채택하고  rotation-equivariant backbone 을 구현했다.
Rotationequivariant ResNet 인 ReResNet 라고 부른다.
우리는 rotation-equivariant networks 로 backbone 의 모든 레이어를 재구현했다.
그 네트워크는 convolution, pooling, nomalization, non linearlities 를 포함하는 e2cnn 에 기반해서 이루어져있다.
computational budget 를 고려했을 때 ReResNet 와 ReFPN 은 오직 discrete group 에만 등변한다.
Fig 3 에서 보이는 것처럼 우리는 rotation-equivariant feature maps 을 만들기 위해 rotation-equivariant backbone 에 이미지를 줬다.
(??)
평범한 backbone 과 비교했을 때, rotation equivariant backbone 은 다음과 같은 이점이 있다.
더 높은 가중치의 공유.
rotation-equivariant feature maps 는 부가적인 방향 차원을 갖고있다.
다양한 방향으로부터의 feature 들은 종종 다른 rotation transformation 과 같은 필터를 공유한다.
풍부한 방향 정보.
고정된 방향을 갖는 인풋 이미지들에게 rotation-equivariant backbone 은 다양한 방향으로 부터의 feature 를 만들 수 있다.
이것은 정확한 방향 정보가 필요한 방향성을 갖는 객체 탐색에 중요하다.
작은 모델 사이즈.
baseline과 비교해서 우리는 backbone 을 설계할 때 두 가지 선택지가 있었다.
비슷한 computation 이냐 비슷한 parameters 냐 하는.
우리는 baseline 과 비슷한 computation 을 유지했다.
예를 들어 같은 output channel 를 지키는.
the rotation weight sharing 때문에 우리의 rotation-equivariant backbone 은 모델 사이즈를 대략 1/N 정도로 엄청나게 감소 시킬 수 있었다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rotation-equivariant Backbone 어떻게 만들었는지 그리고 그 효과&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;몰라요
&lt;ul&gt;
&lt;li&gt;semantic information&lt;/li&gt;
&lt;li&gt;ResNet with Feature Pyramid Network (FPN)&lt;/li&gt;
&lt;li&gt;e2cnn&lt;/li&gt;
&lt;li&gt;convolution, pooling, nomalization, non linearlities&lt;/li&gt;
&lt;li&gt;computational budget&lt;/li&gt;
&lt;li&gt;discrete&lt;/li&gt;
&lt;li&gt;output channel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2--rotation-invariant-roi-align&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2--rotation-invariant-roi-align&quot; aria-label=&quot;2  rotation invariant roi align permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(2)  Rotation-invariant RoI Align&lt;/h3&gt;
&lt;p&gt;Sec. 3 에 소개된 것처럼 우리는 RRoI warping 으로 감싸진 rotation equivariant feature maps 로부터 rotation-invariant RoI features 를 얻을 수 있었다.
하지만 일반적인 RRoI wrapping 은 spartial dimension 에서 feature 들을 정렬시킬 수 없다.
그러므로 우리는 완전하게 rotation-invariant features 를 얻기 위해 RiRoI Align 을 제시한다.
Fig 3 에 보여지는 것 처럼 RiRoI Align 는 두 부분으로 나뉜다.
Spatial alignment.
spatial alignment 는 rotation-invariant
region features fR 를 만들기위해 feature maps f 로부터 감싼다.
Orientation alignment.
다양한 방향에서의 RRoIs 가 완전하게 rotation-invariant features 를 만든다는 것을 보장하기 위해 우리는 방향 차원에서 방향 정렬을 수행한다.
특히 output region feature 에서, 우리는 방향 정렬을 공식화했다.
(공식)
(???)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;공식을 이용한 유도&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RRoI Align+MaxPool 와의 비교.
RoI features 를 감싸고 방향 차원을 maxpooling 하는 rotationinvariant features 을 얻는 다른 접근 법이다.
orientation pooling operation 은 종종 classification 일을 하는 데에 사용된다.
feature map 의 각 location 에서 이것은 오직 가장 강한 응답을 하는 방향만 보존한다.
하지만 모든 방향으로부터의 응답은 객체 인식에 필수적이다.
우리의 RiRoI Align에서 모든 방향으로부터의 feature 는 보존되고 정렬된다.
우리는 RiRoI Align 의 이점을 보여주기 위해 실험을 진행했다. (Sec 5)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;다른 거는 가장 반응이 강한 방향만 사용하는데 우리는 모든 방향 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;몰라요
&lt;ul&gt;
&lt;li&gt;orientation alignment in orientation dimension&lt;/li&gt;
&lt;li&gt;maxpooling&lt;/li&gt;
&lt;li&gt;orientation pooling operation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;experiments-and-analysis&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#experiments-and-analysis&quot; aria-label=&quot;experiments and analysis permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Experiments and Analysis&lt;/h2&gt;
&lt;h3 id=&quot;1-datasets&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-datasets&quot; aria-label=&quot;1 datasets permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(1) Datasets&lt;/h3&gt;
&lt;p&gt;DOTA 는 항공 이미지에서 방향성을 갖는 객체 탐색을 위한 가장 큰 데이타셋이다.
DOTA-v1.0 과 DOTA-v1.5 두 버전이 있다.
DOTA-v1.0 은 2806 장의 항공 이미지
사이즈 800x800 ~ 4000x4000
instance 188,282 개
15개의 common category (plane, baseball diamond, bridge, ...)
DOTA-v1.5 는 새로운 카테고리와 함께 DOAI Challenge 2019 때문에 나왔다.
더 극도로 작은 instance - 402,089 개의 instance
DOTA-v1.5 가 더 challenging 하지만 트레이닝 동안에 더 안정돼다.
training 을 위해 training 과 validation set 둘 다를 썼다.
testing 을 위해 test set 를 썼다.
우리는 원래 이미지를 a stride of 824 를 가진 1024 x 1024 patch 로 잘랐다.
Random horizontal flipping 은 over fitting 을 피하기 위해 사용됐다.
또 다른 trick 은 이용되지 않았다.
다른 방법들과 공평한 비교를 위해 우리는 세 scale 에서 multi scale 데이터를 준비했다.
그리고 testing 과 trainging 을 위한 random rotation 을 준비했다
HRSC2016 는 challenging 배 데이터셋이다.
OBB annotations 가지고 있다.
1061 개의 항공 이미지.
사이즈는 300x300 ~ 1500x900
training 436 개, validation 181 개 그리고 test 444 개의 이미지가 있다.
training 을 위해 training 과 validation set 사용
testing 을 위해 testing set 사용
모든 이미지는 aspect ratio 변화 없이 800 x 512 로 리사이징 됐다.
Random horizontal flipping 이 트레이닝 동안 적용됐다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;몰라요
&lt;ul&gt;
&lt;li&gt;multi scale 데이터&lt;/li&gt;
&lt;li&gt;instance&lt;/li&gt;
&lt;li&gt;validation&lt;/li&gt;
&lt;li&gt;stride&lt;/li&gt;
&lt;li&gt;Random horizontal flipping&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-implementation-details&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-implementation-details&quot; aria-label=&quot;2 implementation details permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(2) Implementation Details&lt;/h3&gt;
&lt;p&gt;ImageNet pretrain.
보통의 ResNet 에서, 우리는 pytorch 로 직접적으로 ImageNet pretrained 모델을 사용한다.
ReResNet 에서, 우리는 mmclassification 을 기반으로 구현했다.
우리는 초기 learning rate 0.1 로 ImageNet-1K 에서 ReResNet 을 훈련했다.
모든 모델은 100 epochs 로 훈련됐다.
learning rate 는 30, 60, 90 epoch 에서 10으로 나눠졌다.
batch size 는 256 으로 설정됐다.&lt;/p&gt;
&lt;p&gt;Fine-tuning on detection.
우리는 기본 method 의 backbone 으로 FPN 과 함께 ResNet 를 선택했다.
ResNet 과 함께하는 ReResNet 는 우리가 제시한 ReDet 의 backbone 으로 선택됐다.
RPN 을 위해 우리는 피라미드 레벨의 각 location 마다 15 anchor 를 설정했다.
R-CNN 을 위해 우리는 트레이닝을 위한 1:3 positive to negative ratio 로 512 RoIs 를 샘플로 만들었다.
테스팅을 위해 우리는 NMS 전에 10000 RoIs 를 그리고 NMS 후에 2000 RoIs 를 선택했다.
우리는 mmdetection 과 같은 트레이닝 스케쥴을 선택했다.
SGD optimizer 는 초기 learning rate 0.01 로 선택됐다.
learning rate 는 매 decay 단계 마다 10으로 나뉘어졌다.
momentum 은 0.9 이다.
weight edcay 는 0.0001 이다.
우리는 모든 모델을 DOTA 에는 12 epochs 로 HRSC2016 는 36 epochs 로 훈련시켰다.
우리는 트레이닝을 위해 total batch size 8 로 4V100 GPUs 를 사용했다.
inference 를 위해 single V100 GPU 를 사용했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;몰라요
&lt;ul&gt;
&lt;li&gt;ImageNet pretrain&lt;/li&gt;
&lt;li&gt;epoch&lt;/li&gt;
&lt;li&gt;RPN&lt;/li&gt;
&lt;li&gt;R-CNN&lt;/li&gt;
&lt;li&gt;positive to negative ratio&lt;/li&gt;
&lt;li&gt;mmdetection&lt;/li&gt;
&lt;li&gt;decay step&lt;/li&gt;
&lt;li&gt;inference&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-ablation-studies&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-ablation-studies&quot; aria-label=&quot;3 ablation studies permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(3) Ablation Studies&lt;/h3&gt;
&lt;p&gt;우리는 우리가 제시한 방법의 효율성을 평가하기 위해 DOTA-v1.5 test set 에서 일련의 ablation experiments.
우리가 일바넞ㄱ인 ResNet+FPN, backbone 으로 RRoI Align, 기본 method 로 RoI warping method 를 사용했단 것에 주목해라.
Rotation-equivariant backbone.
우리는 다른 세팅아래에 ReResNet50+ReFPN 로 rotation-equivariant backbone 의 효율성을 평가했다.
Tab 1 에서 보여지는 것처럼, ResNet50 과 비교했을 때 ResNet50 은 parameter 감소 때문에 더 낮은 classification accuracy 를 갖는다.
하지만 더 높은 detection mAP 를 얻는다.
우리는 cyclic group C8 아래에 있는 backbone 이 더 나은 accuracy-parameter-trade-off 를 얻는다는 거을 알아냈다.
게다가 우리는 Tab 2 에서처럼 ReResNet+ReFPN 를 우리의 방법을 확장시켰다.
Faster R-CNN OBB 와 ReResNet50+ReFPN 와 함께한 RetinaNet OBB 둘 다 이거의 counterpart 를 능가했다.&lt;/p&gt;
&lt;p&gt;Effectiveness of RiRoI Align.
Tab 3 에서 보이는 것처럼 RRoI Align 와 비교했을 때, RiRoI Align 은 방향 정렬 메카니즘 때문에 상당한 개선을 보인다.
RRoI Align+MaxPool 이 mAP 에서 상당히 떨어졌기 때문에 orientation pooling 이 방향성을 갖는 객체 탐색에 바람지하기 못하단걸 알 수 있다.
l = 2 interpolation 으로 한 RiRoI Align 은 가장 높은 66.86 mAP 을 얻었고 RRoI Align 보다 0.87 mAP 더 개선됐다.
게다가 l = 4 interpolation 으로 한 RiRoI Align 이 오직 0.33 mAP 만을 얻었다는 것을 알아냈다.
그 이유는 아마 너무 많은 interpolations 가 equivariant property 와 안에 방향 사이에 relation 을 망쳤기 때문일 것이다.&lt;/p&gt;
&lt;p&gt;Comparison with rotation augmentation.
다른 관점에서, 우리의 방법은 한 방향에서 학습하면 다른 방향에 적용할 수 있는 특별한 in-network rotation augmentation 으로 보여질 수 있다.
대조적으로 rotation augmentation 은 더 많은 방향을 갖는 샘플을 만들어서 network 를 강화시킨다.
그리고 종종 더 많은 시간을 필요로 한다.
Tab 4 에서 보이는 것처럼 비록 우리의 방법이 1x schedule 아래 rotation augmented 된 baseline 에 지나지 않을 지라도, 우리의 ReDet (비슷한 양의 parameter 를 보존하는) 는 오직 18% 추가 training time 으로 2.59mAP 개선을 보여줬다.
게다가 rotation augmentation 을 한 2xbaseline 은 ReDet 보다 0.68 더 높다.
하지만 이것은 두 배의 시간을 필요로 한다.&lt;/p&gt;
&lt;p&gt;Performance on other datasets.
우리가 제시한 방법의 일반화를 증명하기 위해 우리는 ReDet on DOTA-v1.0 and HRSC2016 의 수행을 측정했다.
Tab5 에서 보이는 것처럼 baseline 과 비교해서 ReDet 은 양쪽에서 더 나은 performance 를 보인다.
게다가 ReDet 은 AP75 와 mAP 에서 상당히 개선됐다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;몰라요
&lt;ul&gt;
&lt;li&gt;cyclic group&lt;/li&gt;
&lt;li&gt;mAP&lt;/li&gt;
&lt;li&gt;interpolations&lt;/li&gt;
&lt;li&gt;inner relation between orientations&lt;/li&gt;
&lt;li&gt;in-network rotation augmentation&lt;/li&gt;
&lt;li&gt;localization capabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-comparisons-with-the-state-of-the-art&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-comparisons-with-the-state-of-the-art&quot; aria-label=&quot;4 comparisons with the state of the art permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(4) Comparisons with the State-of-the-Art&lt;/h3&gt;
&lt;p&gt;Results on DOTA-v1.0.
Tab6 에서 보이는 것처럼 우리는 우리의 ReDet 을 DOTA-v1.0 OBB Task 상에서 다른 좋은 방법들과 비교했다.
벨과 호루라기 없이 우리의 signle-scale model 은 76.25mAP 를 얻었다.
모든 single-scale model 을 능가하고 대부분의 multi-scale models 능가한다.
제한된 데이터 augmentation 으로 우리의 방법은 모든 데이터셋에서 80.10 mAP 를 얻었고 12/15 category 중 1, 2등을 했다.&lt;/p&gt;
&lt;p&gt;Results on DOTA-v1.5.
DOTA-v1.0 과 비교했을 때 DOTA-v1.5 는 객체 탐색에 어려움을 증가시키는 많은 극도로 작은 instance 를 포함한다.
우리는 Tab 7 에서 DOTA-v1.5 에 대한 OBB, HBB 결과를 보고했다.
signle-scale data 에서 우리의 방법은 66.86 oBB mAP 오 67.77 HBB mAP 를 얻었다.
RetinaNet OBB, Faster R-CNN OBB, Mask R-CNN and HTC 를 능가한다.
특히 small instance 와 큰 scale variation 을 갖는 category 에서 우리의 방법은 더 잘 수행된다.
게다가 Fig 2 에서 보이는 것처럼 우리의 ReDet 은 더 나은 parameter vs accuracy trade off 를 얻었다.
이전 OWSR 에 의한 최고의 결과와 비교했을 때, 우리의 multi-scale model 은 최고의 성능을 달성했다.
대략 76.80 oBB mAP 와 78.08 HBB mAP.
ReDet 과 baseline 과의 질적 비교는 Fig 4 에 있다.&lt;/p&gt;
&lt;p&gt;Result on HRSC2016.
HRSC2016 는 많은 얇고 긴 배 instance 를 포함한다.
우리는 Tab 8 에서 RedDet 과 다른 최신 방법과 비교했다.
우리의 방법은 최신 성능을 달성했다.
VOC2007, VOC2012 아래에서 각각 90.46 mAP 와 97.63 mAP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;몰라요
&lt;ul&gt;
&lt;li&gt;signle-scale model, multi-scale models&lt;/li&gt;
&lt;li&gt;VOC2007, VOC2012&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;conclusions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conclusions&quot; aria-label=&quot;conclusions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;ReDet 두 부분으로 이루어져있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;rotation-equivariant backbone&lt;/li&gt;
&lt;li&gt;RiRoI Align&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;전자는 rotation-equivariant features 만든다
후자는 rotation-equivariant features 로 rotation-invariant features 얻는다.&lt;/p&gt;
&lt;p&gt;DOTA 와 HRSC2016 에서 진행한 광범위한 실험은 이 방법이 효과적임을 보인다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[YOLO v4 를 써보자!]]></title><description><![CDATA[YOLO v4 를 이용해 training…]]></description><link>https://sunrisehouse.github.io/posts/7</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/7</guid><pubDate>Sun, 28 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;yolo-v4-를-이용해-training-을-해보자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#yolo-v4-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-training-%EC%9D%84-%ED%95%B4%EB%B3%B4%EC%9E%90&quot; aria-label=&quot;yolo v4 를 이용해 training 을 해보자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;YOLO v4 를 이용해 training 을 해보자&lt;/h1&gt;
&lt;p&gt;프로젝트를 하나 하게 됐다. 영상 속 물체가 무엇인지 알아내야한다. 현재 알고있는 인공지능에 대해서 알고있는 정보는 알파고가 이세돌을 이겼다 정도다. 하지만 뭐 어떠냐. 구글에 다 나와있겠지. 가보자.&lt;/p&gt;
&lt;h2 id=&quot;yolo-가-무엇인가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#yolo-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;yolo 가 무엇인가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;YOLO 가 무엇인가&lt;/h2&gt;
&lt;p&gt;YOLO 는 영상 속 객체를 찾아내는 모델이라고한다. 하지만 계속 모델은 너무 이곳 저곳에서 많이 쓰이는 단어다. 뭔지 잘 모르겠다. 내가 이해한 바로는 학습을 시키는 방법인데 좀 더 넓은 범주?? YOLO 는 버전 1 ~ 버전 5 까지 나왔다고 한다. 버전 5는 copyright?? 가 있다 그래서 버전4를 사용하기로 했다. 논문을 열어봤지만 너무 읽기가 싫게 생겼기 때문에 패스했기 때문에 yolo 가 무엇인지 알려줄 수 없습니다.&lt;/p&gt;
&lt;h2 id=&quot;진행-순서&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A7%84%ED%96%89-%EC%88%9C%EC%84%9C&quot; aria-label=&quot;진행 순서 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;진행 순서&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;영상 데이터 모으기 -&gt; 라벨링 -&gt; argumentation&lt;/li&gt;
&lt;li&gt;학습!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;학습&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%99%EC%8A%B5&quot; aria-label=&quot;학습 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;학습&lt;/h2&gt;
&lt;p&gt;찾아보니 내 생각에 yolo v4 모델로 학습을 시키기 위해서 논문을 읽고 그 모델대로 학습을 시킬 구현체 (프로그램 or 코드) 가 필요한 것 같다. 내가 그 것을 짧은시간 내에 할 수 없으니 누가 구현해 놓은것을 가져다 써야하는데 그게 바로 &lt;a href=&quot;https://github.com/AlexeyAB/darknet&quot;&gt;darknet&lt;/a&gt; 인 것 같다. 트레이닝은 data 를 넣으면 weight 가 떨어지는 것 같다. 그 weight 로 test 를 하면 되는 것 같다.&lt;/p&gt;
&lt;h3 id=&quot;darknet&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#darknet&quot; aria-label=&quot;darknet permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Darknet&lt;/h3&gt;
&lt;p&gt;하라는 대로 데이터도 만들어 놓고 라벨도 해놓고 설정해놨다. 하지만 어려운 것은 cfg 설정파일이었다. 나는 yolo-obj.cfg 파일을 만들어야 했다. 이미 darknet 에서 제공하는 configuration 파일이 있어서 그 것을 살짝 손봐서 사용하면 됐다. 하지만 뭘 수정 해야하는지 몰라서 애 먹었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;batch&lt;/li&gt;
&lt;li&gt;subdivisions&lt;/li&gt;
&lt;li&gt;max_batches&lt;/li&gt;
&lt;li&gt;steps&lt;/li&gt;
&lt;li&gt;network size&lt;/li&gt;
&lt;li&gt;classes&lt;/li&gt;
&lt;li&gt;filters&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Gaussian_yolo 레이어를 쓰면 뭐를 하라는데 레이어가 뭔지 모르지만 일단 안쓸거 같아서 넘겼다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[인공지능 개론]]></title><description><![CDATA[인공지능 개론 2021년…]]></description><link>https://sunrisehouse.github.io/posts/2</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/2</guid><pubDate>Tue, 09 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;인공지능-개론&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5-%EA%B0%9C%EB%A1%A0&quot; aria-label=&quot;인공지능 개론 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인공지능 개론&lt;/h1&gt;
&lt;p&gt;2021년 1학기 인공지능 개론 수업을 듣고 나름의 정리를 해보겠다는 생각으로 본 글을 작성하게 됐다.&lt;/p&gt;
&lt;p&gt;이 수업은 우선 간단한 인공지능 소개로 시작을 했다.&lt;/p&gt;
&lt;p&gt;그 후 컴퓨터가 문제를 해결하기 위해서 사용되는 기법, 컴퓨터가 추론을 하기위해서 사용되는 기법에 대해서 배운다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-인공지능-소개&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5-%EC%86%8C%EA%B0%9C&quot; aria-label=&quot;1 인공지능 소개 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 인공지능 소개&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;인공지능은 학습이나 문제 해결 같은 사람의 인지능력을 모방하는 기계이다. (인간처럼 생각한다 X)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;데이터가 많아지고 모델 크기가 커짐에 따라서 문제 해결의 정확성이 증가하게 됐다.&lt;/p&gt;
&lt;p&gt;인공지능 &gt;&gt; 머신러닝 &gt;&gt; 딥러닝&lt;/p&gt;
&lt;h3 id=&quot;ai-요소-기술&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ai-%EC%9A%94%EC%86%8C-%EA%B8%B0%EC%88%A0&quot; aria-label=&quot;ai 요소 기술 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AI 요소 기술&lt;/h3&gt;
&lt;p&gt;다음에 대해서 배울 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;탐색 (search)&lt;/li&gt;
&lt;li&gt;Knowledge Representation&lt;/li&gt;
&lt;li&gt;Reasoning&lt;/li&gt;
&lt;li&gt;Machine Learning&lt;/li&gt;
&lt;li&gt;Planning&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-탐색과-최적화-search-and-optimization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%83%90%EC%83%89%EA%B3%BC-%EC%B5%9C%EC%A0%81%ED%99%94-search-and-optimization&quot; aria-label=&quot;2 탐색과 최적화 search and optimization permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 탐색과 최적화 (Search and Optimization)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;탐색은 왜 하는 것인가. 최적해를 찾기 위해서라고 생각을 한다. 경우의 수가 적은 경우 일일히 다 찾아보면 최적해를 찾을 수 있지만 만약 경우의 수가 너무나 많고 시간적 제약이 있는 경우 그나마 최적에 가까운 해를 구하기 위해서는 여러가지 기술들이 필요하고 이 곳에서 몇 가직 기술에 대해서 배웠다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;State Space (Search Space): 초기 상태 ~ 문제 해결 상태 까지의 모든 상태들의 집합&lt;/p&gt;
&lt;p&gt;State Space Graph: state space 에서 각 행동에 따른 상태의 변화를 나타내는 그래프&lt;/p&gt;
&lt;h3 id=&quot;search-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#search-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;search 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Search 방법&lt;/h3&gt;
&lt;p&gt;Blind Search&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Depth First Search&lt;/li&gt;
&lt;li&gt;Breadth First Search&lt;/li&gt;
&lt;li&gt;Iterative Deepening Search&lt;/li&gt;
&lt;li&gt;Bidirectional Search&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Heuristic Search&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hill Climbing&lt;/li&gt;
&lt;li&gt;Best First Search(최상 우선 탐색)&lt;/li&gt;
&lt;li&gt;A* Search&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;게임 속 Search&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Game State Tree&lt;/li&gt;
&lt;li&gt;Mini - Max 알고리즘&lt;/li&gt;
&lt;li&gt;α-β Prunning&lt;/li&gt;
&lt;li&gt;Monte Carlo Tree Search&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;optimization-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#optimization-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;optimization 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optimization 방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;조합 최적화&lt;/li&gt;
&lt;li&gt;Function Optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;3-지식-표현과-추론&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%A7%80%EC%8B%9D-%ED%91%9C%ED%98%84%EA%B3%BC-%EC%B6%94%EB%A1%A0&quot; aria-label=&quot;3 지식 표현과 추론 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 지식 표현과 추론&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;이 절은 추론을 프로그래밍적으로 어떻게 구현했는가에 대한 내용이다. 추론을 위해서는 기초가 되는 지식이 필요하다. 그럼 그 지식은 어떻게 구현했는가 부터 설명을 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;4-기계-학습&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EA%B8%B0%EA%B3%84-%ED%95%99%EC%8A%B5&quot; aria-label=&quot;4 기계 학습 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 기계 학습&lt;/h2&gt;
&lt;h2 id=&quot;5-법-제도적-이슈&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EB%B2%95-%EC%A0%9C%EB%8F%84%EC%A0%81-%EC%9D%B4%EC%8A%88&quot; aria-label=&quot;5 법 제도적 이슈 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 법, 제도적 이슈&lt;/h2&gt;
&lt;h2 id=&quot;6-neural-network&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-neural-network&quot; aria-label=&quot;6 neural network permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. Neural Network&lt;/h2&gt;
&lt;h2 id=&quot;7-강화-학습&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EA%B0%95%ED%99%94-%ED%95%99%EC%8A%B5&quot; aria-label=&quot;7 강화 학습 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 강화 학습&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[프로그래밍 언어]]></title><description><![CDATA[프로그래밍 언어 2021년 1학기 프로그래밍 언어 수업을 듣고 나름의 정리를 해보겠다는 생각으로 본 글을 작성하게 됐다. 너무나도 어렵게 다가온 수업이었다. 영어 듣기도 어렵고 설명도 어려워서 이해가 잘 되지 않아서 고생을 많이 하고있다.…]]></description><link>https://sunrisehouse.github.io/posts/3</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/3</guid><pubDate>Tue, 09 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;프로그래밍-언어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4&quot; aria-label=&quot;프로그래밍 언어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로그래밍 언어&lt;/h1&gt;
&lt;p&gt;2021년 1학기 프로그래밍 언어 수업을 듣고 나름의 정리를 해보겠다는 생각으로 본 글을 작성하게 됐다. 너무나도 어렵게 다가온 수업이었다. 영어 듣기도 어렵고 설명도 어려워서 이해가 잘 되지 않아서 고생을 많이 하고있다.&lt;/p&gt;
&lt;h2 id=&quot;1-introduction-to-programming-languages-and-issues&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-introduction-to-programming-languages-and-issues&quot; aria-label=&quot;1 introduction to programming languages and issues permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Introduction to Programming Languages and Issues&lt;/h2&gt;
&lt;p&gt;좋은 언어의 특징&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Orthogonality&lt;/li&gt;
&lt;li&gt;Support for abstraction&lt;/li&gt;
&lt;li&gt;Natural for various applications&lt;/li&gt;
&lt;li&gt;Easy of program verification and debugging&lt;/li&gt;
&lt;li&gt;Portability and Translation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;프로그래밍 언어 모델&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Imperative Languages(Command Driven Languages)&lt;/li&gt;
&lt;li&gt;Object Based Languages&lt;/li&gt;
&lt;li&gt;Applicative Languages(Functional Language)&lt;/li&gt;
&lt;li&gt;Rule-based Languages(Logical Languages)&lt;/li&gt;
&lt;li&gt;Hybrid Languages : Python&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-fundamental-elements-in-programming-languages&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-fundamental-elements-in-programming-languages&quot; aria-label=&quot;2 fundamental elements in programming languages permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Fundamental Elements in Programming Languages&lt;/h2&gt;
&lt;p&gt;프로그래밍 언어의 세가지 중요한 요소&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;li&gt;Operations&lt;/li&gt;
&lt;li&gt;Control&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;data&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#data&quot; aria-label=&quot;data permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Data&lt;/h3&gt;
&lt;p&gt;data object&lt;/p&gt;
&lt;p&gt;Data object 와 연관된 특성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name&lt;/li&gt;
&lt;li&gt;Type&lt;/li&gt;
&lt;li&gt;Location&lt;/li&gt;
&lt;li&gt;Value&lt;/li&gt;
&lt;li&gt;Component&lt;/li&gt;
&lt;li&gt;Operations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Variable, Constant&lt;/p&gt;
&lt;p&gt;Data type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A class of data objects together with a set of operations for creation and manipulation&lt;/li&gt;
&lt;li&gt;Classes of data type
&lt;ul&gt;
&lt;li&gt;Primitive data type&lt;/li&gt;
&lt;li&gt;User-defined data type&lt;/li&gt;
&lt;li&gt;Self-modifying types&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Specification
&lt;ul&gt;
&lt;li&gt;Attributes&lt;/li&gt;
&lt;li&gt;Values&lt;/li&gt;
&lt;li&gt;Operations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation
&lt;ul&gt;
&lt;li&gt;Storage representation&lt;/li&gt;
&lt;li&gt;Algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elementary Data type&lt;/p&gt;
&lt;p&gt;Polymorphic operations&lt;/p&gt;
&lt;p&gt;Type Checking&lt;/p&gt;
&lt;p&gt;Volatile Type&lt;/p&gt;
&lt;p&gt;Type safe system&lt;/p&gt;
&lt;p&gt;Type inference&lt;/p&gt;
&lt;p&gt;Type conversion&lt;/p&gt;
&lt;p&gt;Integers&lt;/p&gt;
&lt;p&gt;Floating point real numbers&lt;/p&gt;
&lt;p&gt;Fixed-point real numbers&lt;/p&gt;
&lt;p&gt;Enumeration&lt;/p&gt;
&lt;p&gt;Characters&lt;/p&gt;
&lt;h2 id=&quot;3-advanced-topics-in-programming-languages&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-advanced-topics-in-programming-languages&quot; aria-label=&quot;3 advanced topics in programming languages permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Advanced Topics in Programming Languages&lt;/h2&gt;
&lt;h2 id=&quot;4-programming-languages&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-programming-languages&quot; aria-label=&quot;4 programming languages permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Programming Languages&lt;/h2&gt;
&lt;h2 id=&quot;5-grammar&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-grammar&quot; aria-label=&quot;5 grammar permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Grammar&lt;/h2&gt;
&lt;h2 id=&quot;6-compilation-techniques&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-compilation-techniques&quot; aria-label=&quot;6 compilation techniques permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. Compilation Techniques&lt;/h2&gt;
&lt;h2 id=&quot;7-runtime-environment&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-runtime-environment&quot; aria-label=&quot;7 runtime environment permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. Runtime Environment&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[선형대수학]]></title><description><![CDATA[선형대수학 1. Linear Equations in Linear Algebra linear eqaution coefficient: 계수 consistent/inconsistent: 해 있다 / 없다 coefficient matrix…]]></description><link>https://sunrisehouse.github.io/posts/5</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/5</guid><pubDate>Tue, 09 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;선형대수학&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%A0%ED%98%95%EB%8C%80%EC%88%98%ED%95%99&quot; aria-label=&quot;선형대수학 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;선형대수학&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-linear-equations-in-linear-algebra&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-linear-equations-in-linear-algebra&quot; aria-label=&quot;1 linear equations in linear algebra permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Linear Equations in Linear Algebra&lt;/h2&gt;
&lt;p&gt;linear eqaution&lt;/p&gt;
&lt;p&gt;coefficient: 계수&lt;/p&gt;
&lt;p&gt;consistent/inconsistent: 해 있다 / 없다&lt;/p&gt;
&lt;p&gt;coefficient matrix: 계수로만 이루어진 행렬&lt;/p&gt;
&lt;p&gt;augmented matrix: 결과값도 붙은 행렬&lt;/p&gt;
&lt;p&gt;row operation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;replacement: 다른 항 곱해서 더한거&lt;/li&gt;
&lt;li&gt;interchange: 행 위치 변경&lt;/li&gt;
&lt;li&gt;scaling: 상수곱 (non zero)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;row equivalent: row operation 으로 만들 수 있으면&lt;/p&gt;
&lt;p&gt;augmented matrix 에서 row equivalence 하면 같은 해 갖는다.&lt;/p&gt;
&lt;p&gt;square matrix: nxn matrix&lt;/p&gt;
&lt;p&gt;diagonal matrix: square matrix and 대각선 빼고 다 0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;main diagonal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;trace&lt;/p&gt;
&lt;p&gt;transposed matrix: 행 열 위치 변경&lt;/p&gt;
&lt;p&gt;symmetric matrix: tranpose 해도 같을 때&lt;/p&gt;
&lt;p&gt;triangular matrix: main diagnal 기준으로&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;upper: 위에 다 0&lt;/li&gt;
&lt;li&gt;lower: 아래 다 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;echelon form&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;0이 아닌 모든 행은 성분이 모두 0인 행들 위에 항상 놓여 있다.&lt;/li&gt;
&lt;li&gt;각 행의 선행성분들은 그 행보다 위에 있는 행의 선행성분보다 오른쪽에 있는 열에 있다.&lt;/li&gt;
&lt;li&gt;선행성분 밑의 열의 성분들은 모두 영(0)이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;reduced echelon form&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;영(0)이 아닌 행의 선행성분은 1이다.&lt;/li&gt;
&lt;li&gt;각 선행성분 1은 그 열 안에서 영(0)이 아닌 유일한 성분이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;기약사다리꼴의 유일성 정리:
각 행렬은 오직 하나의 기약 행사다리꼴 행렬과 행동치이다.&lt;/p&gt;
&lt;img src=&quot;/images/5-1.png&quot; width=&quot;50%&quot; &gt;
&lt;p&gt;pivot position: reduced 에서 leading 하는 1 자리&lt;/p&gt;
&lt;p&gt;pivot column: pivot position 의 column&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic variable: pivot column 에 해당&lt;/li&gt;
&lt;li&gt;free variable: 그 외&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;augment matrix 에서 마지막 컬럼이 pivot column 이면 inconsitent (해 없다) (0 = 3 꼴 이라서)&lt;/p&gt;
&lt;p&gt;consistent 인 경우 free variable 없으면 unique (해 있는 경우에 모든 column 다 leading 1 갖고 있으면 해 1개 나머지는 해 무한대)&lt;/p&gt;
&lt;p&gt;해 구하는 방법&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;echelon form 으로 해 유무 조사 (pivot column)&lt;/li&gt;
&lt;li&gt;reduced echelon form 으로 해 조사&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;linear combination: vector 들의 합&lt;/p&gt;
&lt;p&gt;span: vector 들의 집합이 있을 때 그 원소들을 이용해 더하고 빼서 만들어지는 공간&lt;/p&gt;
&lt;p&gt;Ax: A 의 컬럼들을 백턱라고 생각했을 때 x 들의 entry 를 weight 로 갖는 linear combination 으로 생각 가능&lt;/p&gt;
&lt;p&gt;homogeneous: Ax = 0 으로 쓰여있는 시스템 (x = 0 이라는 해를 무조건 갖는다)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;trivial: x = 0 인 해&lt;/li&gt;
&lt;li&gt;non trivial: x != 0 인 해&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;parametric vector equation: x = su + tv&lt;/p&gt;
&lt;p&gt;translated Ax&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2&quot; aria-label=&quot;2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[컴퓨터 구조 개론]]></title><description><![CDATA[컴퓨터 구조 개론 2021년 1학기 컴퓨터 구조 개론 수업을 듣고 나름의 정리를 해보겠다는 생각으로 본 글을 작성하게 됐다. 1. Introduction 컴퓨터 구조에 대해서 배운다.
이 수업을 듣고 회로에 대해서 조금 안다면 간단한 cpu…]]></description><link>https://sunrisehouse.github.io/posts/6</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/6</guid><pubDate>Tue, 09 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;컴퓨터-구조-개론&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EA%B0%9C%EB%A1%A0&quot; aria-label=&quot;컴퓨터 구조 개론 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터 구조 개론&lt;/h1&gt;
&lt;p&gt;2021년 1학기 컴퓨터 구조 개론 수업을 듣고 나름의 정리를 해보겠다는 생각으로 본 글을 작성하게 됐다.&lt;/p&gt;
&lt;h2 id=&quot;1-introduction&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-introduction&quot; aria-label=&quot;1 introduction permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Introduction&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;컴퓨터 구조에 대해서 배운다.
이 수업을 듣고 회로에 대해서 조금 안다면 간단한 cpu 만들 수 있을 것 같다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-mips-instruction-set-architecture-isa&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-mips-instruction-set-architecture-isa&quot; aria-label=&quot;2 mips instruction set architecture isa permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. MIPS Instruction Set Architecture (ISA)&lt;/h2&gt;
&lt;p&gt;Architecture&lt;/p&gt;
&lt;p&gt;Microarchitecture&lt;/p&gt;
&lt;p&gt;MIPS Instruction Set&lt;/p&gt;
&lt;p&gt;Operations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arithmetic Operations&lt;/li&gt;
&lt;li&gt;Logical Operations&lt;/li&gt;
&lt;li&gt;Conditional Operations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Operands&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Register Operands&lt;/li&gt;
&lt;li&gt;Memory Operands&lt;/li&gt;
&lt;li&gt;Immediate Operands&lt;/li&gt;
&lt;li&gt;The Constant Zero&lt;/li&gt;
&lt;li&gt;Signed and Unsigned Operands&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Procedures&lt;/p&gt;
&lt;p&gt;MIPS Addressing for 32-Bit Immediatesand Addresses&lt;/p&gt;
&lt;p&gt;Translating and Starting a Program&lt;/p&gt;
&lt;p&gt;Array vs Pointers&lt;/p&gt;
&lt;h2 id=&quot;3-arithmetic-for-computers&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-arithmetic-for-computers&quot; aria-label=&quot;3 arithmetic for computers permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Arithmetic for Computers&lt;/h2&gt;
&lt;h2 id=&quot;4-processordatapath-control&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-processordatapath-control&quot; aria-label=&quot;4 processordatapath control permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Processor:Datapath&amp;#x26; Control&lt;/h2&gt;
&lt;h2 id=&quot;5-pipelining&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-pipelining&quot; aria-label=&quot;5 pipelining permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Pipelining&lt;/h2&gt;
&lt;h2 id=&quot;6-advanced-instruction-levelparallelism-ilp&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-advanced-instruction-levelparallelism-ilp&quot; aria-label=&quot;6 advanced instruction levelparallelism ilp permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. Advanced Instruction-LevelParallelism (ILP)&lt;/h2&gt;
&lt;h2 id=&quot;7-memory-hierarchy-cachesand-virtual-memory&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-memory-hierarchy-cachesand-virtual-memory&quot; aria-label=&quot;7 memory hierarchy cachesand virtual memory permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. Memory Hierarchy: Cachesand Virtual Memory&lt;/h2&gt;
&lt;h2 id=&quot;8-multicores-multiprocessors-and-clusters&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-multicores-multiprocessors-and-clusters&quot; aria-label=&quot;8 multicores multiprocessors and clusters permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. Multicores, Multiprocessors, and Clusters&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[컴퓨터 네트워크]]></title><description><![CDATA[컴퓨터 네트워크 2021년 1학기 컴퓨터 네트워크 수업을 듣고 나름의 정리를 해보겠다는 생각으로 본 글을 작성하게 됐다.
keyword 만 듣고 어떤 내용인지 떠올랐으면 좋겠다. 1. Introduction…]]></description><link>https://sunrisehouse.github.io/posts/4</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/4</guid><pubDate>Tue, 09 Mar 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;컴퓨터-네트워크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC&quot; aria-label=&quot;컴퓨터 네트워크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터 네트워크&lt;/h1&gt;
&lt;p&gt;2021년 1학기 컴퓨터 네트워크 수업을 듣고 나름의 정리를 해보겠다는 생각으로 본 글을 작성하게 됐다.
keyword 만 듣고 어떤 내용인지 떠올랐으면 좋겠다.&lt;/p&gt;
&lt;h2 id=&quot;1-introduction&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-introduction&quot; aria-label=&quot;1 introduction permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;네트워크 전반에 관한 내용을 다룬다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;networks&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;definition: the interconnection of a set of devices capable of communication&lt;/li&gt;
&lt;li&gt;서로 통신할 수 있는 애들 모아놓은 거&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;LAN, WAN&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;LAN
&lt;ul&gt;
&lt;li&gt;local area network&lt;/li&gt;
&lt;li&gt;작은 네트워크&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WAN
&lt;ul&gt;
&lt;li&gt;wide area network&lt;/li&gt;
&lt;li&gt;큰 네트워크&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;switching&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;circuit swich network&lt;/li&gt;
&lt;li&gt;packeet swiched network&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;Protocol Layering&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Protocol Layering&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단순화 하기위해 만들어짐&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TCP/IP Protocol&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; - 현재 인터넷에서 사용되는 protocol 들
&gt; - 데이터를 전송할 때 source 에서는 multiplexing 을 통해 data 를 계속 capsulation 하고 destination 에서는 demultiplexing 을 통해 data 를 decapsulation 한다
&gt; - |Layer|패킷 이름|주소|프로토콜 들|
  &gt; |---|:---:|:---:|:---:|
  &gt; |**Application**|message|name|HTTP, DNS, FTP ...|
  &gt; |**Transport**|segment, user datagram|port numbers|TCP, UDP|
  &gt; |**Network**|datagram|Logical addresses|IP|
  &gt; |**Data Link**|frame|Link-layer addresses|
  &gt; |**Physical**|bit||&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;OSI 7 계층&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&gt; - open systems interconnection model
&gt; - TCP/IP Protocol 에서 session, presentation 레이어가 추가됨
&gt; - OSI 의 Application, presentation, session 을 합쳐 TCP/IP 의 Application 으로 생각한다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;Internet&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;여러 WAN 과 LAN 으로 구성되어 있는 network&lt;/li&gt;
&lt;li&gt;packet switching 방식&lt;/li&gt;
&lt;li&gt;TCP/IP 프로토콜 사용&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h2 id=&quot;2-application-layer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-application-layer&quot; aria-label=&quot;2 application layer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Application Layer&lt;/h2&gt;
&lt;p&gt;인터넷 사용자들이 사용하지는 서비스들을 제공하는 Layer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;client-server paradigm vs peer-to-peer paradigm (+ mixed paradigm)&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;특징&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;client-server&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;peer-to-pder&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;role&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;dedicated server, specific clients&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;each &lt;strong&gt;node&lt;/strong&gt; can be both server and client&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;service&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;the server provides services to the client&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;each peer can provide and request services&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;main purpose&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;sharing imformation&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;connectivity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;data stored&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;in centralized server&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;each peer has its own data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;management&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;difficult to manage&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;bottleneck&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;more chances of getting bottlenected&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;fewer chances of getting bottlenectked&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;server: alwayes on host&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;no always on server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;server has permanent IP address&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;peers are intermittently connected and change their IP address&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;provides requested service to client&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;highly scalability, increase service capability&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;highly distributed and decentralized nature&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;mixed paradigm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;socket, socket interface&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;socket interface&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제에서 제공하는 소켓을 사용하기 위한 명령어들&lt;/li&gt;
&lt;li&gt;application layer 와 운영체제를 연결시켜주는 명령어들&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;socket&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data structure&lt;/li&gt;
&lt;li&gt;application layer (process) 에서 os 에 원하는 유형의 socket 만들어달라고 요청하면 os 가 하나 뚝딱해줌&lt;/li&gt;
&lt;li&gt;application layer 에서 만든 소켓에서 원하는 데이터 얻어올 수 있음&lt;/li&gt;
&lt;li&gt;socket address: 32 bit IP address, 16 bit Port number&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;UDP, TCP, SCTP&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;udp&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;tcp&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;sctp&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;connectionless&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;connection-oriented&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;connection-oriented&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;unreliable&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;reliable&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;reliable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;datagram&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;byte-stream&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;multi-stream (by multiple network-layer connection)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;URL&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;protocol + host + port + path&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HTTP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;web documents (static documents, dynamic documents, active documents)&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;static documents&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;dynamic documents&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;active documents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;fixed content documents that are created and stored in a server&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;created by a web server whenver a browser request the document&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;programs or scripts being run at the client site&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;HTML, XML ...&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CGI, JSP, ASP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;javascript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;서버에 저장될 때 그대로 변하지 않는 파일&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;클라이언트에서 요청 올 때 변경되는 파일&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;클라이언트에서 돌아가는 스크립트나 프로그램&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;HTTP message&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;request message = &lt;strong&gt;request line&lt;/strong&gt; + header lines + 빈줄 + body&lt;/li&gt;
&lt;li&gt;response message = &lt;strong&gt;status line&lt;/strong&gt; + header lines + 빈줄 + body&lt;/li&gt;
&lt;li&gt;
&lt;img src=&quot;/images/4-1.png&quot; width=&quot;50%&quot; &gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;request line&lt;/strong&gt; = method + url + version (ex: &quot;GET /requestFile.html HTTP/1.1&quot; )&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;status line&lt;/strong&gt; = version + status code + phrase (ex: &quot;HTTP/1.1 200 OK&quot; )&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;non persistent vs persitent&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;non persistent 는 각각의 request-response 마다 tcp connection 을 만들었다.
persistent 는 tcp connection 을 모든 데이터가 다 주고받을 때까지 닫지 않는다.
tcp 에 있는 handshate 줄일 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;HTTP1.0 / HTTP1.1 / HTTP2.0 / HTTP3.0&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;HTTP1.0&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;HTTP1.1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;HTTP2.0&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;HTTP3.0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;nonpersistent&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;persistent&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;persistent&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;persistent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;TCP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;TCP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;TCP&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;QUIC (UDP)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;tcp connection 하나 계속 열어놔서 latency 줄였다.&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;multiple stream 을 한 tcp connection 에 multiplexing 해서 latency 를 줄였다.&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;FTP&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;File Transfer Protocol&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 도 파일 전송 가능하지만 큰 파일 전송하는 것은 FTP 가 유리&lt;/li&gt;
&lt;li&gt;FTP server 의 구성: server control process, server data process&lt;/li&gt;
&lt;li&gt;FTP network 구조: &lt;img src=&quot;/images/4-2.png&quot; width=&quot;50%&quot; /&gt;&lt;/li&gt;
&lt;li&gt;control connection 이 전체 FTP session 동안 연결되어있다.&lt;/li&gt;
&lt;li&gt;data connection 은 control connection 살아있는 동안에 데이터 전송할 때 연결됐다 닫혔다 한다.&lt;/li&gt;
&lt;li&gt;control connection port 21, data connection port 20&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;data connection 여는 순서&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;클라이언트가 임시 포트로 passive open 한다&lt;/li&gt;
&lt;li&gt;클라이언트가 PORT 명령어로 포트 번호 보낸다.&lt;/li&gt;
&lt;li&gt;포트 넘버 받아서 active open 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;control connection 으로 명령어 주고 받고 data connection 으로 파일 주고받는다.&lt;/li&gt;
&lt;li&gt;FTP 는 파일 가져오고, 파일 저장하고, 파일 directory 하는 세가지 일을 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Email Protocol&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;Email Protocol&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;HTTP, FTP 와 다르게 one-way transaction. (HTTP, FTP 는 request, response 처럼 데이터 주고 받고 하는데 그게 아니란 듯)&lt;/li&gt;
&lt;li&gt;네트워크 구조: &lt;img src=&quot;/images/4-3.png&quot; width=&quot;50%&quot; /&gt;&lt;/li&gt;
&lt;li&gt;UA 2개, MTA client-server 2개, MAA client-server 1개&lt;/li&gt;
&lt;li&gt;UA (user agent): 보내고 받는 일 한다. (전자 메일 형식으로 바꿔주는 일도)&lt;/li&gt;
&lt;li&gt;email address: [local part]@[domain name]&lt;/li&gt;
&lt;li&gt;2개의 MTA client-server 의 프로토콜: SMTP&lt;/li&gt;
&lt;li&gt;1개의 MAA client-server 의 프로토콜: POP or IMAP&lt;/li&gt;
&lt;li&gt;MTA(Message Transfer Agent) 에서 메일 보내면 메일 서버에 저장하는 일 하고&lt;/li&gt;
&lt;li&gt;MAA(Message Access Agent) 에서 메일하고 메일 목록 가져오는 일 하는 듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;SMTP&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Message Transfer Agent&lt;/li&gt;
&lt;li&gt;UA 의 MTA client 에서 자신의 메일 서버에 있는 MTA server 로 메일 보낸다.&lt;/li&gt;
&lt;li&gt;그리고 MTA 서버는 다시 MTA 클라이언트한테 상대방 메일 서버의 MTA server 한테 메일 보낸다.&lt;/li&gt;
&lt;li&gt;명령어가 있다.&lt;/li&gt;
&lt;li&gt;port 25 로 tcp connection 열고 메시지 보내고 연결 닫고&lt;/li&gt;
&lt;li&gt;connection establishment -&gt; message transfer -&gt; connection termination&lt;/li&gt;
&lt;li&gt;메일을 전달하는 세션동안 보내는 사람, 주소등을 알고 있어야하기 때문에 stateful 하다&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;POP3 vs IMAP4&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Message Access Agent&lt;/li&gt;
&lt;li&gt;UA 에서 메일 접근하는 프로토콜들&lt;/li&gt;
&lt;li&gt;POP3 (Post Office Protocol) 은 단순&lt;/li&gt;
&lt;li&gt;IMAP4 (Internet Mail Access Protocol) 는 기능 많다.&lt;/li&gt;
&lt;li&gt;메일에 접근하는 세션을 유지해야 하기 때문에 stateful 하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;MIME&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;SMTP 는 ASCII 만 쓰는데 이제 8 bit 이상의 코드는 MIME 사용&lt;/li&gt;
&lt;li&gt;Network Virtual Terminal (NVT) ASCII 로 바뀌어서 전달된다는 듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remote logging protocols&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;TELNET&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;SSH&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Secure Shell&lt;/li&gt;
&lt;li&gt;SSH-1, SSH-2 있고 SSH-1 은 deprecated&lt;/li&gt;
&lt;li&gt;잘모르겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;SSH TRANS (ssh transport layer protocol)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;비밀을 위해&lt;/li&gt;
&lt;li&gt;데이터 무결성 보장&lt;/li&gt;
&lt;li&gt;서버 인증&lt;/li&gt;
&lt;li&gt;메시지 압축 -&gt; 공격 힘들게, 효율적이게&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;SSH AUTH (ssh authentication protocol)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;secure channel 이 만들어지고 authenticate 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;SSH CONN (ssh connection protocol)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;secure channel 만들어지고 authenticate 되고 ssh 는 ssh conn 이 구현된 소프트웨어 조각 실행&lt;/li&gt;
&lt;li&gt;이걸로 여러 가지 한다는 듯&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ssh for remote logging: putty, tectia&lt;/li&gt;
&lt;li&gt;ssh for file transfer: scp, sftp&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;port forwarding&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;secure service 제공 안하는 다른 서비스 (FTP, SMTP...) 등에서 secure channel 이용할 수 있게 ssh 에서 제공하는 서비스&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;DNS&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;name -&gt; ip address&lt;/li&gt;
&lt;li&gt;mapping 너무 많아서 분산되어있다.&lt;/li&gt;
&lt;li&gt;Hierarchical name space 로 tree 구조로 이루어져있다.&lt;/li&gt;
&lt;li&gt;domain 과 zone &lt;img src=&quot;/images/4-4.png&quot; width=&quot;50%&quot; /&gt;&lt;/li&gt;
&lt;li&gt;domain 은 subtree / zone 은 dns server 가 responsible (or authoritative) 하는 범위&lt;/li&gt;
&lt;li&gt;Internet 의 domain name space 는 세 section 으로 나뉜다: generic domain, country domain, inverse domain (ip 주면 이름 찾아주는 애인데 deprecated 됐다함)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;IP 주소 찾는 방법&lt;/li&gt;
&lt;li&gt;reculsive resolution: local domain server 가 root server 한테 물어보면 그 서버가 다시 그 아래 server 한테 물어봐서 찾는다.&lt;/li&gt;
&lt;li&gt;interative resolution: local domain server 가 root server 한테 물어보면 그 아래 서버 주수 주고 local domain server 가 찾을 때까지 계속 물어보고 다닌다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Resource Rcoreds&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(Domain Name, Type, Class, TTL, Value)&lt;/li&gt;
&lt;li&gt;Domain Name: 리소스 id&lt;/li&gt;
&lt;li&gt;Type: A, NS, CNAME, SOA, MX, AAAA -&gt; value 를 어떻게 받아들일것인지&lt;/li&gt;
&lt;li&gt;Class&lt;/li&gt;
&lt;li&gt;TTL: 정보가 유효한 시간&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Resource Records Type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;value 를 어떻게 받아들일 것인지&lt;/li&gt;
&lt;li&gt;A 타입이면 32-bit IPv4 address 로&lt;/li&gt;
&lt;li&gt;NS 면 identifies the authoritative servers for a zone&lt;/li&gt;
&lt;li&gt;CNAME 이면 호스트의 공식 이름&lt;/li&gt;
&lt;li&gt;AAAA 면 IPv6 address&lt;/li&gt;
&lt;li&gt;MX 면 메일을 메일 서버로 리다이렉트하는&lt;/li&gt;
&lt;li&gt;SOA 는 zone 의 시작&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;UDP, TCP 둘 다 사용하는데 UDP 는 response message 가 512 바이트보다 작은 경우에 사용&lt;/li&gt;
&lt;li&gt;DDNS 는 동적으로 host 추가했다 삭제했다 ip 바꿨다가 하기 쉽게 만들어짐. (DHCP 이용해서)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;authoritative name server: hostname to an IP address 하는 공식적인 translation 제공한다.&lt;/li&gt;
&lt;li&gt;local name server: DNS system 으로 proxy 한다. host 가 우선 local name server 한테 mapping 요청한다. 그러면 로컬네임서버가 얻어와서 host 한테 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;Chord&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;each node have finger table (routing table)&lt;/li&gt;
&lt;li&gt;successor: N &gt;= k 중 가장 가까운 N&lt;/li&gt;
&lt;li&gt;predecessor: 전 노드들&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;Kademlia&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;두 node 나 key 사이의 거리 구하기 위해 XOR 사용&lt;/li&gt;
&lt;li&gt;가장 가까운 노드가 키를 가지고 있다.&lt;/li&gt;
&lt;li&gt;number of leaves = number of identifiers(node or key)&lt;/li&gt;
&lt;li&gt;routing table 에서 number of rows 는 tree height 만큼&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;BitTorrent&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;h2 id=&quot;3-transport-layer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-transport-layer&quot; aria-label=&quot;3 transport layer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Transport Layer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Transport layer services&lt;/li&gt;
&lt;li&gt;Transport layer basic protocols&lt;/li&gt;
&lt;li&gt;Internet transport layer protocols
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;udp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;datagram (packet name)&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tcp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;segment (packet name)&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;connection&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;establishment&lt;/li&gt;
&lt;li&gt;data transfer&lt;/li&gt;
&lt;li&gt;termination&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;connection&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;flow control&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;send window : open, close, shrink&lt;/li&gt;
&lt;li&gt;recieve window : open, close&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;error control&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;checksum&lt;/li&gt;
&lt;li&gt;ack&lt;/li&gt;
&lt;li&gt;retransmission: retransmission time out, Tree duplicate ACK Segments (fast retransmission)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;congestion control&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;window size = minimum(rwnd, cwnd)&lt;/li&gt;
&lt;li&gt;cwnd = congestion window&lt;/li&gt;
&lt;li&gt;처음에는 slow start : exponential 하게 증가&lt;/li&gt;
&lt;li&gt;ssthresh 넘어가면 congestion avoidance : 1 씩 증가&lt;/li&gt;
&lt;li&gt;congestion 발생 =&gt; fast recovery&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Taho: congestion 발생하면 ssthresh = cwnd/2 하고 cwnd = 1 로&lt;/li&gt;
&lt;li&gt;Reno: timeout 이면 sshtresh = cwnd/2 하고 cwnd = 1 , 3dupAck 면 ssthresh = cwnd/2 하고 cwnd = ssthresh + 3&lt;/li&gt;
&lt;li&gt;NewReno: slow start 이후에 addictive increase, multiplicative decrease (AIMD)&lt;/li&gt;
&lt;li&gt;Cubic&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;details&gt;
&lt;summary&gt;quic&lt;/summary&gt;
&lt;div markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;UDP 사용한 apllication layer protocol&lt;/li&gt;
&lt;li&gt;udp connection 하나로 여러 스트림 연결됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-network-layer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-network-layer&quot; aria-label=&quot;4 network layer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Network Layer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IP datagram format&lt;/li&gt;
&lt;li&gt;IPv4 address
&lt;ul&gt;
&lt;li&gt;classful addressing&lt;/li&gt;
&lt;li&gt;classless addressing&lt;/li&gt;
&lt;li&gt;network address&lt;/li&gt;
&lt;li&gt;DHCP&lt;/li&gt;
&lt;li&gt;NAT&lt;/li&gt;
&lt;li&gt;Fowarding&lt;/li&gt;
&lt;li&gt;MPLS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[For Interview]]></title><description><![CDATA[Interview Contents 자료구조 알고리즘 데이터베이스 네트워크 운영체제 Java Kotlin Spring Boot Python Javascript Typescript Web AI Express.js AWS 기타 프로젝트 자료구조 Array…]]></description><link>https://sunrisehouse.github.io/posts/1</link><guid isPermaLink="false">https://sunrisehouse.github.io/posts/1</guid><pubDate>Fri, 01 Jan 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;interview&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#interview&quot; aria-label=&quot;interview permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interview&lt;/h1&gt;
&lt;h2 id=&quot;contents&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#contents&quot; aria-label=&quot;contents permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0&quot;&gt;자료구조&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot;&gt;알고리즘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4&quot;&gt;데이터베이스&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC&quot;&gt;네트워크&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C&quot;&gt;운영체제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#java&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kotlin&quot;&gt;Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#spring-boot&quot;&gt;Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#python&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript&quot;&gt;Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#typescript&quot;&gt;Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#web&quot;&gt;Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ai&quot;&gt;AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#express.js&quot;&gt;Express.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#aws&quot;&gt;AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B8%B0%ED%83%80&quot;&gt;기타&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8&quot;&gt;프로젝트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;자료구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;자료구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자료구조&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Array and Linked List&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;공통점: 선형 데이터 저장&lt;/li&gt;
&lt;li&gt;차이점: 구현, 특정인덱스조회-삽입-삭제 시간복잡도&lt;/li&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;어레이와 링크드 리스트는 둘 다 선형적인 데이터를 저장하는 자료 구조입니다. 하지만 그 선형적인 자료 구조를 구현 하는데 차이가 있습니다. 어레이는 그 크기만큼 메모리에 연속적으로 할당합니다. 하지만 링크드 리스트는 데이터가 추가 될 때마다 새 메모리를 할당해서 기존 리스트에 연결을 추가합니다. 어레이는 각 데이터들이 연속적인 메모리에 올라가기 때문에 연속적인 주소값을 갖고있습니다. 그래서 특정 인덱스의 접근하려고 할 때 그 주소를 바로 구해서 접근할 수 있습니다. 하지만 링크드 리스트는 연결된 데이터들을 이동하면서 탐색해야 합니다. 특정 인덱스에 삽입 삭제 해야할 경우 어레이는 그 뒤 인덱스의 데이터들을 뒤로 밀어야하기 때문에 O(n) 의 시간이 걸립니다. 하지만 링크드 리스트는 해당 인덱스 앞의 연결을 끊고 새 노드를 연결하기만 하면 돼서 O(1) 의 시간이 걸립니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Stack and Queue&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;공통점: Array 와 List 를 이용해서 선형 적인 데이터를 저장하지만 그 데이터의 삽입 삭제에 규칙이 있는 자료 구조&lt;/li&gt;
&lt;li&gt;차이점: LIFO-FIFO, 조회-삽입-삭제 시간 복잡도&lt;/li&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Graph&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;정의: 노드들 간의 관계에 관한 데이터를 저장하는 구조&lt;/li&gt;
&lt;li&gt;구현 (인접 행렬, 인접 리스트)&lt;/li&gt;
&lt;li&gt;장단점: 인접 행렬 (메모리 비효율, 노드 사이 연결성, 간선 많은 그래프)&lt;/li&gt;
&lt;li&gt;장단점: 인접 리스트 (메모리 효율, 노드 사이에 연결되어있는 모든 노드들, 간선 적은 그래프)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Tree&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;정의: 위계 관계를 저장하기 위한 데이터 구조&lt;/li&gt;
&lt;li&gt;구현: 인접 행렬, 인접 리스트, 노드 연결해서&lt;/li&gt;
&lt;li&gt;종류&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;heap&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;정의: 최댓값, 최솟값 빠르게 찾기 위한 트리&lt;/li&gt;
&lt;li&gt;형태: 부모노드 key 값이 자식 노드 key 값 보다 크다.&lt;/li&gt;
&lt;li&gt;구현: Array 이용 - index 0 비우고 왼쪽 자식 = 자기 * 2 오른쪽 자식 = 자기 * 2 + 1&lt;/li&gt;
&lt;li&gt;시간 복잡도&lt;/li&gt;
&lt;li&gt;조회: 트리 높이 = log(n)&lt;/li&gt;
&lt;li&gt;추가: 트리 높이 = log(n) = leaf 마지막에 추가하고 부모랑 계속 비교&lt;/li&gt;
&lt;li&gt;삭제: 트리 높이 = log(n) = root 제거, 마지막 leaf 를 루트로 큰 자식이랑 비교&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Binary Search Tree&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;정의: 이분 탐색의 원리를 이용해 탐색 빠르게 할 수 있는 Tree 구조&lt;/li&gt;
&lt;li&gt;형태: 왼쪽 자식 &amp;#x3C; 부모 &amp;#x3C; 오른쪽 자식&lt;/li&gt;
&lt;li&gt;조회: O(nlogn) or O(n^2. (=&gt; balance 가 깨진 경우)&lt;/li&gt;
&lt;li&gt;삽입: 부모에서 부터 계속 key 값 비교하면서 leaf 까지 내려온다.&lt;/li&gt;
&lt;li&gt;삭제: 삭제할 노드 찾고 자식 있는지 없는지 나눠서 진행&lt;/li&gt;
&lt;li&gt;중복 X -&gt; 효율 안좋아&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;AVL Tree&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Balance Factor 를 삽입 삭제시에 검사해서 좌우 서브 트리의 높이를 맞춘다.&lt;/li&gt;
&lt;li&gt;Balance Factor 만 허용 +1 , 0, -1&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;Red Black Tree&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;정의: 노드에 Red, Black 색을 할당해서 특정 조건 맞추도록 해서 Balance 맞추는 트리&lt;/li&gt;
&lt;li&gt;Root 는 Black / leaf node 에 연결 안된 node 들 null node 들 black / 새로 추가되는 노드 red / red 자식은 무조건 black&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;B Tree&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;정의: 한 노드에 여러 키(M 개)와 여러 자식, balance 맞춤&lt;/li&gt;
&lt;li&gt;조회 삽입 삭제 시간복잡도: O(logn)&lt;/li&gt;
&lt;li&gt;삽입 삭제: 노드가 최소 키 수(M/2 - 1.와 최대 키 수(M -1. 유지 하도록 보장 작거나 커지면 노드 분리 or 부모랑 합쳐짐&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;B + Tree&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;데이터 위치: B Tree 는 모든 노드들에 B+Tree 는 Leaf node 들에만&lt;/li&gt;
&lt;li&gt;모든 데이터 탐색: 선형적으로 가능&lt;/li&gt;
&lt;li&gt;범위 탐색 유리&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;Hash&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;정의: 해쉬 함수를 이용해 데이터 조회, 삽입, 삭제를 O(1. 만에 할 수 있는 자료구조&lt;/li&gt;
&lt;li&gt;문제: 충돌 - 해시 테이블 한정 but input 무한정&lt;/li&gt;
&lt;li&gt;해결: chaining : 충돌 나면 링크드 리스트로&lt;/li&gt;
&lt;li&gt;같은 곳에 계속 충돌 나면 성능 저하 선형적으로&lt;/li&gt;
&lt;li&gt;해결: open addressing: 충돌나면 다음 주소로 (바로 다음 or 제곱 다음 or 해시 한번 더)&lt;/li&gt;
&lt;li&gt;추가 메모리 필요X&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;알고리즘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;알고리즘&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;정렬 -&gt; 삽입, 정렬, 퀵, 머지&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;탐색 -&gt; 순차 탐색, 이분 탐색&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최소 신장 트리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최단 경로&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;데이터베이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;데이터베이스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터베이스&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SQL evaluation strategy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Join&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;inner&lt;/li&gt;
&lt;li&gt;outer&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Join 방법&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;nested loop join&lt;/li&gt;
&lt;li&gt;merge join / sort merge join&lt;/li&gt;
&lt;li&gt;hash join&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;
&lt;p&gt;정규형&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;indexing&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;정의: Search 속도를 높이기 위한 방법&lt;/li&gt;
&lt;li&gt;구현: Hash -&gt; O(1. 접근 가능하지만 범위 탐색 오버 헤드크다&lt;/li&gt;
&lt;li&gt;구현: B+ Tree = B Tree 에 leaf node 가 링크드 리스트로 연결 순차 탐색 유리&lt;/li&gt;
&lt;li&gt;clustered vs non-clustered : 물리적으로 정렬되어있어 검색 속도 빠르다. 데이터 접근하려면 포인터 따라 가야함&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Transaction&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;정의: 작업 처리 단위&lt;/li&gt;
&lt;li&gt;특성 4가지: ACID&lt;/li&gt;
&lt;li&gt;격리 레벨: Read Uncommitted, Read Committed, Repeatable Read, Serializable&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;
&lt;p&gt;Optimizer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NoSQL vs RDS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VARCHAR vs CHAR&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;다음 나오는 n 은 글자수 Not byte&lt;/li&gt;
&lt;li&gt;VARCHAR: 가변길이 - 메모리 효율적 사용&lt;/li&gt;
&lt;li&gt;CHAR: 정해진 길이 - 길이 계산할 필요 없어서 더 빠르다?&lt;/li&gt;
&lt;li&gt;어떤 기준으로 CHAR 을 쓰고 VARCHAR 를 쓰는지 배우고 싶습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;네트워크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC&quot; aria-label=&quot;네트워크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;네트워크&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;OSI 7 계층&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTPS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transfer Layer Protocol -&gt; TCP, UDP -&gt; TCP flow control, congestion control, checksum&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Network Layer -&gt; forwarding, routing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;arp, icmp protocol&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ssl / tls&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;운영체제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C&quot; aria-label=&quot;운영체제 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;운영체제&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;프로세스&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로세스 스케줄링&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로세스 동기화&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데드락&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;java&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#java&quot; aria-label=&quot;java permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Java&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Java 컴파일 과정&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;.java -&gt; .class 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Java 런타임 과정&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;클래스 로더가 .class 를 JVM 메모리 내로 로드&lt;/li&gt;
&lt;li&gt;자바 인터프리터 JIT 컴파일러?&lt;/li&gt;
&lt;li&gt;런타임 시스템으로&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;오버라이딩 vs 오버로딩&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;오버라이딩: 상위 클래스에 있는 메소드를 하위 클래스가 재정의&lt;/li&gt;
&lt;li&gt;오버로딩: 같은 이름의 메소드를 여러 개 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;객체지향 프로그래밍&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;모든 데이터를 객체 취급&lt;/li&gt;
&lt;li&gt;캡슐화, 상속, 다형성, 추상화&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;불변 객체&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;원시 타입은 final&lt;/li&gt;
&lt;li&gt;일반 객체 -&gt; 필드들 불변 객체로 or 배열이면 getter 을 clone 해서&lt;/li&gt;
&lt;li&gt;thread - safe =&gt; 병렬 프로그래밍에 유리&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;추상 클래스 and 인터페이스&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;둘 다 추상 메소드가 하나 이상 있다.&lt;/li&gt;
&lt;li&gt;interface 는 추상 메소드로만&lt;/li&gt;
&lt;li&gt;implement, extends&lt;/li&gt;
&lt;li&gt;추상 클래스 다중 상속 불가, 인터페이스 다중상속 가능&lt;/li&gt;
&lt;li&gt;인터페이스는 특정 메소드 반드시 존재하도록 강제, 추상 클래스 -&gt; 공통 로직 추상화&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;가비지 컬렉션&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;JVM 의 메모리 관리 기법&lt;/li&gt;
&lt;li&gt;시스템에서 동적으로 할당됐던 메모리 영역 중에서 필요 없어진 메모리 영역 회수&lt;/li&gt;
&lt;li&gt;실행 잠시 멈추고 GC 를 실행하는 쓰레드를 제외한 모든 쓰레드들 작업 중단 (Stop the world)-&gt; 사용 않는 메모리 제거 (Mark and Sweep)&lt;/li&gt;
&lt;li&gt;Young 영역 Minor GC and Old 영역 Major GC&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;자바의 메모리 영역&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Method 영역: 전역 변수와 static 변수 저장, 프로그램의 시작부터 종료까지 메모리에&lt;/li&gt;
&lt;li&gt;스택 영역: 지역변수와 매개변수&lt;/li&gt;
&lt;li&gt;힙 영역: new 로 생성되는 객체들저장 =&gt; 가비지 컬렉션에 의해 메모리 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;
&lt;p&gt;Synchronized&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Volatile&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;new String vs “”&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;new string 은 heap 메모리영역에 “” 는 string constant pool 에&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;String, StringBuffer, StringBuilder&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;String 불변, Buffer and Builder 는 가변&lt;/li&gt;
&lt;li&gt;Buffer 는 동기화 지원하여 멀티쓰레드 환경에서 사용&lt;/li&gt;
&lt;li&gt;Builder 는 동기화 지원 X 싱글 쓰레드 환경&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;12&quot;&gt;
&lt;li&gt;접근 제한자&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;private: 현재 객체 내에서만&lt;/li&gt;
&lt;li&gt;default: 같은 패키지에 있는 객체들만&lt;/li&gt;
&lt;li&gt;protected: 같은 패키지에 상속관계의 객체들만&lt;/li&gt;
&lt;li&gt;public: 모두 허용&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;13&quot;&gt;
&lt;li&gt;static&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;변수나 메소드가 클래스 메모리에 올라갈 때 자동으로 생성&lt;/li&gt;
&lt;li&gt;인스턴스 생성 없이 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;14&quot;&gt;
&lt;li&gt;내부 클래스&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;내부 클래스에서 외부 클래스의 멤버에 손쉽게 접근 가능&lt;/li&gt;
&lt;li&gt;서로 관련 있는 클래스를 논리적으로 묶어서 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;15&quot;&gt;
&lt;li&gt;리플렉션&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;구체적인 클래스 타입 알지 못해도 그 클래스의 메소드, 타입, 변수들에 접근할 수 있게 해주는 자바 API =&gt; IntelliJ 의 자동완성 기능, 스프링의 어노테이션&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;16&quot;&gt;
&lt;li&gt;Error vs Exception&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Error 는 실행 중 일어날 수 있는 치명적 오류 -&gt; 프로그램 비정상 종료&lt;/li&gt;
&lt;li&gt;Exception 은 에러보다 비교적 경미한 오류, 트라이 캐치로 비정상 종료 막을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;17&quot;&gt;
&lt;li&gt;CheckedException vs UnCheckedException&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Checked: 실행하기 전에 예측 가능한 예외 -&gt; 예외 처리 필요&lt;/li&gt;
&lt;li&gt;IOException, ClassNotFound&lt;/li&gt;
&lt;li&gt;Unchecked: 실행하고 난 후에 알 수 있는 예외 -&gt; 따로 예외처리는 필요 X&lt;/li&gt;
&lt;li&gt;NullPointer, Array Index out of bound&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;18&quot;&gt;
&lt;li&gt;Collection Framework - List, Set, Map, Stack, Queue&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;List 구현체 ArrayList, Vector, LinkedList,&lt;/li&gt;
&lt;li&gt;Set 구현체 HashSet, LinkedHashSet, TreeSet&lt;/li&gt;
&lt;li&gt;Map 구현체 HashMap, TreeMap, HashTable, Properties&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;19&quot;&gt;
&lt;li&gt;Wrapper Class 아닌 Object 에서 Set and Map 에서 중복 검사 하는 방법&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;오버라이딩된 hashCode 메소드 리턴된 해시코드 값 같은지 보고 비교&lt;/li&gt;
&lt;li&gt;해시 코드값 같으면 equals 메소드 오버라이딩 해서 비교&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;20&quot;&gt;
&lt;li&gt;Vector List 차이&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Vector 는 삽입 시에 뒤에 원소 밀어내고 List 는 노드 연결만&lt;/li&gt;
&lt;li&gt;Vector 는 랜덤 부분 접근 가능 리스트는 더블 링크드 리스트 O(n)  검색에서 벡터 유리&lt;/li&gt;
&lt;li&gt;Vector 는 멀티 쓰레드 환경에서 동기화가 지켜진다. 단일 쓰레드에서도 마찬가지 -&gt; 성능 떨어짐&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;21&quot;&gt;
&lt;li&gt;제네릭&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;제네릭은 타입을 지정하지 않고 포괄적으로 지정&lt;/li&gt;
&lt;li&gt;컴파일 타임에 타입 체크&lt;/li&gt;
&lt;li&gt;형변환 생략 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;kotlin&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#kotlin&quot; aria-label=&quot;kotlin permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Kotlin&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Java 와 상호 운용성&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Kotlin 도 컴파일하면 JVM 에서 실행 가능한 바이트 코드를 생성하기 때문에 Java 와 함께 쓸 수 있다. 서로 호출 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Compile 과정&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Kotlin 컴파일러가 Kotlin 코드 컴파일해 .class 파일 생성&lt;/li&gt;
&lt;li&gt;이 때 Java 코드 참조하면 Java 코드도 함께 로딩&lt;/li&gt;
&lt;li&gt;Java 컴파일러가 Java 코드 컴파일해 바이트 코드 .class 생성&lt;/li&gt;
&lt;li&gt;=&gt; 자바 어노테이션 프로세서로 생성되는 코드 사용하면 두번째 자바 컴파일 과정에서 생성되니까 오류 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;변수 선언&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Type 추론 사용해 Type 자동 감지&lt;/li&gt;
&lt;li&gt;val vs var =&gt; 변경 불가 재할당 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Null Safety, Nullable Types&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Null Pointer Exception 방지하기 위해 물음표 단 nullable 타입들을 이용&lt;/li&gt;
&lt;li&gt;Nullable 한 타입들은 null 인지 검사한 뒤 사용해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;const vs val&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;val 은 runtime 에 세팅&lt;/li&gt;
&lt;li&gt;const 는 compile-time 상수가 된다. (var 불가)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;!! 와 ? 의 차이&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;!! 는 nullable 타입의 값을 강제로 가져오기 위해 -&gt; null 이면 런타임 crash 발생&lt;/li&gt;
&lt;li&gt;? 는 안전하게 nullable 타입 값 가져오는 연산자 let 을 이용해서 안전하게 가져올 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;== 와 ===&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;value 비교&lt;/li&gt;
&lt;li&gt;reference 비교&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;open 붙여서 상속&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;primary 생성자 secondary 생성자&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;primary: class User(name: String) -&gt; 이거&lt;/li&gt;
&lt;li&gt;secondary: class 당 한개 이상&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;생성자 init vs constructor&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;init 은 초기화 block&lt;/li&gt;
&lt;li&gt;primary constructor -&gt; secondary constructor&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;
&lt;p&gt;kotlin - when = Java - switch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data class 란&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;변수마다 getter/setter 설정됨, tostring, hash copy override 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;12&quot;&gt;
&lt;li&gt;destructuring declarations&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;var (n, a) = book&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;13&quot;&gt;
&lt;li&gt;inline 과 inflix 함수의 차이&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;inline function: 익명 함수에 대한 객체 할당을 방지해 오버헤드를 줄인다.&lt;/li&gt;
&lt;li&gt;infix function: 두 개의 변수 사이에 오는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;14&quot;&gt;
&lt;li&gt;lazy 와 lateinit 차이점&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;lateinit 은 var&lt;/li&gt;
&lt;li&gt;lazy 는 val - 필요시에 런타임에 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;15&quot;&gt;
&lt;li&gt;싱글톤 클래스 생성 방법&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;object 키워드&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;16&quot;&gt;
&lt;li&gt;static method&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;class 안에 companion object 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;17&quot;&gt;
&lt;li&gt;open 과 public 차이&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;open 키워드만 상속 가능&lt;/li&gt;
&lt;li&gt;public 은 접근 제한자&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;18&quot;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;spring-boot&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-boot&quot; aria-label=&quot;spring boot permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spring Boot&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Spring vs Spring Boot&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Spring Framework 를 이용해 엔터프라이즈 어플리케이션을 보다 쉽게 만들 수 있습니다.&lt;/li&gt;
&lt;li&gt;Spring Framework는 기능이 많은만큼 환경설정이 복잡한 편이라 설정의 많은 부분을 자동화하여 사용자가 편하게 Spring을 활용할 수 있도록 돕는다.&lt;/li&gt;
&lt;li&gt;Spring Boot 를 이용해 Spring Project 를 더 쉽게 구성할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;AOP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IOC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bean&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Filter vs Interceptor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Entity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DTO vs VO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JPA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DTO 사용 이유&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;N + 1 문제&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;생성자 injection 을 사용하는 이유&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ORM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MVC 진행 방식&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Security&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;영속성 컨텍스트&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;servlet dispatcher&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring WebFlux&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;non-blocking 방식으로 이루어지는게 가장 큰 특징. MVC 는 blocking 방식으로 IO 작업 같이 처리되기를 기다려야하는 상황에서 blocking 된 상태로 기다리게 됩니다. 물론 MVC 는 다른 쓰레드를 context switching 시켜 실행시키지만 그에 따른 overhead 가 있습니다. 하지만 WebFlux 는 non-blocking 방식으로 IO 작업이 끝나면 Event 를 발생시켜 알려주거나 Callback 을 사용해서 그 후 처리를 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;WebFlux 의 Reactive Stream?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;python&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#python&quot; aria-label=&quot;python permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Python&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;generator&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;yield 를 가지고 있는 iterator 를 만들어내는 함수&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;class 생성 시 메소드 실행 방식&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GIL 과 그로 인한 성능 문제&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Celery&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pypy 가 CPython 보다 빠른 이유&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리 누수가 발생하는 이유&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Duck Typing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REPL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;list vs tuple&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;type system&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;자료형을 런타임에 결정&lt;/li&gt;
&lt;li&gt;자료형이 맞지 않을 경우 에러 발생 (암묵적으로 변환x)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;변수 scope&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;함수 안 (if 안에서 선언하고 그 다음 밖에 나와서 접근 가능)&lt;/li&gt;
&lt;li&gt;LEGB rule (local -&gt; enclosed -&gt; global -&gt; built in)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;12&quot;&gt;
&lt;li&gt;exception and exception handling&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;exception 발생하면 상위로 전파&lt;/li&gt;
&lt;li&gt;try except&lt;/li&gt;
&lt;li&gt;Indentation error or syntax error : 에러 처리 되지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;13&quot;&gt;
&lt;li&gt;EAFP&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Easier to Ask Forgiveness than Permission&lt;/li&gt;
&lt;li&gt;일단 실행하고 예외 처리로 커버&lt;/li&gt;
&lt;li&gt;LBYL 에러 날만한 요소 검사하고 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;14&quot;&gt;
&lt;li&gt;
&lt;p&gt;표현식 - List, Set, Dictionary&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterable vs Iterator&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Iterable: list, set, dict, str, bytes&lt;/li&gt;
&lt;li&gt;Iterator: 값을 하나씩 꺼내올 수 있는 객체, iter() &lt;strong&gt;iter&lt;/strong&gt;() 로 iterable 에서 iterator 만들 수 있다. next 로 다음 값 꺼내 올 수 있따.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;16&quot;&gt;
&lt;li&gt;파이썬 다중 상속&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;MRO 로 상속 관계 확인 가능&lt;/li&gt;
&lt;li&gt;MRO 로 메소드 탐색 순서 확인 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;17&quot;&gt;
&lt;li&gt;정적 메소드&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;static method vs class method&lt;/li&gt;
&lt;li&gt;둘 다 클래스로 메소드 호출 가능&lt;/li&gt;
&lt;li&gt;class method 는 호출한 Class 를 첫번째 인자로 받는다. 상속시에 큰 힘 발휘 Date,now() 에서 static method 로 만들면 Date 객체를 내보내는데 class method 로 만들어서 상속시켜서 첫번째 인자로 객체 만들어내면 상속한 객체 만들수있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;18&quot;&gt;
&lt;li&gt;추상 클래스&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;abc 모듈 import 해야함&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;19&quot;&gt;
&lt;li&gt;Duck Typing&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;파이썬과 같은 동적타입의 언어에서 본질적으로 다른클래스라도 객체의 적합성은 객체의 실제 유형이 아니라 특정 메소드와 속성의 존재에 의해 결정되는 것입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;javascript&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#javascript&quot; aria-label=&quot;javascript permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Javascript&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;v8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;event loop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hoisting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Closure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Webpack&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NPM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;React.js&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redux&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redux-saga&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Webpack&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;typescript&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#typescript&quot; aria-label=&quot;typescript permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Typescript&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Javascript 말고 Typescript 를 선택한 이유?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;소프트웨어가 좀 더 안정적이라고 느꼈습니다. javascript 는 인터프리터 언어로 런타임에 타입 에러를 발생합니다. 하지만 Typescript 는 컴파일 언어로 컴파일 타임에 타입 에러들을 미리 확인할 수 있습니다. 무결성??&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Compile&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;Typescript 컴팡일러&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;web&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#web&quot; aria-label=&quot;web permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Web&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;브라우저의 동작 원리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Document Object Model&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CORS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;크로스 브라우징&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;웹 성능과 관련된 Issues&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;서버 사이드 렌더링 vs 클라이언트 사이드 렌더링&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSS Methodology&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;normalize.css vs reset.css&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그 외 프론트엔드 개발 환경 관련&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lazy loading, throttling, debouncing&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;ai&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ai&quot; aria-label=&quot;ai permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AI&lt;/h2&gt;
&lt;h2 id=&quot;expressjs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#expressjs&quot; aria-label=&quot;expressjs permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Express.js&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Middleware&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;Express.js 는 request 가 들어오면 middleware 라는 함수들을 통과하면서 요청을 처리하고 response 를 보내게 됩니다. 그런데 제가 타입스크립트를 사용하는데 request 객체들이 전달되면서 타입이 변하는 경우 처리를 어떻게 해야할지 고민하고 있습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;aws&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#aws&quot; aria-label=&quot;aws permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AWS&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Code Pipeline&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code Deploy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blue Green 배포&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;블루 그린 배포는 이제 인스턴스 그룹을 프로비저닝 해서 새 그룹에 배포를 먼저 진행합니다. 배포가 성공적을 끝나면 로드 밸런서가 그 트래픽을 새 그룹으로 옮깁니다. 그리고 이전 그룹의 인스턴스를 삭제합니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;기타&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%ED%83%80&quot; aria-label=&quot;기타 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기타&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;비밀번호 암호화 어떻게&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;session / cookie&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JWT&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Json Web TOken&lt;/li&gt;
&lt;li&gt;Json 포맷을 이용하여 사용자에 대한 속성을 저장하는 Claim 기반의 Web Token&lt;/li&gt;
&lt;li&gt;Header, Payload, Signature 로 이루어집니다. 각 부분은 json 형태로 이루어져있고 base64Url 로 인코딩 됩니다. 각 부분은 마침표로 연결됩니다.&lt;/li&gt;
&lt;li&gt;Header 에는 Signature 를 해싱하기 위한 알고리즘 지정.&lt;/li&gt;
&lt;li&gt;Payload 에는 토큰 발급 시간, 만료 기간 같은 토큰 정보와 사용자가 정의한 데이터를 넣을 수 있다.&lt;/li&gt;
&lt;li&gt;Signature: 위에 Header 와 Payload 를 base64 로 encoding 한 것을 header 에 해시 알고리즘으로 해싱하고 이 값을 다시 base64url 로 encoding 한 값&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;OAuth&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;OAuth: Open Authorization 를 위한 프로토콜&lt;/li&gt;
&lt;li&gt;User 가 서비스에 직접 인증하는것이아니라, Resource Owner 가 OAuth 서비스를 제공하는 service provider 에 인증을 해 Resource 에 접근할 권한을 얻고 그 서비스에 권한을 위임하는 방식&lt;/li&gt;
&lt;li&gt;웹 애플리케이션이 아닌 애플리케이션 지원 강화, 암호화가 필요 없음 HTTPS를 사용하고 HMAC을 사용하지 않는다. Siganature 단순화 정렬과 URL 인코딩이 필요 없다. Access Token 갱신 OAuth 1.0에서 Access Token을 받으면 Access Token을 계속 사용할 수 있었다. 트위터의 경우에는 Access Token을 만료시키지 않는다. OAuth 2.0에서는 보안 강화를 위해 Access Token의 Life-time을 지정할 수 있도록 했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://d2.naver.com/news/3435170&quot;&gt;https://d2.naver.com/news/3435170&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP Header Content-Type&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Application 타입, 오디오 타입, text 타입, multipart 타입&lt;/li&gt;
&lt;li&gt;application/x-www-form-urlencoded: 모든 문자 encoding&lt;/li&gt;
&lt;li&gt;multipart/form-data: 모든 문자 encoding x, 파일이나 이미지 서버로, 여러 타입을 전송하기 위한&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;RDBMS vs NoSQL&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;NoSQL - 스키마 없어 데이터를 유연하게 저장가능 but 무결성 지켜지진 않는다.&lt;/li&gt;
&lt;li&gt;NoSQL - 데이터 읽어오는 속도 빠르다. read 자주하고 update 자주 안되는, Transaciton 기능 없다.&lt;/li&gt;
&lt;li&gt;RDBMS - 복잡한 join 필요 무결성 지켜진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;Business Logic&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;저는 이제 Controller 에서 request 를 검사해서 service 에서 database 에서 data 를 받아와서 가공하는 것을 service 영역에서 처리&lt;/li&gt;
&lt;li&gt;어떻게 데이터가 저장되고 수정하는지를 정의&lt;/li&gt;
&lt;li&gt;repository 에서는 db 에서 ORM 사용해서데이터를 정의하는 역할만&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;프로젝트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8&quot; aria-label=&quot;프로젝트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트&lt;/h2&gt;
&lt;h3 id=&quot;callabt&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#callabt&quot; aria-label=&quot;callabt permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CallabT&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;프로젝트 소개 더 자세히&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;아버지께서 운영하시는 작은 회사입니다. 5년전 웹 공부를 하면서 아버지께 만들어보겠다고 말씀드려서 그 당시에는 그냥 회사 소개 정도만 있던 홈페이지였습니다. 그런데 최근에 이제 여러 기능을 개발 해줄 수 있냐 여쭤보셔서 현재는 공지 사항, 견적 요청, 매니저 로그인 기능을 구현한 상황입니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;NAS 에 올릴 때는 어떻게 올렸나?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;그 당시에 아버지께서 NAS 세팅을 도와달라고 하셨습니다. 회사 네트워크 세팅과 NAS 세팅을 하면서 NAS 에 여러가지 기능을 제공하는 것을 알게 됐습니다. DB 도 있고 이미 웹페이지가 호스팅되고 있고 하는 것을 보았습니다. 그래서 홈페이지를 여기다 올릴 수 있겠다고 생각을 했습니다. 그래서 express.js 와 여러 html 에 데이터를 매핑하는 라이브러리를 이용해서 홈페이지를 구축했었습니다. 그리고 호스팅을 하기위해 공유기와 NAS 에서 포워딩을 진행해주었던 것이 기억이 납니다. 당시에 네트워크 지식이 전무했었는데 인터넷에서 찾아가면서 열심히 공부하면서 해결했던 기억이 납니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Cloud 환경에는 어떻게 구현했나&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;저는 AWS Cloud 를 사용했습니다. 일단 저는 그냥 되는데로 하는게 아니라 보안적으로 안전하게 구현하고 싶었습니다. 그래서 최대한 방어적으로 보안 규칙이나 라우팅 테이블을 설정하고 퍼블릭 서브넷과 프라이빗 서브넷으로 나눠서 프라이빗 서브넷에 바로 접근할 수 없게 네트워크 환경을 구성했습니다. 그리고 트래픽에 안정적으로 대응할 수 있는 시스템을 구성해보고자 로드 밸런서, 오토 스케일링 그룹을 사용했습니다. 그래서 로드 밸런서로 들어오는 트래픽을 그 ec2 인스턴스 그룹에 나눠서 주게끔 설정했고 서버를 scaled out 을 쉽게 할 수 있게 오토 스케일링 그룹을 설정했습니다. CI/CD 도 AWS Code Pipeline 서비스를 이용해 구성했습니다. 서버 무중단 배포를 구성해보려고 오토 스케일링 그룹에 블루/그린 배포를 세팅했습니다. CloudWatch 서비스를 이용해서 각 서버의 로그들과 코드 빌드, 디플로이의 로그들을 한 곳에서 쉽게 볼 수 있게 구성했습니다. 그리고 이 모든 것을 Terraform 을 이용해서 Infra 를 Code 로 관리 할 수 있게 했습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;AWS 를 선택한 이유?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;GCP 와 AWS 를 고민했었는데 가장 중점적으로 본 부분은 비용이었습니다. GCP 가 AWS 보다 비용적으로 더 유리하다면 선택할 생각이있었는데 그 당시에 그렇게 유리하다고 생각되지않아서 그냥 익숙한 AWS 를 사용했습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;IaC 로 Terraform 을 선택한 이유?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;AWS 서비스만 이용하니까 CloudFormation 을 이용하려다가 Terraform 이 더 다양한 Resource 들을 관리할 수 있어서 Terraform 을 선택하게 됐습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;API 서버 아키텍처 구성은 어떻게 했나&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;일단 저는 Spring 프로젝트와 참고해서 database 에서 data 를 받아오는 repository 와 business logic 을 처리하는 service, client 요청을 routing 하는 router 로 나누었습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;API 서버 어떤 middleware 를 사용했나&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;우선 모든 request 들은 logging 을 위한 morgan, body 를 json 으로 다 파싱하기 위한 bodyparser, cors 처리를 위한 cors 라이브러리를 통과하게 됩니다. multipart data 로 오는 request 를 처리하기 위한 multer 라이브러리를 사용했습니다. 그리고 router 들을 통과하게 되고 그리고 끝까지 처리 되지 못한 요청들을 위한 error 응답 처리 미들웨어를 통과하게 됩니다&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;API 서버 Database 연결 어떻게 했나&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;이전에는 sequilize 라는 javascript ORM 을 사용했었는데 이번에는 mysql2 라이브러리를 이용해서 sql 을 날리는 방식으로 사용했습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;ORM 을 사용하지 않은 이유?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;ORM Object Relational Mapping 은 객체와 관계형 데이터베이스의 관계를 자동으로 매핑해주는 것입니다. 객체 지향 코드로 더 직관적이게 비즈니스 로직에 집중할 수 있고 Database 에 종속성이 낮아진다지만 저는 이 마법같은 도구가 안에서 어떤 동작으로 이루어지는지에 대해서 정확하게 알지 못해서 좀 불안했던 것 같습니다. sql 을 직접 작성해서 사용해보고 싶기도 했고 해서 ORM 을 사용하지 않았습니다. 내부 시스템에 대해 어느정도 이해를 하고 사용하려고 노력하는 것 같습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;파일 전송 어떻게 구현했나?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;우선 multipart form 으로 파일들을 전송 받습니다. multipart form data 를 express 는 바로 처리할 수 없기 때문에 multer library 를 이용해서 request 객체에 file 객체로 받습니다. 그 객체를 이제 AWS SDK 를 이용해서 S3 Bucket 에 중복되는 이름을 피하기 위해 현재 날짜로 이름을 바꿔서 저장합니다. 그리고 그 위치와 파일이름을 Database 에 저장합니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;JWT 구현 어떻게&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;jwt 기능을 제공하는 라이브러리를 사용했습니다. Enviroment 변수로 넘겨준 private key 로 사인한 token 을 생성합니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;12&quot;&gt;
&lt;li&gt;회원 구현 어떻게&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;우선 회원가입은 name 과 password 를 받습니다. password 를 bcrypt library 를 이용해 암호화를 해서 Database 에 저장합니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;13&quot;&gt;
&lt;li&gt;bcrypt libray 를 사용한 이유&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;여러 암호화 기법들을 사용한 라이브러리를 들을 고려해보았습니다. 기본 해시 함수인 sha, md5 는 빠른 처리 속도로 인하여 보안에 취약하다고 합니다. 해시를 강하게 하기 위해서 무작위 salt 와 함께 반복적인 해싱 작업을 하는 bcrypt 는 구현이 쉽고 강력하다는 특징이 있어서 사용했습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;14&quot;&gt;
&lt;li&gt;salt 는 어디다 저장?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;저장 안합니다. salt 없이도 hash 를 이용해 값을 비교할 수 있습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;15&quot;&gt;
&lt;li&gt;Terraform 장점?&lt;/li&gt;
&lt;li&gt;공통으로 쓰는 패키지 관리를 어떻게 하는지?&lt;/li&gt;
&lt;li&gt;어려웠던 부분&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;https 환경 구성?&lt;/li&gt;
&lt;li&gt;최근에 발생했던 이슈가 공지사항 업로드 하는데 공지사항만 등록되고 파일은 실패하는 -&gt; 트랜잭션&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;18&quot;&gt;
&lt;li&gt;MySQL 선택한 이유?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;무료인 것들 중에 선택했는데 PostgreSQL 이랑 고민했는데 큰 차이가 있지 않는 것 같아서 선택하게 됐습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;dotory&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dotory&quot; aria-label=&quot;dotory permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dotory&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;더 자세한 소개&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;아이들이 자신만의 동화를 만들어볼 수 있게 도와주는 서비스 입니다. 테마나 장소 선택하고 등장인물 이름을 적으면 문장을 세개씩 추천해줍니다. 그리고 그 각 페이지마다 삽화를 추가할 수 있습니다. 그리고 이미지를 동화 스타일로 바꾸는 기능을 제공합니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Kotlin and Spring Boot 를 사용한 이유?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;일단 어느 프레임워크든 장단점이 느껴질 정도로 극한으로 사용하진 않았기에 느낀 것은 없지만 Kotlin 을 사용하면서 느낀 장점은 있는 것 같습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;API Server 구조&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;database 에서 data 를 받아오는 repository 와 business logic 을 처리하는 service, client 요청을 routing 하는 router 로 나누었습니다. 그리고 Spring MVC 가 아닌 Spring WebFlux 를 사용했습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Spring WebFlux 를 선택한 이유?&lt;/li&gt;
&lt;li&gt;Business Logic 이 무엇인가&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;저는 http request, response 에 독립적이고 데이터를 어디서 어떻게 받아오는지와 구분되는 로직들, 데이터를 어떻게 처리할지에 대한 로직들로 정의했습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;WebFlux 의 Reactive Stream?&lt;/li&gt;
&lt;li&gt;Observer pattern?&lt;/li&gt;
&lt;li&gt;Reactive Programming?&lt;/li&gt;
&lt;li&gt;이미지 전송 and 저장 어떤 방식으로??&lt;/li&gt;
&lt;li&gt;OAuth 어떻게?&lt;/li&gt;
&lt;li&gt;이슈와 어떻게 해결했는지?&lt;/li&gt;
&lt;li&gt;추론 서버는 어떻게?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;python flask 를 사용했습니다. route 와 service 로직을 처리하는 service 로 구성돼있습니다. repository 같이 database 에 접근하는 레이어는 없고 library 에 추론에 관련된 모듈들이 들어있습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;14&quot;&gt;
&lt;li&gt;동화 스타일 트랜스퍼 과정?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;details&gt;&lt;summary&gt;대답&lt;/summary&gt;python flask 를 사용했습니다. route 와 service 로직을 처리하는 service 로 구성돼있습니다. repository 같이 database 에 접근하는 레이어는 없고 library 에 추론에 관련된 모듈들이 들어있습니다.&lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;15&quot;&gt;
&lt;li&gt;동화 스타일 트랜스퍼 개발 과정?&lt;/li&gt;
&lt;li&gt;GAN 이란?&lt;/li&gt;
&lt;li&gt;동화 문장 추천 과정?&lt;/li&gt;
&lt;li&gt;동화 문장 추천 개발 과정?&lt;/li&gt;
&lt;li&gt;힘들었던 부분&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;개발 환경인 Colab 과 서버 환경의 패키지를 맞춰주는 과정&lt;/li&gt;
&lt;li&gt;GPU EC2 를 사용해 모델 추론 서버를 올리는 과정 - memory 도 신경 써줬어야했고 어떤 프로세서 어떤 gpu 쓸지 결정했어야했고 docker container 에 gpu 할당해서 쓰려면 nvidia-docker 를 설치해서 사용해야했고 등.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;liveanywhere&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#liveanywhere&quot; aria-label=&quot;liveanywhere permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Liveanywhere&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Design Component System 만든 이유?&lt;/li&gt;
&lt;li&gt;Redux 사용하지 않은 이유?&lt;/li&gt;
&lt;li&gt;소프트웨어 아키텍처 어떻게 설계했는지?&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;백엔드 개발자님이 개발 팀장님이셨는데 뭘로 프론트엔드 뭘로 개발할지 여쭤보셨다. 그래서 뭐 여러가지 고려했습니다. native 로 android ios 따로 개발부터 react 많이 했으니까 react native 아니면 flutter 로 할지 그래서 개발 기간과 추가적으로 들어갈 리소스 등을 고려해서 자소서에 써넣은 스펙이 되었습니다.&lt;/li&gt;
&lt;li&gt;그리고 이제 프론트엔드 프로젝트를 어떻게 구성할지 저번 회사에서는 Redux 사용해서 Flux 도 사용하고 컴포넌트도 여럿 나누고 해서 src 디렉터리 안에 디렉터리가 10개 이상 됐습니다.&lt;/li&gt;
&lt;li&gt;그래서 저는 간단하게 MVC 처럼 가자. 해서 지금까지 하고 있는 거 같은데 사용자 한테 보여지는 view 로직이 들어잇는 view dir, routing 위한 pages, 여러 비즈니스 로직이 들어있는 hooks 들을 보관하는 lib 디렉터리 이렇게 존재했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;private NPM 어떻게 세팅??&lt;/li&gt;
&lt;li&gt;어떤 이슈 있었고 어떻게 해결했는지&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;다날 연동할 때 iframe 달아서 진행&lt;/li&gt;
&lt;li&gt;webview 와 app 통신&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Redux&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;waug&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#waug&quot; aria-label=&quot;waug permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;WAUG&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;어떤 이슈 있었는지&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;cluster 어떻게 구현했나&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</content:encoded></item></channel></rss>