{"version":3,"file":"component---src-page-template-post-tsx-8500d8b317cb7a551864.js","mappings":"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","sources":["webpack://sunrisehouse.github.io/./src/lib/FooterScript/index.tsx","webpack://sunrisehouse.github.io/./src/lib/comment/index.tsx","webpack://sunrisehouse.github.io/./src/view/component/comment/CommentBox/index.tsx","webpack://sunrisehouse.github.io/./src/view/component/comment/RegisterComponentForm/index.tsx","webpack://sunrisehouse.github.io/./src/view/component/page/PostPage/index.tsx","webpack://sunrisehouse.github.io/./src/page-template/Post.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Script } from \"gatsby\"\r\n\r\nconst FooterScript = () => {\r\n  return (\r\n    <>\r\n      {/* <!-- Google tag (gtag.js) --> */}\r\n      <Script async src=\"https://www.googletagmanager.com/gtag/js?id=G-V0R9C5E0S7\" />\r\n      <Script>\r\n        {`\r\nwindow.dataLayer = window.dataLayer || [];\r\nfunction gtag(){dataLayer.push(arguments);}\r\ngtag('js', new Date());\r\ngtag('config', 'G-V0R9C5E0S7');\r\n        `}\r\n      </Script>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default FooterScript;\r\n","const repo = 'sunrisehouse/sunrisehouse.github.io';\r\n\r\nexport interface Comment {\r\n  writer: string;\r\n  writeDate: string;\r\n  content: string;\r\n}\r\n\r\ninterface Issue {\r\n  id: number;\r\n  title: string;\r\n  body: string;\r\n  number: number;\r\n}\r\n\r\ninterface IssueComment {\r\n  body: string;\r\n}\r\n\r\nconst getGithubToken = () => {\r\n  return atob('Z2hwX2l1WnRlU0xGR1B6WXZia0Y4OU9SU0doMjRZMVNPYjJTUWVFaQ==');\r\n}\r\n\r\nconst findPostIssue = async (postId: number) => {\r\n  const issuesResponse = await fetch(`https://api.github.com/repos/${repo}/issues`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"token \" + getGithubToken(),\r\n    }\r\n  });\r\n  const issues = await issuesResponse.json() as Issue[];\r\n  const issue = issues.find(issue => issue.title == `post ${postId} comments`) ?? null;\r\n  return issue;\r\n}\r\n\r\nexport const fetchPostComments = async (postId: number): Promise<Comment[]> => {\r\n  const issue = await findPostIssue(postId);\r\n  if (issue) {\r\n    const commentsResponse = await fetch(`https://api.github.com/repos/${repo}/issues/${issue?.number}/comments`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: \"token \" + getGithubToken(),\r\n      }\r\n    });\r\n    const issueComments = await commentsResponse.json() as IssueComment[];\r\n    const comments = issueComments.map(issue => JSON.parse(issue.body)); \r\n    return comments\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const registerPostComment = async (postId: number, writer: string, content: string) => {\r\n  const auth = getGithubToken();\r\n  const comment: Comment = {\r\n    writer, content,\r\n    writeDate: format(new Date()),\r\n  }\r\n  let issue = await findPostIssue(postId);\r\n  if (issue == null) {\r\n    const response = await fetch(`https://api.github.com/repos/${repo}/issues`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"token \" + auth,\r\n        },\r\n        body: JSON.stringify({\r\n          title: `post ${postId} comments`,\r\n          labels: ['post comments'],\r\n        }),\r\n      }\r\n    );\r\n    issue = await response.json() as Issue;\r\n  }\r\n\r\n  if (issue) {\r\n    await fetch(`https://api.github.com/repos/${repo}/issues/${issue.number}/comments`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"token \" + auth,\r\n        },\r\n        body: JSON.stringify({\r\n          body: JSON.stringify(comment),\r\n        }),\r\n      }\r\n    );\r\n    return;\r\n  }\r\n  throw Error();\r\n}\r\n\r\nfunction format(dateIn: Date) {\r\n  const year = dateIn.getFullYear();\r\n  const month = dateIn.getMonth() + 1;\r\n  const date = dateIn.getDate();\r\n  const hour = dateIn.getHours();\r\n  const min = dateIn.getMinutes();\r\n  return `${year}-${month < 10 ? '0'+month:month}-${date < 10 ? '0'+date:date} ${hour < 10 ? '0'+hour:hour}:${min < 10 ? '0'+min:min}`\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport './index.scss';\r\n\r\nexport interface Comment {\r\n  writer: string;\r\n  content: string;\r\n  writeDate: string;\r\n}\r\n\r\ninterface Props {\r\n  comment: Comment;\r\n}\r\n\r\nconst CommentBox: FunctionComponent<Props> = ({ comment }) => {\r\n  return (\r\n    <div className='comment-box-comp'>\r\n      <div className='writer-container'>\r\n        <p className='name'>Writer. {comment.writer}</p>\r\n        <p className='date'>{comment.writeDate}</p>\r\n      </div>\r\n      <div className='content-container'>\r\n        <p>\r\n          {comment.content}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default CommentBox;\r\n","import React, { FunctionComponent } from 'react';\r\nimport './index.scss';\r\n\r\ninterface Props {\r\n  writerRef: React.Ref<HTMLInputElement> | null;\r\n  contentRef: React.Ref<HTMLTextAreaElement> | null;\r\n  onClickRegister: React.FormEventHandler<HTMLFormElement>;\r\n}\r\n\r\nconst RegisterCommentForm: FunctionComponent<Props> = ({\r\n  writerRef, contentRef, onClickRegister,\r\n}) => {\r\n  \r\n  return (\r\n    <form className='register-comment-form-comp' onSubmit={onClickRegister}>\r\n      <div className='form'>\r\n        <label className='writer-label'>\r\n          <span className='label'>Writer. </span>  \r\n          <input ref={writerRef}></input>\r\n        </label>\r\n        <label className='content-label'>\r\n          <span className='label'>Content</span> \r\n          <textarea ref={contentRef} />\r\n        </label>\r\n        <div className='submit-button-container'>\r\n          <button type=\"submit\" className='submit-button'>\r\n            Register\r\n          </button>\r\n        </div>\r\n        <div className='caution'>\r\n          작성하신 댓글은 스스로 삭제하실 수 없습니다! 삭제를 원하시면 ajtwlswjddnv1102@gmail.com 로 연락주세요!\r\n          댓글 기능은 Github Issue API 를 이용해 만들었습니다! 댓글 등록이 안되면 연락주세요! 댓글이 바로 반영되지 않을 수도 있어요!\r\n          API requests limitation 이 있어서 너무 많이 보시면 댓글이 안보입니다!\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default RegisterCommentForm;\r\n","import { Link } from 'gatsby';\r\nimport React, { ComponentElement, FunctionComponent, ReactElement } from 'react';\r\nimport CommentBox, { Comment } from '../../comment/CommentBox';\r\nimport RegisterCommentForm from '../../comment/RegisterComponentForm';\r\n\r\nimport './index.scss';\r\n\r\ninterface Props {\r\n  post: Post;\r\n  comments: Comment[]|null; \r\n  writerRef: React.Ref<HTMLInputElement> | null;\r\n  contnetRef: React.Ref<HTMLTextAreaElement> | null;\r\n  onClickRegister: React.FormEventHandler;\r\n}\r\ninterface Post {\r\n  title: string;\r\n  html: string;\r\n  mainImageUrl: string;\r\n  dateString: string;\r\n}\r\n\r\nconst PostPage: FunctionComponent<Props> = ({\r\n  post, comments, writerRef, contnetRef, onClickRegister,\r\n}) => {\r\n  return (\r\n    <div className=\"post-page-comp\">\r\n      <div\r\n        className=\"main-image-container\"\r\n        style={{\r\n          backgroundImage: `url(${post.mainImageUrl})`,\r\n        }}\r\n      >\r\n        <div className=\"cover\">\r\n          <div className=\"center\">\r\n            <h1 className=\"title\">{post.title}</h1>\r\n            <h3 className=\"date\">{post.dateString}</h3>\r\n          </div>\r\n          <div className='left-bottom'>\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"contents-container\">\r\n        <div\r\n          className=\"description markdown-style\"\r\n          dangerouslySetInnerHTML={{ __html: post.html }}\r\n        >\r\n\r\n        </div>\r\n        <div className='comments-section'>\r\n          <h3>Comments</h3>\r\n          <div>\r\n            <RegisterCommentForm\r\n              writerRef={writerRef}\r\n              contentRef={contnetRef}\r\n              onClickRegister={onClickRegister}\r\n              />\r\n          </div>\r\n          {\r\n            comments &&\r\n              <div className='comments-container'>\r\n                {comments.map((comment, index) => <div key={index} className='comment-wrapper'>\r\n                  <CommentBox comment={comment} /> \r\n                  </div>\r\n                )}\r\n              </div>\r\n          }\r\n        </div>\r\n      </div>\r\n      <div className=\"home-button\">\r\n        <Link\r\n          to={'/'}\r\n          className='hanjungwoo'\r\n        >\r\n          Jungwoo Han\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n","import { PageProps } from \"gatsby\";\r\nimport React, { FunctionComponent, useState, useEffect, useRef } from \"react\";\r\nimport FooterScript from \"../lib/FooterScript\";\r\nimport Head from \"../lib/Head\";\r\nimport { Comment, fetchPostComments, registerPostComment } from \"../lib/comment\"\r\n\r\nimport PostPage from '../view/component/page/PostPage';\r\n\r\nconst Post: FunctionComponent<PageProps> = ({ pageContext }) => {\r\n  const post = pageContext['post'];\r\n  const [comments, setComments] = useState<null|Comment[]>(null);\r\n  const writerRef = useRef<HTMLInputElement>(null);\r\n  const contentRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const [registeringComment, setRegisteringComment] = useState<Comment>(\r\n    { writer: '', writeDate: '', content: '' }\r\n  );\r\n  \r\n  const fetchComments = async () => {\r\n    try {\r\n      setComments(await fetchPostComments(post.id))\r\n    } catch(error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  const onClickRegisterComment = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    const writer = writerRef.current?.value;\r\n    const content = contentRef.current?.value;\r\n\r\n    if (!!!writer || writer.length < 1) {\r\n      alert('No Writer');\r\n      return;\r\n    }\r\n    if (!!!content || content.length < 1) {\r\n      alert('No Content');\r\n      return;\r\n    }\r\n    try {\r\n      await registerPostComment(post.id, writer, content);\r\n      location.reload();\r\n    } catch(error) {\r\n      console.error('Fail to register a comment');\r\n      console.error(error);\r\n      alert('Fail to register a comment');\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    fetchComments();\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n    <Head\r\n      title={post.title}\r\n      description={post.description}\r\n    />\r\n    <PostPage\r\n      post={post}\r\n      comments={comments}\r\n      writerRef={writerRef}\r\n      contnetRef={contentRef}\r\n      onClickRegister={onClickRegisterComment}\r\n    />\r\n    <FooterScript />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n"],"names":["React","Script","async","src","repo","getGithubToken","atob","findPostIssue","issuesResponse","fetch","method","headers","Authorization","json","find","issue","title","postId","format","dateIn","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","_ref","comment","className","writer","writeDate","content","writerRef","contentRef","onClickRegister","onSubmit","ref","type","post","comments","contnetRef","style","backgroundImage","mainImageUrl","dateString","dangerouslySetInnerHTML","__html","html","RegisterCommentForm","map","index","key","CommentBox","Link","to","pageContext","setComments","useState","useRef","registeringComment","setRegisteringComment","fetchComments","commentsResponse","number","JSON","parse","body","fetchPostComments","id","error","console","useEffect","Head","description","PostPage","event","preventDefault","current","_writerRef$current","value","_contentRef$current","length","alert","auth","Date","response","stringify","labels","Error","registerPostComment","location","reload","FooterScript"],"sourceRoot":""}