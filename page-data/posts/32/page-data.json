{"componentChunkName":"component---src-page-template-post-tsx","path":"/posts/32/","result":{"pageContext":{"post":{"id":32,"title":"resilience4j-circuitbreaker","dateString":"2023-07-10","description":"","mainImageUrl":"/images/32-0.jfif","postThemes":[{"name":"post","id":1}],"html":"<h1 id=\"resilience4j-circuitbreaker\" style=\"position:relative;\"><a href=\"#resilience4j-circuitbreaker\" aria-label=\"resilience4j circuitbreaker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>resilience4j-circuitbreaker</h1>\n<blockquote>\n<p>글은 탑다운 형식으로 어떻게 사용하는지 부터해서 logical 하게 어떻게 구성되어 있는지, 실제로는 어떻게 구현되어 있는지 작성하려고 했는데 쉽지 않은 것 같다.</p>\n</blockquote>\n<p>Resilience4j 는 Java 기반의 failure tolerance library 이다.\r\nversion2 는 Java 17 기반으로 작성됐다.\r\nresilience4j-circuitbreaker 는 resilience4j 의 circuit breaker 모듈이다.\r\ncircuit breeaker 패턴을 구현해 놓았다.</p>\n<h2 id=\"1-구성요소\" style=\"position:relative;\"><a href=\"#1-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" aria-label=\"1 구성요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 구성요소</h2>\n<p>크게 CircuitBreakerConfig, CircuitBreaker, CircuitBreakerRegistry 로 구성되어 있다.</p>\n<ul>\n<li>CircuitBreakerConfig\n<ul>\n<li>CircuitBreaker 에 대한 설정</li>\n</ul>\n</li>\n<li>CircuitBreaker\n<ul>\n<li>CircuitBreaker</li>\n</ul>\n</li>\n<li>CircuitBreakerRegistry\n<ul>\n<li>CircuitBreaker 인스턴스들을 저장한다.</li>\n<li>ConccurentMap 을 통해 thread safety, atomicity guarantees 를 보장한다.</li>\n<li>ConcurrentMap&#x3C;String, CircuitBreaker> -> CircutBreaker 이름을 키값으로 인스턴스들을 저장한다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-사용-방법\" style=\"position:relative;\"><a href=\"#2-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"2 사용 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 사용 방법</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Create a custom configuration for a CircuitBreaker</span>\r\n<span class=\"token class-name\">CircuitBreakerConfig</span> circuitBreakerConfig <span class=\"token operator\">=</span> <span class=\"token class-name\">CircuitBreakerConfig</span><span class=\"token punctuation\">.</span><span class=\"token function\">custom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">failureRateThreshold</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">slowCallRateThreshold</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">waitDurationInOpenState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">slowCallDurationThreshold</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">permittedNumberOfCallsInHalfOpenState</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">minimumNumberOfCalls</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">slidingWindowType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SlidingWindowType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TIME_BASED</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">slidingWindowSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">recordException</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token constant\">INTERNAL_SERVER_ERROR</span>\r\n                 <span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">recordExceptions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">ignoreExceptions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OtherBusinessException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// Create a CircuitBreakerRegistry with a custom global configuration</span>\r\n<span class=\"token class-name\">CircuitBreakerRegistry</span> circuitBreakerRegistry <span class=\"token operator\">=</span> \r\n  <span class=\"token class-name\">CircuitBreakerRegistry</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>circuitBreakerConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// Get or create a CircuitBreaker from the CircuitBreakerRegistry </span>\r\n<span class=\"token comment\">// with the global default configuration</span>\r\n<span class=\"token class-name\">CircuitBreaker</span> circuitBreakerWithDefaultConfig <span class=\"token operator\">=</span> \r\n  circuitBreakerRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">circuitBreaker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// Given</span>\r\n<span class=\"token class-name\">CircuitBreaker</span> circuitBreaker <span class=\"token operator\">=</span> <span class=\"token class-name\">CircuitBreaker</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofDefaults</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// When I decorate my function</span>\r\n<span class=\"token class-name\">CheckedFunction0</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> decoratedSupplier <span class=\"token operator\">=</span> <span class=\"token class-name\">CircuitBreaker</span>\r\n        <span class=\"token punctuation\">.</span><span class=\"token function\">decorateCheckedSupplier</span><span class=\"token punctuation\">(</span>circuitBreaker<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"This can be any method which returns: 'Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"3-동작\" style=\"position:relative;\"><a href=\"#3-%EB%8F%99%EC%9E%91\" aria-label=\"3 동작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 동작</h2>\n<h3 id=\"31-closed-state\" style=\"position:relative;\"><a href=\"#31-closed-state\" aria-label=\"31 closed state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 closed state</h3>\n<h4 id=\"311-요청에-대한-결과-저장\" style=\"position:relative;\"><a href=\"#311-%EC%9A%94%EC%B2%AD%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B2%B0%EA%B3%BC-%EC%A0%80%EC%9E%A5\" aria-label=\"311 요청에 대한 결과 저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1.1 요청에 대한 결과 저장</h4>\n<p>size N 인 circular array 에 요청을 저장한다.</p>\n<p>요청에 대한 결과를 저장하는 방식에는 count based sliding window 방식과 time based sliding window 방식이 있다.</p>\n<ul>\n<li>count based sliding window\n<ul>\n<li>최근 N 개의 요청 결과를 저장한다.</li>\n</ul>\n</li>\n<li>time based sliding window\n<ul>\n<li>최근 N 초 동안의 요청 결과를 저장한다.</li>\n<li>1초 동안 발생한 요청에 대한 결과를 하나의 bucket (circular array 의 한 요소) 에 점진적으로 증가시키며 저장한다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"312-결과를-토대로-threshold-와-비교\" style=\"position:relative;\"><a href=\"#312-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%ED%86%A0%EB%8C%80%EB%A1%9C-threshold-%EC%99%80-%EB%B9%84%EA%B5%90\" aria-label=\"312 결과를 토대로 threshold 와 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1.2 결과를 토대로 Threshold 와 비교</h4>\n<p>저장한 요청이 최소 개수 이상이 되면 failure rate 와 slow call rate 가 계산된다.\r\n계산된 rate 가 threshold 이상이 되면 Open 상태로 바뀐다.</p>\n<h5 id=\"3121-failure-rate\" style=\"position:relative;\"><a href=\"#3121-failure-rate\" aria-label=\"3121 failure rate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1.2.1 failure rate</h5>\n<p>요청의 X 퍼센트가 실패했는지 threshold 로 지정한다.</p>\n<ul>\n<li>모든 exception 들은 failure 횟수에 포함된다.</li>\n<li>failure 로 포함시킬 exception 들을 list 로 지정할 수 있다. (나머지는 success)</li>\n<li>success 나 failure 로 포함시키지 않도록 할 수도 있다.</li>\n</ul>\n<h4 id=\"3122-success-call-rate\" style=\"position:relative;\"><a href=\"#3122-success-call-rate\" aria-label=\"3122 success call rate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1.2.2 success call rate</h4>\n<p>요청의 X 퍼센트가 S 초 이상 경과 후 응답을 받았는지 threshold 로 지정한다.</p>\n<h3 id=\"32-open-state\" style=\"position:relative;\"><a href=\"#32-open-state\" aria-label=\"32 open state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 open state</h3>\n<p>요청을 받으면 CallNotPermittedException 을 던지며 요청을 reject 한다.\r\nS 초 뒤에 half open 상태로 전환한다.</p>\n<h3 id=\"33-half-open-state\" style=\"position:relative;\"><a href=\"#33-half-open-state\" aria-label=\"33 half open state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3 half open state</h3>\n<p>X 개의 요청을 허용한다.\r\n모든 요청이 성공하면 closed 상태로 바뀐다.\r\nfailure rate 나 slow call rate 가 threshold 이상이면 다시 open state 로 바뀐다. (혹은 max 타임이 지나며면</p>\n<h3 id=\"34-disabled-state-forced-open-state\" style=\"position:relative;\"><a href=\"#34-disabled-state-forced-open-state\" aria-label=\"34 disabled state forced open state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4 disabled state, forced open state</h3>\n<p>CircuitBreaker 는 두가지 state 를 더 지원한다.</p>\n<ul>\n<li>disabled state: always allow access</li>\n<li>forced open: always deny access</li>\n</ul>\n<p>이 상태들은 상태 변화를 직접 트리거 하던가 CircuitBreaker 를 리셋해야지 다른 상태로 전환된다.</p>\n<h2 id=\"4-thred-safe\" style=\"position:relative;\"><a href=\"#4-thred-safe\" aria-label=\"4 thred safe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Thred Safe</h2>\n<ul>\n<li>state 가 atomic reference 로 저장된다.</li>\n<li>상태 전환에 atomic operation 이 사용된다.</li>\n<li>call 들을 sliding window 에 기록하는 것과 sliding window 의 snapshopt 을 읽어들이는 것이 동기화 되어 있다.</li>\n</ul>\n<h2 id=\"5-source\" style=\"position:relative;\"><a href=\"#5-source\" aria-label=\"5 source permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Source</h2>\n<p>resilience4j 의 release v2.1.0 을 기준으로 파악해보았다.</p>\n<h3 id=\"51-uml\" style=\"position:relative;\"><a href=\"#51-uml\" aria-label=\"51 uml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 UML</h3>\n<h4 id=\"511-circuitbreaker\" style=\"position:relative;\"><a href=\"#511-circuitbreaker\" aria-label=\"511 circuitbreaker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1.1 CircuitBreaker</h4>\n<img src=\"/images/32-1.png\" style=\"width: 100%\" />\n<h4 id=\"512-circuitbreakerconfig\" style=\"position:relative;\"><a href=\"#512-circuitbreakerconfig\" aria-label=\"512 circuitbreakerconfig permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1.2 CircuitBreakerConfig</h4>\n<img src=\"/images/32-1.png\" style=\"width: 100%\" />\n<h4 id=\"513-circuitbreakerregistry\" style=\"position:relative;\"><a href=\"#513-circuitbreakerregistry\" aria-label=\"513 circuitbreakerregistry permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1.3 CircuitBreakerRegistry</h4>\n<img src=\"/images/32-1.png\" style=\"width: 100%\" />"}}},"staticQueryHashes":[],"slicesMap":{}}