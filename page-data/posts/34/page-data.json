{"componentChunkName":"component---src-page-template-post-tsx","path":"/posts/34/","result":{"pageContext":{"post":{"id":34,"title":"Toss Slash23 (2) - 코어 뱅킹 MSA 전환","dateString":"2023-07-12","description":"Toss Slash 를 너무 재밌게 보고 정리해보았다.","mainImageUrl":"/images/34-0.webp","postThemes":[{"name":"post","id":1}],"html":"<h1 id=\"1-코어-뱅킹-msa-전환-feat-지금-이자받기\" style=\"position:relative;\"><a href=\"#1-%EC%BD%94%EC%96%B4-%EB%B1%85%ED%82%B9-msa-%EC%A0%84%ED%99%98-feat-%EC%A7%80%EA%B8%88-%EC%9D%B4%EC%9E%90%EB%B0%9B%EA%B8%B0\" aria-label=\"1 코어 뱅킹 msa 전환 feat 지금 이자받기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 코어 뱅킹 MSA 전환 (feat. 지금 이자받기)</h1>\n<p><a href=\"https://youtu.be/amTJyIE1wO0\">보러가기</a></p>\n<blockquote>\n<p>Toss Slash 에서 가장 눈에 먼저 보인 영상이다. 이번에 카드 시스템을 MSA 로 개발하는데 toss 는 어떻게 했나 궁금했다. 같은 금융 시스템이다 보니 비슷한 아키텍처도 많았고 다른 점도 있는 것 같다. 비동기 처리나 동시성 제어 관련해서 고민이 많은데 좀 더 자세한 설명을 듣고싶지만 그럴 수 없어 아쉽다.</p>\n</blockquote>\n<h2 id=\"11-msa-전환-이유\" style=\"position:relative;\"><a href=\"#11-msa-%EC%A0%84%ED%99%98-%EC%9D%B4%EC%9C%A0\" aria-label=\"11 msa 전환 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 MSA 전환 이유</h2>\n<ul>\n<li>모바일 위주로 대량의 트래픽을 안정적으로 서비스해야하는 구조에는 monolithic architecture 는 한계가 있다.</li>\n<li>현재의 차세대 코어뱅킹 아키텍처를 모바일과 대량 트래픽에 특화된 마이크로 서비스 아키텍처로 바꿔봐야겠다.</li>\n<li>트래픽이 높은 서비스가 피크타임에도 유연하게 스케일 아웃할 수 있게하기 위해서.</li>\n<li>이자 받기의 장애가 전체 서비스의 장애로 이어지는 것을 막을 수 있는 독립적인 마이크로서비스로 전환</li>\n</ul>\n<h2 id=\"12-개발-방법\" style=\"position:relative;\"><a href=\"#12-%EA%B0%9C%EB%B0%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"12 개발 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2 개발 방법</h2>\n<h3 id=\"121-기술-스택\" style=\"position:relative;\"><a href=\"#121-%EA%B8%B0%EC%88%A0-%EC%8A%A4%ED%83%9D\" aria-label=\"121 기술 스택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2.1 기술 스택</h3>\n<ul>\n<li>토스뱅크 채널 서버에서 사용하고 있는 기술들</li>\n<li>kubernetes</li>\n<li>Spring boot, Kotlin, JPA</li>\n<li>비동기 메시지 처리와 캐싱: Kafka, Redis</li>\n</ul>\n<h3 id=\"122-동시성-제어\" style=\"position:relative;\"><a href=\"#122-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%A0%9C%EC%96%B4\" aria-label=\"122 동시성 제어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2.2 동시성 제어</h3>\n<p>Redis Global Lock 뿐만 아니라 JPA 의 @Lock 어노테이션을 통해 해결했다.</p>\n<img src=\"/images/33-4.jpg\" style=\"width:100%\" />\n<h3 id=\"123-성능-개선을-위한-비동기-처리\" style=\"position:relative;\"><a href=\"#123-%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0%EC%9D%84-%EC%9C%84%ED%95%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC\" aria-label=\"123 성능 개선을 위한 비동기 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2.3 성능 개선을 위한 비동기 처리</h3>\n<ul>\n<li>비동기 처리 = 트랜잭션 분리</li>\n<li>트랜잭션 분리 기준\n<ul>\n<li>통장 데이터가 실시간으로 문제가 발생하는가?</li>\n<li>반드시 트랜잭션이 보장되어야 하는 데이터 모델과 즉시성을 요하지 않는 데이터 모델의 DML 은 트랜잭션을 분리했다.</li>\n</ul>\n</li>\n<li>kafka 구성\n<ul>\n<li>kafka 메시지가 정상적으로 처리되지 않는 경우를 대비해 dead letter queue 를 이용해서 consume 하는 트랜잭션을 안정적으로 보장할 수 있도록 했다.</li>\n<li>재처리 시 중복으로 세금이 업데이트 안되도록 API 의 멱등성도 확보했다.</li>\n</ul>\n</li>\n<li>성과\n<ul>\n<li>ASIS 트랜잭션: 80 회의 DML</li>\n<li>TOBE 트랜잭션: 50 회의 DML + 다른 30 회의 DML</li>\n</ul>\n</li>\n</ul>\n<img src=\"/images/33-2.jpg\" style=\"width:100%\" />\r\n<img src=\"/images/33-3.jpg\" style=\"width:100%\" />\n<blockquote>\n<ul>\n<li>\n<p>이번에 진행하는 프로젝트에서는 성능 개선만이 목표가 아니라 서비스의 안정성을 위해서, 다른 서비스와의 의존성을 줄이기 위해서 사용하는게 더 크다고 느껴졌다.</p>\n</li>\n<li>\n<p>비동기 처리도 좋지만 그에 대한 보상 처리, 트랜잭션 롤백 처리 방안을 어떻게 구성했나 또한 궁금하다.</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"124-redis-를-활용한-캐싱\" style=\"position:relative;\"><a href=\"#124-redis-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%BA%90%EC%8B%B1\" aria-label=\"124 redis 를 활용한 캐싱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2.4 redis 를 활용한 캐싱</h3>\n<ul>\n<li>하루에 한 번 갱신되는 데이터</li>\n<li>매일 자정 이후 처음 접근 할 때 한번 가져와 redis 에 저장, 이후에는 redis 에서 가져다 쓴다.</li>\n<li>캐시에도 만료 기간을 설정해 놓는다.</li>\n</ul>\n<img src=\"/images/33-11.jpg\" style=\"width:100%\" />\n<h2 id=\"13-성과\" style=\"position:relative;\"><a href=\"#13-%EC%84%B1%EA%B3%BC\" aria-label=\"13 성과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3 성과</h2>\n<ul>\n<li>MCI 를 통하지 않고 자체적으로 요청을 받고 응답을 주기 떄문에 코어 뱅킹 서버와 서로 영향을 주지 않는 독립적인 서버 -> 서비스 간의 영향도 최소화</li>\n<li>다른 서비스 호출을 통해 더 유연하고, 더 확장성 있는 상품 개발이 가능해짐</li>\n<li>새로운 코어 뱅킹 거래를 이식하는 데에 있어 확장성이 좋아짐\n<ul>\n<li>일반적인 조회 거래, 출금/입금을 조합한 송금 모듈을 이용해서 이체 및 각종 원장 거래들을 붙이기가 용이해졌다.</li>\n</ul>\n</li>\n<li>레거시 코드 청산</li>\n<li>성능 개선\n<ul>\n<li>레거시 코드의 비효율적으로 여러 번 발생하던 DB/IO 줄임</li>\n<li>공통적으로 처리되던 코어 뱅킹 시스템의 선후처리를 거둠</li>\n<li>mci 평균 소요시간 250ms -> 마이크로서버 api 평균 소요 시간7ms</li>\n</ul>\n</li>\n<li>오픈 소스 기반 개발 시스템 변화로 신기술 적용</li>\n</ul>\n<h2 id=\"14-배포\" style=\"position:relative;\"><a href=\"#14-%EB%B0%B0%ED%8F%AC\" aria-label=\"14 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.4 배포</h2>\n<p>어떻게 안정적으로 배포했나</p>\n<h3 id=\"141-정합성-검증-방법\" style=\"position:relative;\"><a href=\"#141-%EC%A0%95%ED%95%A9%EC%84%B1-%EA%B2%80%EC%A6%9D-%EB%B0%A9%EB%B2%95\" aria-label=\"141 정합성 검증 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.4.1 정합성 검증 방법</h3>\n<ul>\n<li>온라인 거래 시 기존 코어 뱅킹과 마이크로 서버 둘 다로 이자 조회 api 를 호출하도록 했고 값을 비교해서 불일치 할 시 모니터링 채널에 알림이 가도록했다.</li>\n<li>배치도 마찬가지</li>\n</ul>\n<img src=\"/images/33-12.jpg\" style=\"width:100%\" />\n<h3 id=\"142-순차-배포\" style=\"position:relative;\"><a href=\"#142-%EC%88%9C%EC%B0%A8-%EB%B0%B0%ED%8F%AC\" aria-label=\"142 순차 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.4.2 순차 배포</h3>\n<p>팀내 -> 토스내 -> 일부 고객 대상 -> 전체 고객 대상</p>\n<img src=\"/images/33-15.jpg\" style=\"width:100%\" />\n<h3 id=\"143-테스트-시나리오-작성-및-e2e-통합-테스트-수행\" style=\"position:relative;\"><a href=\"#143-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4-%EC%9E%91%EC%84%B1-%EB%B0%8F-e2e-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%88%98%ED%96%89\" aria-label=\"143 테스트 시나리오 작성 및 e2e 통합 테스트 수행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.4.3 테스트 시나리오 작성 및 E2E 통합 테스트 수행</h3>\n<ul>\n<li>잔액 구간 분리, 고객 상태, 계좌 상태, 출금/입금 정지 상태 의 4가지 케이스를 중심으로 테스트 케이스를 수립</li>\n<li>각각 테스트 데이터를 만들어서 통합 테스트를 진행</li>\n</ul>\n<img src=\"/images/33-16.jpg\" style=\"width:100%\" />\n<blockquote>\n<p>테스트 케이스를 나눈 기준이 궁금하다.</p>\n</blockquote>"}}},"staticQueryHashes":[],"slicesMap":{}}