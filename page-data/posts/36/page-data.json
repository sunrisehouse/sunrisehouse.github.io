{"componentChunkName":"component---src-page-template-post-tsx","path":"/posts/36/","result":{"pageContext":{"post":{"id":36,"title":"Toss Slash23 (4) - Kafka 이중화로 다양한 장애 상황 완벽 대처하기","dateString":"2023-07-14","description":"Toss Slash 를 너무 재밌게 보고 정리해보았다.","mainImageUrl":"/images/36-0.webp","postThemes":[{"name":"post","id":1}],"html":"<h1 id=\"kafka-이중화로-다양한-장애-상황-완벽-대처하기\" style=\"position:relative;\"><a href=\"#kafka-%EC%9D%B4%EC%A4%91%ED%99%94%EB%A1%9C-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%9E%A5%EC%95%A0-%EC%83%81%ED%99%A9-%EC%99%84%EB%B2%BD-%EB%8C%80%EC%B2%98%ED%95%98%EA%B8%B0\" aria-label=\"kafka 이중화로 다양한 장애 상황 완벽 대처하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kafka 이중화로 다양한 장애 상황 완벽 대처하기!</h1>\n<p><a href=\"https://youtu.be/Pzkioe7Dvo4\">보러가기</a></p>\n<blockquote>\n<p><strong>Kafka 이중화 ??</strong></p>\n<p>Kafka 클러스터 안에 노드는 다중화 구성을 통해 안정적으로 운영이 가능하다고 알고 있었다. 클러스터 자체를 이중화 구성해야 한다는 생각 자체를 안해본 것 같다. Kafka 클러스터 이중화를 한거면 Kubernetes 클러스터도 이중화 되어 있나?? 하는 생각도 들고 단점이 더 크지 않을까 하는 생각도 들긴하는데 일단 구성에 성공했다는게 멋진 것 같다. 이중화를 위해서 Kafka Connect 사용했는데 이것도 이중화해야하는거 아니야?? 이중화란 것에 대해서 좀 생각을 해봐야 할 것 같다. 물론 되어 있으면 좋지만 그에 대한 오버헤드 또한 고려해야할 것 같다. Kafka 또한 메시지를 보관하는 중요한 Data 저장소라고 생각하면 괜찮은 것 같기도 하다. 아니면 Kafka 에 대한 신뢰가 부족해서 그런 것 같기도 하다.</p>\n</blockquote>\n<blockquote>\n<p><strong>active - active 이게 되네??</strong></p>\n<p>DB 도 그렇고 active - active 구성에 대해 이게 진짜 돼?? 라는 생각을 갖고 있었다. Kafka 를 active - active 로 이중화 구성을 했다는 것에 놀랐다. active - standby, active - active 에 대한 토스의 생각 또한 재밌었다. 데이터 sync 를 맞추기 위해서 kafka connect 를 쓴다는데 현재 신용 카드 프로젝트에서 Kafka Connect 에 대해 조사 중 신뢰성이 부족하다는 얘기가 있는데 토스는 어떻게 판단했나 궁금하다.</p>\n</blockquote>\n<h2 id=\"1-kafka-장애-상황\" style=\"position:relative;\"><a href=\"#1-kafka-%EC%9E%A5%EC%95%A0-%EC%83%81%ED%99%A9\" aria-label=\"1 kafka 장애 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Kafka 장애 상황</h2>\n<h4 id=\"11-kafka-cluster-내의-일부-노드-장애\" style=\"position:relative;\"><a href=\"#11-kafka-cluster-%EB%82%B4%EC%9D%98-%EC%9D%BC%EB%B6%80-%EB%85%B8%EB%93%9C-%EC%9E%A5%EC%95%A0\" aria-label=\"11 kafka cluster 내의 일부 노드 장애 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 Kafka Cluster 내의 일부 노드 장애</h4>\n<p>kafka 가 분산 시스템이라 클러스터 내 일부 노드 장애가 발생해도 가용성을 헤치지 않고 서비스를 유지할 수 있도록 디자인이 돼어 있다.\r\n오랜 운영 경험으로 장애 징후 감지 모니터링이나 장애 대응 프로세스 정립으로 극복 가능</p>\n<h4 id=\"12-idc-전면-장애\" style=\"position:relative;\"><a href=\"#12-idc-%EC%A0%84%EB%A9%B4-%EC%9E%A5%EC%95%A0\" aria-label=\"12 idc 전면 장애 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2 IDC 전면 장애</h4>\n<p>IDC 이중화가 안돼있다면 치명적인 장애 상황으로 이어짐\r\n지속적인 서비스 제공 목표 달성을 위해 이중화 필요하다.</p>\n<h2 id=\"2-kafka-2중화-구성\" style=\"position:relative;\"><a href=\"#2-kafka-2%EC%A4%91%ED%99%94-%EA%B5%AC%EC%84%B1\" aria-label=\"2 kafka 2중화 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. kafka 2중화 구성</h2>\n<ul>\n<li>\n<p>active - active, active - standby 선택에 대한 기준</p>\n<ul>\n<li>Active-Standby 는 장애 상황이 잦지 않기 때문에 평시에 잘 관리하고 있던 것이 아니라면 막상 장애 상황이 발생해도 Stand by 가 제대로 동작하지 않는경우가 많기 때문에 active-active 로 구성했다.</li>\n</ul>\n</li>\n<li>\n<p>고려할 점</p>\n<ul>\n<li>kafka 는 stateful 한 시스템이라 active active 이중화 구성이 어렵다</li>\n<li>어떻게 state 일관성을 유지할지 고민해보고 구성해야한다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>이중화 구성은 state 의 일관성을 맞춰줘야 하는군. 어떤 state 들이 있고 어떻게 맞춰줄지를 설계해야겠구만</p>\n</blockquote>\n<img src=\"/images/33-21.jpg\" style=\"width:100%;\" />\n<h3 id=\"21-구성-방법\" style=\"position:relative;\"><a href=\"#21-%EA%B5%AC%EC%84%B1-%EB%B0%A9%EB%B2%95\" aria-label=\"21 구성 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 구성 방법</h3>\n<ul>\n<li>각 IDC 에 절반씩 들어온 메시지는 전체 메시지를 가질 수 있도록 kafka connect 를 이용해 상대 쪽 IDC 로 실시간 메시지를 미러링 중</li>\n<li>Offset Sync 라는 데몬은 consumer group offset 을 실시간으로 양쪽 IDC 간 Sync 를 맞춰주고 있다.</li>\n<li>Consumer 가 한쪽 IDC 에만 붙어있다.\n<ul>\n<li>두군데 다 붙으면 메시지를 두 배 중복해서 소비하는 상황이 발생. 메시지 중복 소비 막기 위해 한쪽 IDC 에서만 소비하도록 구성</li>\n</ul>\n</li>\n</ul>\n<img src=\"/images/33-22.jpg\" style=\"width:100%;\" />\n<h4 id=\"211-kafka-connect-를-활용한-메시지-미러링\" style=\"position:relative;\"><a href=\"#211-kafka-connect-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%AF%B8%EB%9F%AC%EB%A7%81\" aria-label=\"211 kafka connect 를 활용한 메시지 미러링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1.1 Kafka Connect 를 활용한 메시지 미러링</h4>\n<ul>\n<li>kafka connect 를 이용해 서로의 메시지를 미러링한다.</li>\n<li>양방향 미러링 해주어야 하는 잡이 라이브 중인 토픽 개수만큼 필요하기 때문에 수백개가 되는데, 이런 부분이 이중화 구성 후 운영 부담으로 찾아온다.</li>\n</ul>\n<img src=\"/images/33-23.jpg\" style=\"width:100%;\" />\n<h4 id=\"212-offset-sync-를-활용한-offset-미러링\" style=\"position:relative;\"><a href=\"#212-offset-sync-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-offset-%EB%AF%B8%EB%9F%AC%EB%A7%81\" aria-label=\"212 offset sync 를 활용한 offset 미러링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1.2 Offset Sync 를 활용한 offset 미러링</h4>\n<ul>\n<li>소비하던 IDC 에서 다른 IDC 로 이사가야하는 경우 이전에 소비하던 부분부터 유실 없이 소비를 재개하기 위해서 다른 IDC 에도 offset 이 저장되고 있어야 한다.</li>\n<li>offset 은 클러스터마다 번호 체계가 다르므로 중간에 상대 쪽 IDC 에 맞는 번호로 변경해서 저장해야한다. 이 부분이 메시지 미러링과 다른 부분이다.</li>\n</ul>\n<img src=\"/images/33-24.jpg\" style=\"width:100%;\" />\n<h2 id=\"3-단점과-해결-방법\" style=\"position:relative;\"><a href=\"#3-%EB%8B%A8%EC%A0%90%EA%B3%BC-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"3 단점과 해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 단점과 해결 방법</h2>\n<ul>\n<li>\n<p>관리 클러스터 2배 증가</p>\n</li>\n<li>\n<p>메시지 미러링과 offset sync 를 하면서 운영 부담이 추가로 발생</p>\n</li>\n<li>\n<p>해결 방법: 운영에 대한 부담을 자동화로 해결하려고 노력했다.</p>\n<ul>\n<li>카프카 관리 앱(자동화 도구)을 개발해서 수백개의 토픽 이중화 상태를 관리, 새로 생기는 이중화 토픽들을 자동 생성하도록 운영</li>\n<li>모니터링 자동화\n<ul>\n<li>모든 메트릭 정보를 prometheus 로 숮집, thanos ruler 로 정의한 조건이 충적되면 알림</li>\n<li>클러스터의 모든 로그는 elastic search 로 , elast alert 로 알림</li>\n<li>장애 징후 감지를 위한 시계열 데이터의 이상 징후 탐지하는 머신러닝 모델 개발</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"}}},"staticQueryHashes":[],"slicesMap":{}}