{"componentChunkName":"component---src-page-template-post-tsx","path":"/posts/9/","result":{"pageContext":{"post":{"id":9,"title":"인간 컴파일러가 되어보았다","dateString":"2021-04-04","description":"컴퓨터 구조 수업에서 간단한 c 코드를 어셈블리어로 바꾸는 과제를 했다. 4 개의 함수를 어셈블리어로 바꾸는 과제였다. QtSpim 이라고 하는 processor 시뮬레이션 프로그램을 사용해 test 와 디버깅을 해볼 수 있었다.","mainImageUrl":"","postThemes":[{"name":"post","id":1}],"html":"<h1 id=\"인간-컴파일러가-되어보았다\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EA%B0%84-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EA%B0%80-%EB%90%98%EC%96%B4%EB%B3%B4%EC%95%98%EB%8B%A4\" aria-label=\"인간 컴파일러가 되어보았다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인간 컴파일러가 되어보았다.</h1>\n<p>컴퓨터 구조 수업에서 간단한 c 코드를 어셈블리어로 바꾸는 과제를 했다.</p>\n<p>4 개의 함수를 어셈블리어로 바꾸는 과제였다.</p>\n<p>QtSpim 이라고 하는 processor 시뮬레이션 프로그램을 사용해 test 와 디버깅을 해볼 수 있었다.</p>\n<p>코드는 <a href=\"https://github.com/HanJungwoo1102/mips-compile-using-qtspim\">여기</a> 있다.</p>\n<h2 id=\"함수-or-procedure\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-or-procedure\" aria-label=\"함수 or procedure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 or procedure</h2>\n<p>함수가 호출되면 caller 에서 쓰던 레지스터를 스택에 저장해줘야한다.</p>\n<p>tN(t0, t1, t2, ...) 레지스터들은 스택에 저장해줄 필요가 없다.</p>\n<p>sN(s0, s1, s2, ...) 레지스터들은 스택에 저장해줘야한다.</p>\n<p>저장, 적재하는 연산 빠지는게 좋으니 가급적 tN 레지스터를 사용하는게 좋지 않을까??</p>\n<p>일단 나는 c 코드에서 변수에 해당하는 레지스터는 sN 레지스터를 사용했지만 tN 레지스터를 써도 상관없지 않을까 하는 생각이 들고 뭐가 맞는지는 교수님께 여쭤봐야겠다.</p>\n<p>그리고 함수가 끝나면 스택에 저장해놨던 caller 에서 쓰던 레지스터를 복구해줘야한다.</p>\n<p>마지막으로 jr $ra 를 통해 return address 로 돌아가야한다.</p>\n<blockquote>\n<p>재귀 함수를 짜면서 알게 된 것은 재귀함수는 함수가 쌓일 때 $ra 도 같이 쌓는데 (계속 return address 를 저장해야하니까) main 에서 부른 함수는 $ra 를 저장하지 않았다.</p>\n</blockquote>\n<p>main 에서는 $ra 를 사용하지 않아도 되는 건가 생각 해 봐야겠다.\r\n그럴리 없는데 코드 다시 짜야할 것 같은 느낌이...\r\n그런데 교재 예제에서는 $ra 를 스택에 쌓지 않는다.\r\n흠...</p>\n<div class=\"gatsby-highlight\" data-language=\"assembler\"><pre class=\"language-assembler\"><code class=\"language-assembler\">FUNC:\r\n  addi $sp, $sp, -8                             \r\n  sw $s1, 4($sp)\r\n  sw $s0, 0($sp)\r\n\r\n  ~ 함수 ~\r\n\r\n  lw $s0, 0($sp)\r\n  lw $s1, 4($sp)\r\n  addi $sp, $sp, 8\r\n  jr $ra</code></pre></div>\n<h2 id=\"for\" style=\"position:relative;\"><a href=\"#for\" aria-label=\"for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for</h2>\n<p>내가 작성한 for 문은 다음의 형식이 반복 됐다.</p>\n<p>맞기는 한데 이렇게 말고도 다른 방법으로도 작성할 수 있을 것 같은데 뭐가 맞는지 모르겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"assembler\"><pre class=\"language-assembler\"><code class=\"language-assembler\">\r\n  mv $t0, $zero         # i = 0 (for 문 초기화)\r\nFOR:\r\n  slt ...\r\n  beq ..., FOR_END,     # for 종료 조건\r\n\r\n  ...\r\n\r\n  addi $t0, $t0, 1      # i += 1 (1 증가)\r\n  j FOR\r\nFOR_END:\r\n</code></pre></div>\n<h2 id=\"이중-배열\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A4%91-%EB%B0%B0%EC%97%B4\" aria-label=\"이중 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이중 배열</h2>\n<p>이중 배열에 접근하는 것도 형식이 유사했다.</p>\n<p>배열 메모리 주소: $s0</p>\n<p>배열 크기: $s1 (NxN 배열일 때 N 에 해당)</p>\n<p>i: $s2</p>\n<p>j: $s3</p>\n<div class=\"gatsby-highlight\" data-language=\"assembler\"><pre class=\"language-assembler\"><code class=\"language-assembler\">  # array[i][j]\r\n\r\n  mult $s2, $s1           \r\n  mflo $t0                # $t0 = N * i\r\n  add $t0, $t0, $s3       # $t0 = N * i + j                      \r\n  sll $t4, $t4, 2         # $t0 = 4(N * i + j)\r\n  add $t0, $t0, $s0       # $t0 = &amp;array + 4(N * i + j)\r\n  lw $t0, 0($t0)          # $t0 = array[i][j]</code></pre></div>\n<h2 id=\"의문\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EB%AC%B8\" aria-label=\"의문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의문</h2>\n<p>일단 t0 쓸지 s1 쓸지</p>\n<p>다른 함수 호출해도 보존이 돼야하는 정보는 sN 에 넣는야 하는 것 같다.</p>\n<p>이 생각이 맞나 궁금하고 그 외 다른 게 있나 궁금하다.</p>\n<p>그다음에 레지스터를 0으로 초기화하는 것을 add $s0, $s0, $zero 쓰면되나 $addi $s0, $s0, 0 쓰면 되나 mv 는 add 이용해서 하는 거라고 봤던 것 같기도 하고</p>"}}},"staticQueryHashes":[],"slicesMap":{}}