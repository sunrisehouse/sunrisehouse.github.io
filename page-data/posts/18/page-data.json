{"componentChunkName":"component---src-page-template-post-tsx","path":"/posts/18/","result":{"pageContext":{"post":{"id":18,"title":"Operating System 6 - Deadlock Handling","dateString":"2021-12-16","description":"운영체제 시스템 안에서 여러 프로세스들이 자신이 필요한 Resource 들을 사용하기 위해 운영체제한테 요청한다. Resource 들은 한정돼 있고 그때마다 프로세스들은 asleep 상태로 기다리게 된다. 그러다 어떤 경우에 특정 프로세스들이 자원을 요청하며 깨어나지 못하는 상황이 발생한다. 이 상황을 Deadlock 이라고 하고 이 Deadlock 을 어떻게 찾아내고 어떻게 해결할지에 대해서 정리해 봅시다.","mainImageUrl":"/images/12-0.jpeg","postThemes":[{"name":"post","id":1}],"html":"<h1 id=\"deadlock-handling\" style=\"position:relative;\"><a href=\"#deadlock-handling\" aria-label=\"deadlock handling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deadlock Handling</h1>\n<p>운영체제 시스템 안에서 여러 프로세스들이 자신이 필요한 Resource 들을 사용하기 위해 운영체제한테 요청한다. Resource 들은 한정돼 있고 그때마다 프로세스들은 asleep 상태로 기다리게 된다. 그러다 어떤 경우에 특정 프로세스들이 자원을 요청하며 깨어나지 못하는 상황이 발생한다. 이 상황을 Deadlock 이라고 하고 이 Deadlock 을 어떻게 찾아내고 어떻게 해결할지에 대해서 정리해 봅시다.</p>\n<h2 id=\"1-deadlock-state\" style=\"position:relative;\"><a href=\"#1-deadlock-state\" aria-label=\"1 deadlock state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Deadlock State</h2>\n<p>프로세스가 미래에 절대 일어나지 않을 이벤트를 기다리고 있는 상태이다.</p>\n<p>그러한 프로세스가 하나라도 있는 시스템을 Deadlock state 에 있다고 말한다.</p>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/18-1.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>다음과 같이 프로세스는 자원을 요청하며 asleep 상태로 기다린다.</p>\n<h2 id=\"2-resource-classification\" style=\"position:relative;\"><a href=\"#2-resource-classification\" aria-label=\"2 resource classification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Resource Classification</h2>\n<ol>\n<li>\n<p>preemptible vs non-preemtible</p>\n<ul>\n<li>프로세스에 의해서 preemtion 될 수 있는지 없는지</li>\n<li>preemtible: processor, memory...</li>\n</ul>\n</li>\n<li>\n<p>total allocation vs partitioned allocation</p>\n<ul>\n<li>자원 전체가 할당되야하는지</li>\n<li>total: processor...</li>\n<li>partitioned: memory...</li>\n</ul>\n</li>\n<li>\n<p>exclusive allocation vs shared allocation</p>\n<ul>\n<li>번갈아가면서 할당되야하는지 아니면 동시에 쓸 수 있는지</li>\n<li>exclusive: processor, memory...</li>\n<li>shared: program, shared data...</li>\n</ul>\n</li>\n<li>\n<p>serially reusable vs consumable</p>\n<ul>\n<li>연속해서 다시 쓸 수 있는지 아니면 한번 쓰고 끝나는지</li>\n<li>serially: processor, memory...</li>\n<li>consumable: signal, message...</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3-deadlock-model\" style=\"position:relative;\"><a href=\"#3-deadlock-model\" aria-label=\"3 deadlock model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Deadlock Model</h2>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/18-2.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>P1, P2 가 R1, R2 을 각각 할당 받고 사용하고 있는데 각자 R2, R1 을 요청하고 있는 이 상황.</p>\n<h2 id=\"4-deadlock-필수-조건\" style=\"position:relative;\"><a href=\"#4-deadlock-%ED%95%84%EC%88%98-%EC%A1%B0%EA%B1%B4\" aria-label=\"4 deadlock 필수 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Deadlock 필수 조건</h2>\n<ol>\n<li>Non preemtible resources</li>\n<li>Exclusive resources</li>\n<li>Serially reusable resources</li>\n<li>Circular wait</li>\n</ol>\n<h2 id=\"5-deadlock-resolution-schemes\" style=\"position:relative;\"><a href=\"#5-deadlock-resolution-schemes\" aria-label=\"5 deadlock resolution schemes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Deadlock Resolution Schemes</h2>\n<ol>\n<li>Deadlock prevention methods: 아예 Deadlock 일어나지 않게 하기.</li>\n<li>Deadlock avoidance methods: Deadlock 일어나는 상황 계산해서 선택 안하게 하기.</li>\n<li>Deadlock detection and deadlock recovery methods: Deadlock 발생하면 그 때 해결하기.</li>\n</ol>\n<h3 id=\"51-deadlock-prevention-methods\" style=\"position:relative;\"><a href=\"#51-deadlock-prevention-methods\" aria-label=\"51 deadlock prevention methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 Deadlock prevention methods</h3>\n<p>Deadlock 이 일어나는 필수 조건 중에 하나를 일어나지 않게 막는 방법이다. 구현 불가능하거나 실용적이지 않아서 사용되지 않는다.</p>\n<h4 id=\"511-exclusive-한-자원을-shared-하게-쓰기\" style=\"position:relative;\"><a href=\"#511-exclusive-%ED%95%9C-%EC%9E%90%EC%9B%90%EC%9D%84-shared-%ED%95%98%EA%B2%8C-%EC%93%B0%EA%B8%B0\" aria-label=\"511 exclusive 한 자원을 shared 하게 쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1.1 exclusive 한 자원을 shared 하게 쓰기</h4>\n<p>불가능</p>\n<h4 id=\"512-자원을-preemtible-하게-쓰기\" style=\"position:relative;\"><a href=\"#512-%EC%9E%90%EC%9B%90%EC%9D%84-preemtible-%ED%95%98%EA%B2%8C-%EC%93%B0%EA%B8%B0\" aria-label=\"512 자원을 preemtible 하게 쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1.2 자원을 preemtible 하게 쓰기</h4>\n<p>방법1: 프로세스가 다른 자원을 갖고 있는 상태로 자원을 요청하면 갖고 있는 모든 자원을 release 하고 다시 시작하기</p>\n<p>방법2: 대기중인 프로세스가 갖고 있는 자원을 요청하면 그 대기중인 프로세스를 다시 시작시키고 그 자원들을 가져온다.</p>\n<p>다른 자원이 필요한 경우에 그 자원을 갖고있는 프로세스를 종료시켜서 뺐어 오는 것이다. 전혀 실용적이지 않을 것이다.</p>\n<h4 id=\"513-자원-전체를-할당-하기\" style=\"position:relative;\"><a href=\"#513-%EC%9E%90%EC%9B%90-%EC%A0%84%EC%B2%B4%EB%A5%BC-%ED%95%A0%EB%8B%B9-%ED%95%98%EA%B8%B0\" aria-label=\"513 자원 전체를 할당 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1.3 자원 전체를 할당 하기</h4>\n<p>방법1: 프로세스 실행 전에 모든 자원을 할당하기</p>\n<p>방법2: 할당받은 자원이 하나도 없을 때 자원 할당받을 수 있게 한다.</p>\n<p>그러니까 요청할 때는 할당받은 자원이 하나도 없는 상태로 요청하게 한다는 것</p>\n<h4 id=\"514-circular-wait-못하게-하기\" style=\"position:relative;\"><a href=\"#514-circular-wait-%EB%AA%BB%ED%95%98%EA%B2%8C-%ED%95%98%EA%B8%B0\" aria-label=\"514 circular wait 못하게 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1.4 circular wait 못하게 하기</h4>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/18-3.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>모든 자원을 그룹지어놓고 순서를 매겨놓는다. 각 프로세스는 더 높은 순서의 자원을 갖고 있는 동안에 낮은 순서의 그룹에 있는 자원을 요청할 수 없게 한다. 그럼으로 circular wait 을 방지한다.</p>\n<h3 id=\"52-deadlock-avoidance\" style=\"position:relative;\"><a href=\"#52-deadlock-avoidance\" aria-label=\"52 deadlock avoidance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2 Deadlock avoidance</h3>\n<p>항상 system 을 safe state(모든 프로세스가 deadlock 없이 안정적인 종료가 가능한 자원 할당의 sequence 가 있는 상태) 로만 유지하거나 deadlock 이 절대 발생하지 않는 상태로 유지하는 방법이다.</p>\n<h4 id=\"521-가정\" style=\"position:relative;\"><a href=\"#521-%EA%B0%80%EC%A0%95\" aria-label=\"521 가정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2.1 가정</h4>\n<ol>\n<li>정해진 수의 프로세스</li>\n<li>정해진 수의 자원 유형과 unit(그 자원에게서 할당받을 수 있는 단위) 수</li>\n<li>프로세스가 어떤 자원을 얼마나 필요로 하는지 미리 알고 있다.</li>\n</ol>\n<h4 id=\"522-dijkstras-algorithm\" style=\"position:relative;\"><a href=\"#522-dijkstras-algorithm\" aria-label=\"522 dijkstras algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2.2 Dijkstra’s algorithm</h4>\n<p>자원 유형이 하나라고 가정한다. 항상 safe state 로 유지한다. 프로세스가 자원을 요청할 때 안정적으로 종료할 수 있는 하나의 자원할당 sequence 라도 있으면 accept 하고 아니면 reject 한다.</p>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/18-4.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>유형이 1개, unit이 10개인 자원이 있다.\r\nP1, P2, P3, 3개의 프로세스가 각각 3, 9, 5 개의 unit 을 최대로 요청하고 현재는 1, 5, 2 개 할당받은 상태이다.</p>\n<p>이때 P1 이 unit 하나를 요청하게 되면 이제 할당했을 때의 상태가 safe state 인지 검사한다.</p>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/18-5.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>이 상태는 safe 상태인데 그 이유는 P1 -> P3 -> P2 순서대로 모든 필요한 자원을 할당해주고 release 시키면 모든 프로세스를 안전하게 종료시킬 수 있기 때문이다.</p>\n<p>이처럼 각 프로세스가 자원을 요청할 때 요청한 상태가 안정적으로 종료할 수 있는 단 하나의 sequence 가 있는지 검사해서 할당하는 방법이다.</p>\n<h4 id=\"523-habermanns-algorithm\" style=\"position:relative;\"><a href=\"#523-habermanns-algorithm\" aria-label=\"523 habermanns algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2.3 Habermann’s algorithm</h4>\n<p>위의 다익스트라 알고리즘의 확장판이다. 자원의 수가 여러 개인 곳에 적용한다.</p>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/18-6.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>P1 ~ P5 까지 5개의 프로세스들이 있다.\r\n각 프로세스들은 각 자원마다 최대로 요청하는 unit 들의 수를 알고 있고 현재 각 자원들에 대해 할당받은 자원 unit 들의 수에 대해서도 알고 있다.</p>\n<p>이때 P2 가 Ra 1개, Rc 2개 (1, 0, 2) 를 요청하면 할당했을 때의 상태가 safe state 인지 검사해서 아니면 reject 한다.</p>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/18-7.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>P2 -> P4 -> P1 -> P3 -> P5 의 자원 할당 순서로 모든 프로세스를 안정적으로 종료할 수 있기 때문에 위의 자원 요청은 accept 된다.</p>\n<h3 id=\"53-deadlock-detection\" style=\"position:relative;\"><a href=\"#53-deadlock-detection\" aria-label=\"53 deadlock detection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3 Deadlock Detection</h3>\n<p>Resource allocation graph 를 만들고 graph reduction 을 통해 해당 state 가 deadlock 인지 검사하는 방법이다.</p>\n<h4 id=\"531-resource-allocation-graph\" style=\"position:relative;\"><a href=\"#531-resource-allocation-graph\" aria-label=\"531 resource allocation graph permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3.1 Resource allocation graph</h4>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/18-8.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>모든 노드는 프로세스 노드와 자원 노드로 나누어진다.</p>\n<p>프로세스 노드 -> 자원 노드: 해당 프로세스에서 해당 자원을 요청\r\n자원 노드 -> 프로세스 노드: 해당 노드에서 해당 프로세스에 자원 할당\r\n엣지에 해당하는 값은 엣지의 숫자다. (여러 unit 을 요청 or 할당 받을 수 있다.)</p>\n<h4 id=\"532-graph-reduction\" style=\"position:relative;\"><a href=\"#532-graph-reduction\" aria-label=\"532 graph reduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3.2 Graph Reduction</h4>\n<p>모든 프로세스를 돌아보면서 요청한 자원들을 다 할당 받을 수 있는 프로세스를 찾는다.</p>\n<p>그런 프로세스를 찾으면 해당 자원에게 할당된, 해당 자원이 요청하고 있는 (연결된 모든 edge 들을) 연결들을 제거한다.</p>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/18-9.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>edge 를 한번 날리고 계속 모든 프로세스를 돌아보는데 더 이상 검사할 프로세스가 없는데 남아있는 edge 가 있으면 deadlock 상태인 것이다.</p>\n<p>해당 프로세스의 edge 들을 다 제거했다는 것은 그 프로세스가 모든 자원을 할당받고 안전하게 종료했다는 것을 의미한다.</p>\n<h3 id=\"54-deadlock-recovery\" style=\"position:relative;\"><a href=\"#54-deadlock-recovery\" aria-label=\"54 deadlock recovery permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4 Deadlock Recovery</h3>\n<p>Deadlock 을 발견하고 그 상태를 해소하기 위한 방법이다. Deadlock 을 이루는 프로세스 중 하나를 종료시키거나 그 자원을 할당하고 있는 프로세스들에게서 자원을 다 뺐는 방법이 있다. (둘 다 프로세스들이 종료된다.)</p>\n<h4 id=\"541-process-termination\" style=\"position:relative;\"><a href=\"#541-process-termination\" aria-label=\"541 process termination permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4.1 Process termination</h4>\n<p>Deadlock 을 이루는 프로세스 중 종료시키는 cost 가 가장 적은 프로세스를 찾아서 종료시킨다.</p>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/18-10.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>위에 상태에서 cost 가 가장 적은 것 부터 종료 시키면 P3 -> P6 -> P1 종료 시키는 방법이 있다. 그런데 사실은 P6 -> P10 만 종료시키면 된다. 그러면 모든 경우의 수의 cost 를 다 조사해서 가장 적은 cost 를 갖는 경우의 process 들을 종료시키는 방법도 있다.</p>\n<h4 id=\"542-resource-preemption\" style=\"position:relative;\"><a href=\"#542-resource-preemption\" aria-label=\"542 resource preemption permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.4.2 Resource preemption</h4>\n<p>Elect resources to be preemptedin order to eliminate deadlocks</p>\n<p>May terminate the processesthat are preempted the elected resourcesand restart/rollback them</p>\n<p>Rollback</p>"}}},"staticQueryHashes":[],"slicesMap":{}}