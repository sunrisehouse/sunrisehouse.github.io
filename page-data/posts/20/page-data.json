{"componentChunkName":"component---src-page-template-post-tsx","path":"/posts/20/","result":{"pageContext":{"post":{"id":20,"title":"Operating System 8 - Virtual Memory","dateString":"2021-12-18","description":"프로세스 마다 가상의 메모리가 하나씩 있는 것처럼 보이게 하는 기법이다. 이점은 프로그래밍을 할 때 실제 메모리 크기를 생각할 필요가 없고 더 많은 프로세스를 동시에 올려놓을 수 있다(multiprogramming degree). 또한 swap in out 하는 프로세스 수가 즐어들어서 swapping, load 하는 IO 가 줄었다. 하지만 실제 주소로 address mapping 을 해야하고 page fault 가 났을때 핸들링을 해줘야한다.","mainImageUrl":"/images/12-0.jpeg","postThemes":[{"name":"post","id":1}],"html":"<h1 id=\"virtual-memory\" style=\"position:relative;\"><a href=\"#virtual-memory\" aria-label=\"virtual memory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Virtual Memory</h1>\n<p>프로세스 마다 가상의 메모리가 하나씩 있는 것처럼 보이게 하는 기법이다.</p>\n<p>이점은 프로그래밍을 할 때 실제 메모리 크기를 생각할 필요가 없고 더 많은 프로세스를 동시에 올려놓을 수 있다(multiprogramming degree). 또한 swap in out 하는 프로세스 수가 즐어들어서 swapping, load 하는 IO 가 줄었다.</p>\n<p>하지만 실제 주소로 address mapping 을 해야하고 page fault 가 났을때 핸들링을 해줘야한다.</p>\n<h2 id=\"1-virtual-memory-methods\" style=\"position:relative;\"><a href=\"#1-virtual-memory-methods\" aria-label=\"1 virtual memory methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Virtual Memory Methods</h2>\n<ol>\n<li>Paging</li>\n<li>Segmentation</li>\n<li>Hybrid paging/segmentation</li>\n</ol>\n<h2 id=\"2-block-mapping\" style=\"position:relative;\"><a href=\"#2-block-mapping\" aria-label=\"2 block mapping permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Block Mapping</h2>\n<p>user program 을 block 으로 나누고 각 block 에 대한 정보를 block map table 로 기록한다.</p>\n<p>virtual address = (b, d)</p>\n<p>b: block number\r\nd: offset in a block</p>\n<p>real address = (a, d)</p>\n<p>virtual address 에 접근할 때 해당 프로세스의 BMT 에 접근해서 block number 로 해당 block 정보에 접근한다. residence bit 을 확인해서 메모리에 그 블럭이 올라와 있는지 확인. 올라와 있으면 real address 바로 가져다 쓰면 되지만 없으면 swap device 에서 load (context switching 됨)</p>\n<h2 id=\"3-demand-paging-system\" style=\"position:relative;\"><a href=\"#3-demand-paging-system\" aria-label=\"3 demand paging system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. (Demand) Paging System</h2>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/20-1.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>프로그램을 같은 크기의 block 으로 나눈다. 처음에는 필요한 block 들을 메모리로 올리고 진행되면서 demand 된 block 들을 load 한다.</p>\n<h2 id=\"4-segmentation-system\" style=\"position:relative;\"><a href=\"#4-segmentation-system\" aria-label=\"4 segmentation system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Segmentation System</h2>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/20-2.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>Segmentationi Mapping Table 에 프로그램의 각 segmentation 에 대한 정보 저장.</p>\n<h2 id=\"5-hybrid-pagingsegmentation\" style=\"position:relative;\"><a href=\"#5-hybrid-pagingsegmentation\" aria-label=\"5 hybrid pagingsegmentation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Hybrid Paging/Segmentation</h2>\n<p>페이징 시스템의 메모리 관리하기 용이함이라는 장점과 세그멘테이션 시스템의 프로그램을 logical 하게 나눠서 sharing 의 용이함이라는 두가지 장점을 합친 방법이다.</p>\n<p>프로그램을 logical 하게 나눈 후 각 Logical partition 을 같은 크기의 block 으로 나눈 방법이다.</p>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/20-3.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>virtual address = segment number / page number / offset</p>\n<p>segment number 로 SMT 에서 어떤 segment 에 있는지 찾고 그 segment 의 PMT 에서 page number 로 page 의 real address 를 찾고 offset 으로 접근하는 방법이다.</p>\n<h2 id=\"6-hardware--software-components\" style=\"position:relative;\"><a href=\"#6-hardware--software-components\" aria-label=\"6 hardware  software components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Hardware / Software Components</h2>\n<h3 id=\"61-hardware-components\" style=\"position:relative;\"><a href=\"#61-hardware-components\" aria-label=\"61 hardware components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.1 Hardware Components</h3>\n<h4 id=\"611-bit-vector\" style=\"position:relative;\"><a href=\"#611-bit-vector\" aria-label=\"611 bit vector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.1.1 Bit Vector</h4>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/20-4.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>해당 페이지 프레임에 관한 정보를 저장한다.</p>\n<p>reference bit vector: 참조될 때 마다 1로 변경한다. 주기적으로 0으로 초기화 된다.</p>\n<p>update bit vector: 수정될 때 1로 변경된다. 나중에 해당 page frame 이 victim 으로 나가야 할 때 sub memory 에 반영되게 한다.</p>\n<h3 id=\"62-software-components\" style=\"position:relative;\"><a href=\"#62-software-components\" aria-label=\"62 software components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2 Software Components</h3>\n<p>virtual memory 를 관리하는 소프트웨어 모듈들이다.</p>\n<h4 id=\"621-allocation-strategies\" style=\"position:relative;\"><a href=\"#621-allocation-strategies\" aria-label=\"621 allocation strategies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2.1 Allocation strategies</h4>\n<p>(How Much) 얼마나 많이 한 프로세스에 메모리 space 를 할당할 것인가 정해야한다. 너무 많이 할당하면 메모리 낭비가 되고 너무 적게 할당하면 page fault 비율이 늘어날 것이다.</p>\n<h4 id=\"622-fetch-strategies\" style=\"position:relative;\"><a href=\"#622-fetch-strategies\" aria-label=\"622 fetch strategies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2.2 Fetch strategies</h4>\n<p>(When) 언제 페이지를 메모리에 부를것인지</p>\n<ul>\n<li>Demand Fetch: reference 됐을 때</li>\n<li>Anticipatory Fetch: 예측해서 fetch 한다. overhead 크고 예측 실패하면 잃는 cost 크다.</li>\n</ul>\n<h4 id=\"623-placement-strategies\" style=\"position:relative;\"><a href=\"#623-placement-strategies\" aria-label=\"623 placement strategies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2.3 Placement strategies</h4>\n<p>(Where) 어디 페이지 프레임에 들어오는 페이지를 넣을지</p>\n<p>First-fit, Best-fit, Worst-fit, Next-fit</p>\n<h4 id=\"624-replacement-strategies\" style=\"position:relative;\"><a href=\"#624-replacement-strategies\" aria-label=\"624 replacement strategies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2.4 Replacement strategies</h4>\n<p>(Who) 어떤 페이지가 나갈지 (페이지 프레임 꽉 차있는데 page fault 나서 메모리에 불러오려면)</p>\n<ul>\n<li>Fixed: MIN(OPT, B0), Random, FIFO(First In First Out), LRU(Least Recently Used), Additional reference-bits, LFU(Least Frequently Used), NUR(Not Used Recently), Clock, Enhanced clock</li>\n<li>Variable: VMIN(Variable MIN), WS(Working Set), PFF(Page Fault Frequency)</li>\n</ul>\n<h4 id=\"625-cleaning-strategies\" style=\"position:relative;\"><a href=\"#625-cleaning-strategies\" aria-label=\"625 cleaning strategies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2.5 Cleaning strategies</h4>\n<p>(When) 언제 update 된 페이지를 반영할 것인지</p>\n<ul>\n<li>Demand cleaning</li>\n<li>Anticipatory cleaning (pre-cleaning)</li>\n</ul>\n<h4 id=\"626-load-control-strategies\" style=\"position:relative;\"><a href=\"#626-load-control-strategies\" aria-label=\"626 load control strategies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2.6 Load control strategies</h4>\n<p>얼마나 많은 프로세스를 메모리에 올릴지 (multiprogramming degree) 정하는 것. allocation strategy 와 관련있다.</p>\n<ul>\n<li>Underloaded</li>\n<li>Overloaded</li>\n<li>Plateau</li>\n</ul>\n<h2 id=\"7-replacement-strategies\" style=\"position:relative;\"><a href=\"#7-replacement-strategies\" aria-label=\"7 replacement strategies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Replacement Strategies</h2>\n<p>페이지 프레임이 꽉찼을 때 누가 나갈지를 정하는 전략이다. 페이지 프레임 수가 정해져 있는 상황(fixed allocaation)에서 쓰는 전략과 페이지 프레임이 변하는 상황(variable allocation)에서 쓰는 전략이 있다.</p>\n<h4 id=\"71-min\" style=\"position:relative;\"><a href=\"#71-min\" aria-label=\"71 min permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7.1 Min</h4>\n<p>가장 page fault frequency 가 적은 방법이다. 가장 오랫동안 참조되지 않을 페이지 프레임을 내보낸다. 이 방법은 언제 참조되는지 알아야 하기 때문에 실현 불가능하고 얼마나 빠른지 비교하기 위해 사용된다고 한다.</p>\n<h4 id=\"72-random\" style=\"position:relative;\"><a href=\"#72-random\" aria-label=\"72 random permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7.2 Random</h4>\n<p>그냥 랜덤으로 뽑는 전략이다.</p>\n<h4 id=\"73-fifo\" style=\"position:relative;\"><a href=\"#73-fifo\" aria-label=\"73 fifo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7.3 FIFO</h4>\n<p>가장 먼저 들어온 (오래된) 페이지 프레임을 교체한다. 페이지 프레임이 로드된 시간을 기록해서 새 페이지가 들어와야 할 때 전체 timestamp 를 비교한다.</p>\n<h4 id=\"74-lru\" style=\"position:relative;\"><a href=\"#74-lru\" aria-label=\"74 lru permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7.4 LRU</h4>\n<p>가장 오래 전에 참조된 페이지 프레임을 교체한다. 페이지 프레임이 참조될 때 시간을 기록해야한다.</p>\n<h4 id=\"75-nur\" style=\"position:relative;\"><a href=\"#75-nur\" aria-label=\"75 nur permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7.5 NUR</h4>\n<h4 id=\"76-clock\" style=\"position:relative;\"><a href=\"#76-clock\" aria-label=\"76 clock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7.6 Clock</h4>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/20-5.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>시계바늘 돌면서 reference bit 와 update bit 이 (0, 0) 인 것을 victim 으로 선택한다. 돌면서 update bit 이 1 이거나 reference bit 이 1 이면 0 으로 바꾼다.</p>\n<h4 id=\"77-enhanced-clock\" style=\"position:relative;\"><a href=\"#77-enhanced-clock\" aria-label=\"77 enhanced clock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7.7 Enhanced clock</h4>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/20-5.png\" style=\"width:90%; max-width: 400px\" />\r\n</div>\n<p>시계바늘 돌면서 reference bit 와 update bit 이 (0, 0) 인 것을 victim 으로 선택한다. 돌면서 update bit 이 1 이거나 reference bit 이 1 이면 0 으로 바꾼다.</p>\n<h4 id=\"78-working-set-memory-management\" style=\"position:relative;\"><a href=\"#78-working-set-memory-management\" aria-label=\"78 working set memory management permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7.8 Working set memory management</h4>\n<p>일정 시간 내에 참조된 페이지들을 메모리에 로드해 놓는 방법이다. working set 이라는 variable 한 page frames 들을 관리한다.</p>"}}},"staticQueryHashes":[],"slicesMap":{}}