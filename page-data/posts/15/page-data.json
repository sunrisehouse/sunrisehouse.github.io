{"componentChunkName":"component---src-page-template-post-tsx","path":"/posts/15/","result":{"pageContext":{"post":{"id":15,"title":"Operating System 3 - Process management","dateString":"2021-12-13","description":"운영체제는 process 들을 관리한다. 프로세스들이 운영체제 위에서 최적으로 돌아갈 수 있도록 운영체제가 여러가지 기법을 이용해 관리를 한다. 그 기법들을 공부한다. 들어가기에 앞서 프로세스가 무엇인지 부터 알아보았다.","mainImageUrl":"/images/12-0.jpeg","postThemes":[{"name":"post","id":1}],"html":"<h1 id=\"operating-system---process-management\" style=\"position:relative;\"><a href=\"#operating-system---process-management\" aria-label=\"operating system   process management permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operating System - Process management</h1>\n<p>운영체제는 process 들을 관리한다. 프로세스들이 운영체제 위에서 최적으로 돌아갈 수 있도록 운영체제가 여러가지 기법을 이용해 관리를 한다. 그 기법들을 공부한다. 들어가기에 앞서 프로세스가 무엇인지 부터 알아보았다.</p>\n<h2 id=\"1-프로세스\" style=\"position:relative;\"><a href=\"#1-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\" aria-label=\"1 프로세스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 프로세스</h2>\n<p>프로세스는 운영체제(커널) 에 실행하도록 등록된 Entity 이다.</p>\n<h2 id=\"2-process-and-job\" style=\"position:relative;\"><a href=\"#2-process-and-job\" aria-label=\"2 process and job permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Process and Job</h2>\n<p>실행 전에는 File or Job 등으로 불리지만 사용자가 실행하는 순간 커널에 프로세스로 등록되게된다.</p>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/15-1.png\" style=\"width:90%; max-width: 500px\" />\r\n</div>\n<h2 id=\"3-process-and-resource\" style=\"position:relative;\"><a href=\"#3-process-and-resource\" aria-label=\"3 process and resource permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Process and Resource</h2>\n<p>OS system 에서 Resource 들은 이제 프로세스가 사용하기 위해 커널에 요청하는 것들이다.</p>\n<p>전체 System 은 크게 Process - Kernel - Resource 로 이루어져있다고 볼 수 있고 Process 는 Resource 를 요청하기 위해 꼭 Kernel 을 거쳐야 한다.</p>\n<h2 id=\"4-pcb\" style=\"position:relative;\"><a href=\"#4-pcb\" aria-label=\"4 pcb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. PCB</h2>\n<p>프로세스 entity 는 PCB (Process Control Block) 으로 kernel space 에 구현돼있다.</p>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/15-2.png\" style=\"width:90%; max-width: 500px\" />\r\n</div>\n<h3 id=\"4-1-pcb-에-저장되는-정보\" style=\"position:relative;\"><a href=\"#4-1-pcb-%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%98%EB%8A%94-%EC%A0%95%EB%B3%B4\" aria-label=\"4 1 pcb 에 저장되는 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-1. PCB 에 저장되는 정보</h3>\n<ul>\n<li>PID</li>\n<li>Process state</li>\n<li>Scheduling information: 프로세스 스케쥴링 관련 정보</li>\n<li>Memory management information</li>\n<li>IO status information</li>\n<li>Accounting information</li>\n<li>Context save area: Context Switching 발생할 때 register context 를 저장하는 용도</li>\n</ul>\n<h3 id=\"4-2-os-별-pcb\" style=\"position:relative;\"><a href=\"#4-2-os-%EB%B3%84-pcb\" aria-label=\"4 2 os 별 pcb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-2. OS 별 PCB</h3>\n<p>Unix</p>\n<ul>\n<li>Process Table Slot</li>\n<li>U - area</li>\n</ul>\n<p>Linux</p>\n<ul>\n<li>Process Descriptor (task_struct)</li>\n</ul>\n<h2 id=\"5-process-states\" style=\"position:relative;\"><a href=\"#5-process-states\" aria-label=\"5 process states permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Process States</h2>\n<p>메모리를 할당받았는가, Processor 를 요청하는 중인가, Processor 를 할당받았는가 등으로 State 가 나뉜다.</p>\n<p>Active: 메모리를 할당 받은 상태</p>\n<ul>\n<li>Running: 프로세서를 할당받아서 코드가 실행되는 상태</li>\n<li>Ready: 프로세서를 할당받지 못해서 요청하고 있는 상태</li>\n<li>Blocked, Asleep: 다른 자원(IO 등)을 요청 하고 있는 상태</li>\n</ul>\n<p>Suspended, Swapped-out: 메모리를 할당받지 못한 상태</p>\n<ul>\n<li>Suspended-ready: 메모리를 할당받지 못해서 메모리 할당 받으면 프로세스를 요청하는 상태</li>\n<li>Suspendedd-block: 메모리를 할당받지 못한 상태로 다른 자원 요청하고 기다리는 상태</li>\n</ul>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/15-3.png\" style=\"width:90%; max-width: 500px\" />\r\n</div>\n<h2 id=\"6-process-scheduling\" style=\"position:relative;\"><a href=\"#6-process-scheduling\" aria-label=\"6 process scheduling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Process Scheduling</h2>\n<p>Long term scheduling: Job 들을 Kernel 에 등록할 때 어떤 Job 을 등록할지</p>\n<p>Medium term scheduling: Swaped out 된 프로세스 중에 어떤 프로세스에 메모리를 할당 시켜줄지</p>\n<p>Short term scheduling: 프로세서 요청중인 프로세스 중에 어떤 프로세스한테 프로세서 할당할지</p>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/15-4.png\" style=\"width:90%; max-width: 500px\" />\r\n</div>\n<h2 id=\"7-interrupt\" style=\"position:relative;\"><a href=\"#7-interrupt\" aria-label=\"7 interrupt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Interrupt</h2>\n<p>interrupt 는 다양한 상황에서 발생하는 이벤트이다. 이 이벤트(interrupt)가 발생하면 각 상황에 맞게 대응한다.</p>\n<h3 id=\"71-interrupt-handling\" style=\"position:relative;\"><a href=\"#71-interrupt-handling\" aria-label=\"71 interrupt handling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7.1 interrupt handling</h3>\n<div style=\"text-align:center\">\r\n  <img src=\"/images/15-5.png\" style=\"width:90%; max-width: 500px\" />\r\n</div>\n<ol>\n<li>interrupt 발생</li>\n<li>현재 실행중인 프로세스 중지 후 context saving</li>\n<li>interrupt handler 코드 실행</li>\n<li>source 와 reason 분석 후 적절한 ISR 실행</li>\n<li>context restoring</li>\n</ol>\n<h2 id=\"8-inter-process-communication-ipc\" style=\"position:relative;\"><a href=\"#8-inter-process-communication-ipc\" aria-label=\"8 inter process communication ipc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. Inter Process Communication (IPC)</h2>\n<p>프로세스간에 communication 방식에 대해서 알아보자</p>\n<ol>\n<li>Message Passing: 메시지를 send and receive</li>\n<li>Shared Memory: 공유된 메모리를 read and write</li>\n<li>RPC (Remote Procedure Call): 커널에 있는 RPC 를 통해서 client 와 server 가 각자의 stub 에서 message 를 pack and unpack</li>\n<li>RMI (Remote Method Invocation): Java 용 이라고 했던 것 같은뎅</li>\n<li>LRPC (Lightweight RPC): Light 버전</li>\n<li>DSM (Distributed Shared Memory): network 를 통해 연결된 가상의 공유 메모리를 통해 통신</li>\n</ol>"}}},"staticQueryHashes":[],"slicesMap":{}}